// $Id: Field.java,v 1.5 2003/05/29 23:33:28 john Exp $
/*
 * Copyright 1998-2009 University Corporation for Atmospheric Research/Unidata
 *
 * Portions of this software were developed by the Unidata Program at the
 * University Corporation for Atmospheric Research.
 *
 * Access and use of this software shall impose the following obligations
 * and understandings on the user. The user is granted the right, without
 * any fee or cost, to use, copy, modify, alter, enhance and distribute
 * this software, and any derivative works thereof, and its supporting
 * documentation for any purpose whatsoever, provided that this entire
 * notice appears in all copies of the software, derivative works and
 * supporting documentation.  Further, UCAR requests that the user credit
 * UCAR/Unidata in any publications that result from the use of this
 * software or in any product that includes this software. The names UCAR
 * and/or Unidata, however, may not be used in any advertising or publicity
 * to endorse or promote any products or commercial entity unless specific
 * written permission is obtained from UCAR/Unidata. The user also
 * understands that UCAR/Unidata is not obligated to provide the user with
 * any support, consulting, training or assistance of any kind with regard
 * to the use, operation and performance of this software nor to provide
 * the user with any updates, revisions, new versions or "bug fixes."
 *
 * THIS SOFTWARE IS PROVIDED BY UCAR/UNIDATA "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL UCAR/UNIDATA BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE ACCESS, USE OR PERFORMANCE OF THIS SOFTWARE.
 */

package ucar.util.prefs.ui;

import java.util.prefs.*;
import ucar.util.prefs.PreferencesExt;

import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.text.*;
import java.util.*;

import javax.swing.*;
import javax.swing.text.*;
import javax.swing.text.html.*;

/**
 *  Data input fields, mainly used in ucar.util.prefs.ui.PrefPanel.
 *
 *  <p> Each Field has a JLabel and a JComponent for user editing/input.
 *  A Field can have a tooltip, and can be enabled/disabled from allowing editing.
 *  The name of the Field must be unique within the Preferences node.
 *
 * <p> Upon startup, the value of the field stored in the Preferences is used as the
 *  starting value (if it exists), otherwise, the "default value" is used.
 *
 * <p> The value of the Field may change when a user presses "Enter" key or the "Accept" button.
 *  Intermediate edit values are not visible to the application; call accept() to
 *  ensure that any editing done in the editComponent becomes the current value.
 *  When the value changes, it is stored in the Preferences, and a PropertyChangeEvent is
 *  sent.
 *
 * <p> If the value of the Preferences changes, the Field gets the new value and
 *  displays it. If different from previous value, a PropertyChangeEvent is sent.
 *  Thus the Prefences object is the "model" and the Field is the "view", and they
 *  automatically stay in synch.
 *
 * @author John Caron
 * @version $Id: Field.java,v 1.5 2003/05/29 23:33:28 john Exp $
 */

public abstract class Field {
  protected String name;
  protected Preferences storeData;
  protected javax.swing.event.EventListenerList listenerList = null;

  protected String label;
  protected Object value, oldValue;

  protected boolean showFormat = false;

  /** Constructor
   *  @param name of the field; must be unique within the store
   *  @param label to display to the user
   *  @param storeData store/fetch data from here, may be null.
   */
  protected Field(String name, String label, Preferences storeData) {
    this.name = name;
    this.label = label;
    this.storeData = storeData;

    // listen for changes to this value
    if (storeData != null) {
      storeData.addPreferenceChangeListener(new PreferenceChangeListener () {
        public void preferenceChange(PreferenceChangeEvent evt) {
          if (evt.getKey().equals(getName())) {
            //System.out.println("Field: node listener on "+ evt.getNode().name()+" key = <"+evt.getKey()+"> val= <"+evt.getNewValue()+">");
            // get it from the store, put it in the edit component
            // send event if its new
            setNewValueFromStore();
          }
        }
      });
    }

  }

  //// public methods

  /** Return the name of the field */
  public String getName() { return name; }
  /** Return the JLabel component */
  public String getLabel() { return label; }
  /** Return the Preferences component */
  public Preferences getPreferences() { return storeData; }

  /** Return whether the field is enabled */
  public boolean isEnabled( ) { return getEditComponent().isEnabled(); }
  /** Set whether the field is enabled */
  public void setEnabled( boolean enable) { getEditComponent().setEnabled( enable); }

  /** Return whether the field is editable, default == enabled */
  public boolean isEditable() { return isEnabled(); };
  /** Set whether the field is editable, default == enabled */
  public void setEditable(boolean editable) { setEnabled( editable); };

  /** Set the tooltip */
  public void setToolTipText( String tip) {
    //label.setToolTipText( tip);
    getEditComponent().setToolTipText( tip);
  }
  /** Get the tooltip */
  public String getToolTipText() { return getEditComponent().getToolTipText(); }

  /** Register for PropertyChange events when the value of the Field changes.
   *  When the user hits "enter" or accept() is called,
   *  you will get a new PropertyChangeEvent(this, fldName, oldValue, newValue), where
   *  the oldValue, newValue will be String, Integer, Boolean, etc.
   */
  public void addPropertyChangeListener( PropertyChangeListener pcl) {
    if (listenerList == null)
      listenerList = new javax.swing.event.EventListenerList();
    listenerList.add(PropertyChangeListener.class, pcl);
  }
  /** Deregister for when the value changes */
  public void removePropertyChangeListener(PropertyChangeListener pcl) {
    listenerList.remove(PropertyChangeListener.class, pcl);
  }

  //// subclasses must implement these

  /** Return the editing JComponent */
  abstract public JComponent getEditComponent();

   /** get current value from editComponent */
  abstract protected Object getEditValue();

  /** set value of editComponent */
  abstract void setEditValue(Object value);

  /** get value from Store, may return null */
  abstract protected Object getStoreValue(Object defValue);

 /** put new value into Store */
  abstract protected void setStoreValue(Object newValue);

  //// these are utility routines that should work for subclasses,
  //// but may need to be overridden

  /** get current value from editComponent, save to store.
   *  if different from old value, fire PropertyChangeEvent */
  protected void accept(){
    if (isDifferent( getEditValue())) {
      setStoreValue( value);
      sendEvent();
    }
  }

  // see if this value is different from current value
  protected boolean isDifferent(Object newValue) {
    // System.out.println("isDifferent "+newValue+" "+value);
    if (newValue == null) return false;
    if ((value != null) && value.equals( newValue)) return false;
    oldValue = value;
    value = newValue;
    return true;
  }

    /* get value from store, put value into editComponent */
  protected void restoreValue( Object defValue) {
    if (storeData != null) {
      value = getStoreValue( defValue);
      setEditValue( value);
    }
  }

  // change value, send event
  protected void sendEvent() {
    if (listenerList != null) {
      PropertyChangeEvent event = new PropertyChangeEvent(this, name, oldValue, value);
      Object[] listeners = listenerList.getListenerList();
      for (int i=listeners.length-2; i>=0; i-=2)
        ((PropertyChangeListener)listeners[i+1]).propertyChange(event);
    }
  }

  // the listener on the Store gets String-valued newvalue.
  protected void setNewValueFromStore() {
    Object newValue = getStoreValue( value);
    if (isDifferent(newValue)) {
      setEditValue(value);
      sendEvent();
    }
  }

  protected void next() {
    java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager().focusNextComponent( getEditComponent());
  }

  /////////////////////////////////////////////////////////////////////////////////////////
  // subclasses

  /**
   * String input field.
   */
  static public class Text extends Field {
    protected JTextField tf;

    /** Constructor for subclasses.
     *  @param name of the field; must be unique within the store
     *  @param label to display to the user
     *  @param storeData store/fetch data from here, may be null.
     */
    protected Text(String name, String label, Preferences storeData) {
      super(name, label, storeData);
    }

    /** Constructor.
     *  @param name of the field; must be unique within the store
     *  @param label to display to the user
     *  @param defValue defau;lt value to start with.
     *  @param storeData store/fetch data from here, may be null.
     *  @see PrefPanel#addTextField
     */
    public Text(String name, String label, String defValue, Preferences storeData) {
      super(name, label, storeData);

      value = getStoreValue( defValue);

      tf = new JTextField( (String) value);
      tf.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          // System.out.println("Field.Text: got Action event on "+getName());
          accept();
          next();
        }
      });
    }

    // return the editing JComponent
    public JComponent getEditComponent() { return tf; }

    // get current value from editComponent
    protected Object getEditValue() { return normalize(tf.getText()); }

    // set current value of editComponent
    protected void setEditValue(Object value) { tf.setText((String) value); }

    /** Can the user edit this field. */
    public boolean isEditable() { return tf.isEditable(); }
    public void setEditable( boolean isEditable) { tf.setEditable( isEditable); }

    // set a new value into the Store
    // return true if different from old value
    protected void setStoreValue( Object value) {
      if (storeData != null)
        storeData.put(name, (String) value);
    }

    /* get value from store, put value into editComponent */
    protected Object getStoreValue( Object defValue) {
      if (storeData != null)
        return storeData.get(name, (String) defValue);
      else
        return defValue;
    }

    /** Return the current value */
    public String getText() { return normalize( (String)value); }

    private String normalize(String s) {
      String trimValue = s.trim();
      return (trimValue.length() > 0) ? trimValue : s;
    }

    /** Set value of text; if different from current value, store in Preferences and
     *  send event. */
    public void setText(String newValue) {
      newValue = normalize(newValue);
      if (isDifferent(newValue)) {
        //System.out.println("setText: before size = "+tf.getPreferredSize());
        setEditValue(newValue);
        //System.out.println("setText: after size = "+tf.getPreferredSize());
        setStoreValue(newValue);
        tf.revalidate();
        //System.out.println("setText: revalid size = "+tf.getPreferredSize());
        sendEvent();
      }
    }
  }

  /**
   * A text input field which doesnt echo the input, for passwords.
   */
  static public class Password extends Text {

    /** Constructor.
     *  @param name of the field; must be unique within the store
     *  @param label to display to the user
     *  @param defValue defau;lt value to start with.
     *  @param storeData store/fetch data from here, may be null.
     *  @see PrefPanel#addPasswordField
     */
    public Password(String name, String label, String defValue, Preferences storeData) {
      super(name, label, storeData);

      value = this.getStoreValue( defValue);

      tf = new JPasswordField( (String) value);
      tf.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          accept();
          next();
        }
      });
    }

    /** Return the current value as char array */
    public char[] getPassword() { return ((JPasswordField)tf).getPassword(); }

  }

  /**
   * General class for formatted input field using JFormattedTextField (jdk 1.4).
   * NOTE: to use this directly, you must use a PreferencesExt object.
   * @see JFormattedTextField
   */
  static public class TextFormatted extends Field {
    protected JFormattedTextField tf;
    //protected JFormattedTextField.AbstractFormatter format;

    /** Constructor.
     *  @param name of the field; must be unique within the store
     *  @param label to display to the user
     *  @param defValue default value to start with; type is used by JFormattedTextField
     *    to determine how to format
     *  @param storeData store/fetch data from here, may be null.
     */
    public TextFormatted(String name, String label, JFormattedTextField tf, Object defValue, Preferences storeData) {
      super(name, label, storeData);
      setFormattedTextField( tf, defValue);
    }

    public TextFormatted(String name, String label, Preferences storeData) {
      super(name, label, storeData);
    }

    /** Constructor.
     *  @param name of the field; must be unique within the store
     *  @param label to display to the user
     *  @param format AbstractFormatter to use, may be null
     *  @param defValue default value to start with; type is used by JFormattedTextField
     *    to determine how to format
     *  @param storeData store/fetch data from here, may be null.
     *  @see PrefPanel#addIntField
     */
    public void setFormattedTextField(JFormattedTextField tf, Object defValue) {

      if (tf != null)
        this.tf = new JFormattedTextField();
      else
        this.tf = tf;

      value = getStoreValue( defValue);
      this.tf.setValue( value);

      this.tf.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          // System.out.println("Field.TextFormatted: got Action event on "+getName());
          accept();
          next();
        }
      });
    }

    /** return the editing JComponent */
    public JComponent getEditComponent() { return tf; }

    // get current value from editComponent
    protected Object getEditValue() {
      try {
        tf.commitEdit();
        return tf.getValue();
      } catch (java.text.ParseException e) {
        java.awt.Toolkit.getDefaultToolkit().beep();
        System.out.println("Field.TextFormatted: invalid format "+ getName()+" = "+tf.getText());
        return null;
      }
    }

    // set current value of editComponent
    protected void setEditValue(Object value) { tf.setValue(value); }

    /** Can user edit. Default is true. */
    public boolean isEditable() { return tf.isEditable(); }
    public void setEditable( boolean isEditable) { tf.setEditable( isEditable); }

    // set a new value into the Store
    protected void setStoreValue( Object value) {
      if (storeData != null)
        ((PreferencesExt)storeData).putBeanObject(name, value);
    }

    /* get value from store */
    protected Object getStoreValue( Object defValue) {
      if (storeData != null)
        return ((PreferencesExt)storeData).getBean(name, defValue);
      else
        return defValue;
    }

    /** Return the current value */
    public Object getValue() { return value; }

    /** Set value; if different from current value, store in Preferences and
     *  send event. */
    public void setValue(Object newValue) {
      if (isDifferent(newValue)) {
        setEditValue(newValue);
        setStoreValue(newValue);
        sendEvent();
      }
    }
  }

  /** Data input for int */
  static public class Int extends TextFormatted {

    /** Constructor.
     *  @param name of the field; must be unique within the store
     *  @param label to display to the user
     *  @param defValue default value to start with.
     *  @param storeData store/fetch data from here, may be null.
     *  @see PrefPanel#addIntField
     */
    public Int(String name, String label, int defValue, Preferences storeData) {
      super(name, label, storeData);

      NumberFormat format = NumberFormat.getIntegerInstance();
      JFormattedTextField.AbstractFormatterFactory formatter =
          new DefaultFormatterFactory(new NumberFormatter(format));
      JFormattedTextField tf = new JFormattedTextField(formatter);

      setFormattedTextField(tf, new Integer(defValue));
      if (showFormat) showFormatInfo( tf);
    }

    // set a new value into the Store
    protected void setStoreValue( Object value) {
      if (storeData != null)
        storeData.putInt(name, ((Number) value).intValue());
    }

    /* get value from store, put value into editComponent */
    protected Object getStoreValue( Object defValue) {
      if (storeData == null) return defValue;
      int ival = (defValue == null) ? 0 : ((Number) defValue).intValue();
      ival = storeData.getInt(name, ival);
      return new Integer( ival);
    }

    /** Return the current value */
    public int getInt() { return ((Number) value).intValue(); }

    /** Set value; if different from current value, store in Preferences and
     *  send event. */
    public void setInt(int newValue) {
      Object oval = new Integer(newValue);
      if (isDifferent(oval)) {
        this.setEditValue(oval);
        setStoreValue(oval);
        sendEvent();
      }
    }
  }

  /** Data input for double */
  static public class Double extends TextFormatted {
    private DecimalFormat decf;

    /** Constructor.
     *  @param name of the field; must be unique within the store
     *  @param label to display to the user
     *  @param defValue default value to start with.
     *  @param storeData store/fetch data from here, may be null.
     *  @see PrefPanel#addDoubleField
     */
    public Double(String name, String label, double defValue, Preferences storeData) {
      super(name, label, storeData);

      NumberFormat format = NumberFormat.getNumberInstance();
      format.setMinimumFractionDigits(2);
      format.setMaximumFractionDigits(4);
      JFormattedTextField.AbstractFormatterFactory formatter =
          new DefaultFormatterFactory(new NumberFormatter(format));
      setFormattedTextField(new JFormattedTextField(formatter), new java.lang.Double(defValue));

      //DecimalFormat decf = new DecimalFormat();
      //decf.setMaximumFractionDigits( 5);
      //tf.setFormatterFactory(new DoubleFormatterFactory(decf));

      /* System.out.println("getMaximumIntegerDigits="+decf.getMaximumIntegerDigits());
      System.out.println("getMinimumIntegerDigits="+decf.getMinimumIntegerDigits());
      System.out.println("getMaximumFractionDigits="+decf.getMaximumFractionDigits());
      System.out.println("getMinimumFractionDigits="+decf.getMinimumFractionDigits()); */
    }

    /**
     * Set max fractional digits to display
     * @param maximumFractionDigits
     * @see java.text.DecimalFormat
     */
    public void setMaximumFractionDigits( int maximumFractionDigits) {
      decf.setMaximumFractionDigits(maximumFractionDigits);
    }

        // set a new value into the Store
    protected void setStoreValue( Object value) {
      if (storeData != null)
        storeData.putDouble(name, ((Number) value).doubleValue());
    }

    /* get value from store, put value into editComponent */
    protected Object getStoreValue( Object defValue) {
      if (storeData == null) return defValue;
      double dval = (defValue == null) ? 0.0 : ((Number) defValue).doubleValue();
      dval = storeData.getDouble(name, dval);
      return new java.lang.Double( dval);
    }

    /** Return the current value */
    public double getDouble() { return ((Number) value).doubleValue(); }

    /** Set value; if different from current value, store in Preferences and
     *  send event. */
    public void setDouble(double newValue) {
      Object oval = new java.lang.Double(newValue);
      if (isDifferent(oval)) {
        this.setEditValue(oval);
        setStoreValue(oval);
        sendEvent();
      }
    }

    // a lot of bloody trouble just to cover DecimalFormat!!
    private class DoubleFormatter extends JFormattedTextField.AbstractFormatter {
      private DecimalFormat dformat;
      DoubleFormatter(DecimalFormat dformat) { this.dformat = dformat; }
      public String valueToString(Object value) { return "    " + dformat.format(value); }
      public Object stringToValue(String text) throws java.text.ParseException {
        return dformat.parseObject(text);
      }
    }
    private class DoubleFormatterFactory extends JFormattedTextField.AbstractFormatterFactory {
      private DoubleFormatter dformat;
      DoubleFormatterFactory(DecimalFormat decf) { dformat = new DoubleFormatter(decf); }
      public JFormattedTextField.AbstractFormatter getFormatter(JFormattedTextField tf) {
        return dformat;
      }
    }
  }

  /** Data input for Date */
  static public class Date extends TextFormatted {

    /** Constructor.
     *  @param name of the field; must be unique within the store
     *  @param label to display to the user
     *  @param defValue default value to start with.
     *  @param storeData store/fetch data from here, may be null.
     *  @see PrefPanel#addDateField
     */
    public Date(String name, String label, java.util.Date defValue, Preferences storeData) {
      super(name, label, null, defValue, storeData);
      try {
        JFormattedTextField.AbstractFormatter format = tf.getFormatter();
        setToolTipText( "eg "+format.valueToString(new java.util.Date()));
      } catch (java.text.ParseException e) {}
    }

      // set a new value into the Store
    protected void setStoreValue( Object value) {
      if (storeData != null)
        storeData.putLong(name, ((java.util.Date)value).getTime());
    }

    // get value from store
    protected Object getStoreValue( Object defValue) {
      if (storeData == null) return defValue;
      long def= defValue == null ? 0 : ((java.util.Date)defValue).getTime();
      long secs = storeData.getLong(name, def);
      return new java.util.Date( secs);
    }

        // set a new value into the Store
    protected void setStoreValue() {
      if (storeData != null)
        storeData.putLong(name, ((java.util.Date)value).getTime());
    }

    /* get value from store, put value into editComponent */
    protected void restoreValue() {
      if (storeData != null) {
        long secs = storeData.getLong(name, ((java.util.Date)value).getTime());
        value = new java.util.Date( secs);
        tf.setValue(value);
      }
    }

    /** Return the current value */
    public java.util.Date getDate() { return (java.util.Date) value; }

    /** Set value; if different from current value, store in Preferences and
     *  send event. */
    public void setDate(java.util.Date newValue) {
      if (isDifferent(newValue)) {
        this.setEditValue(newValue);
        setStoreValue(newValue);
        sendEvent();
      }
    }
  }

  /**
   * A boolean input box using a checkbox.
   */
  static public class CheckBox extends Field {
    private JCheckBox checkbox;

    /** Constructor.
     *  @param fldName name of the field; must be unique within the store
     *  @param label label to display to the user
     *  @param defValue default value to start with.
     *  @param storeData store/fetch data from here, may be null.
     *  @see PrefPanel#addCheckBoxField
     */
    public CheckBox( String fldName, String label, boolean defValue, Preferences storeData ) {
      super( fldName, label, storeData);

      value = getStoreValue( new Boolean(defValue));
      checkbox = new JCheckBox();
      checkbox.setSelected( isSelected());
      checkbox.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          accept();
          next();
        }
      });
    }

    /** return the editing JComponent */
    public JComponent getEditComponent() { return checkbox; }

    // get current value from editComponent
    protected Object getEditValue() {
      return new Boolean(checkbox.isSelected());
    }

    // set current value of editComponent
    protected void setEditValue(Object value) {
      boolean bv = ((Boolean) value).booleanValue();
      checkbox.setSelected(bv);
    }

    // set a new value into the Store
    // return true if different from old value
    protected void setStoreValue( Object value) {
      if (storeData != null)
        storeData.putBoolean(name, ((Boolean) value).booleanValue());
    }

    /* get value from store, put value into editComponent */
    protected Object getStoreValue( Object defValue) {
      if (storeData == null)
        return defValue;
      boolean def = (defValue == null) ? false : ((Boolean) defValue).booleanValue();
      boolean bv = storeData.getBoolean(name, def);
      return new Boolean( bv);
    }

    /** Return the current value */
    public boolean isSelected() { return ((Boolean) value).booleanValue(); }

    /** Set value; if different from current value, store in Preferences and
     *  send event. */
    public void setSelected(boolean v) {
      Object oval = new java.lang.Boolean(v);
      if (isDifferent(oval)) {
        setEditValue(oval);
        setStoreValue(oval);
        sendEvent();
      }
    }
  }

  /**
   * A text input field which keeps track of recent choices in a combobox. The order they appear
   * in the combobox choices reflects how recently they were chosen.
   * NOTE: to use this, you must use a PreferencesExt object.
   *
   * @see ComboBox
   */
  static public class TextCombo extends Field {
    private ComboBox combo;
    private boolean eventsOK = true;
    private int nKeep;

    /** Constructor.
     *  @param fldName name of the field, must be unique within the store.
     *  @param label to display to the user
     *  @param defValues list of default values to include in the comboBox. May be null.
     *    These are added to the combobox (at the end) no matter how many there are.
     *  @param n  number of most recently used values to keep
     *  @param storeData store/fetch data from here, may be null.
     *  @see PrefPanel#addTextComboField
     */
    public TextCombo(String fldName, String label, java.util.Collection defValues, int n, PreferencesExt storeData) {
      super( fldName, label, storeData);
      this.nKeep = n;

      combo = new ComboBox(storeData == null ? null : (PreferencesExt) storeData.node(name+"_ComboBox"));
      java.util.ArrayList prevChoices = combo.getItemList();

      // add defaults : only added if not already present
      if (defValues != null) {
        prevChoices.addAll( defValues);
        combo.setItemList(prevChoices);
      }

      // first one is the current choice
      if (combo.getItemCount() > 0) {
        combo.setSelectedIndex(0);
        value = combo.getItemAt(0);
      }
      // unless theres a stored default
      //restoreValue( value);

      combo.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          System.out.println("textCombo event= "+getEditValue()+" ok = "+eventsOK);
          if (!eventsOK) return;
          accept();
          next();
        }
      });
    }

        /** return the editing JComponent */
    public JComponent getEditComponent() { return combo; }

    // LOOK edit value vs store value: List vs Object ??

       /** get current value from editComponent */
    protected Object getEditValue() { return combo.getItemList(); }

    /** set value of editComponent */
    protected void setEditValue(Object value) {
      if (value == null) return;
      eventsOK = false;
      combo.setItemList( (Collection) value);
      eventsOK = true;
    }

    /** get value from Store, may return null */
    protected Object getStoreValue(Object defValue) {
      if (storeData == null)
        return defValue;
      return ((PreferencesExt)storeData).getBean(name, defValue);
    }

   /** put new value into Store */
    protected void setStoreValue(Object newValue) {
      if (storeData != null) {
        ((PreferencesExt)storeData).putBean(name, newValue);
        combo.save(); // overkill
      }
    }

    /** get current value from editComponent, save to store.
     *  if different from old value, fire PropertyChangeEvent */
    protected void accept(){
      if (isDifferent( getEditValue())) {
        setEditValue( value); // reorder
        setStoreValue( value);
        sendEvent();
      }
    }

    /* set a new value into the Store
    // if different, fire PropertyChangeEvent
    private void setStoreValue(String newValue) {
      newValue = newValue.trim();
      if (newValue.equals(value)) return;
      String oldValue = value;
      value = newValue;
      if (storeData != null) {
        storeData.put(name, value);
        ((PreferencesExt)storeData).putBean( name+"_internal", getList());
      }
      if (listenerList != null)
        fireEvent(new PropertyChangeEvent(this, name, oldValue, value));
    } */

    /** Return the current value as a String */
    public String getText() {
      Object current = combo.getSelectedItem();
      return current.toString();
    }

    /** Set value of text; send event. */
    public void setText(String newValue) {
      newValue = newValue.trim();
      combo.addItem( newValue);
      sendEvent();
    }

    /** can user edit? */
    public boolean isEditable() { return combo.isEditable(); }
    public void setEditable( boolean isEditable) { combo.setEditable( isEditable); }

  }


  /**
   * An integer input field with an associated "units" label.
   *
  static public class IntUnits extends Int implements UnitsField {
    private String units;
    IntUnits(String name, String label, String units, int defValue, Preferences storeData) {
      super(name, label, defValue, storeData);
      this.units = units;
    }
    public String getUnits() { return units; }
  }


  /**
   * A boolean input box that is used to enable/disable another field.
   *
  static public class BooleanEnabler extends YesNo {
    private JRadioButton enabler;
    private Field enabledField;

    BooleanEnabler(String fldName, boolean initValue, Field enField, Preferences storeData) {
      super( fldName, "", initValue, storeData);
      this.enabledField = enField;

      enabler = new JRadioButton();
      enabler.setSelected( ((Boolean)valueObj).booleanValue());
      editComp = (JComponent) enabler;

      enabledField.setEnabled(initValue);
      enabler.addItemListener( new ItemListener() {
        public void itemStateChanged(ItemEvent e) {
          boolean isOn = (e.getStateChange() == ItemEvent.SELECTED);
          enabledField.setEnabled(isOn);
        }
      });
    }

    protected void setValue(Object newValue) {
      boolean bvalue = ((Boolean)newValue).booleanValue();
      enabler.setSelected(bvalue);
      enabledField.setEnabled(bvalue);
      _setValue( newValue);
    }

    public boolean isSelected() { return enabler.isSelected(); }
    public void setSelected(boolean v) { enabler.setSelected(v); }

    Field getEnabledField() { return enabledField; }
  } */


    static private void showFormatInfo( JFormattedTextField tf) {
      JFormattedTextField.AbstractFormatter ff = tf.getFormatter();
      System.out.println("AbstractFormatter  " +  ff.getClass().getName());
      if (ff instanceof NumberFormatter) {
        NumberFormatter nf = (NumberFormatter) ff;
        Format f = nf.getFormat();
        System.out.println(" Format  = " + f.getClass().getName());
        if (f instanceof NumberFormat) {
          NumberFormat nfat = (NumberFormat) f;
          System.out.println(" getMinimumIntegerDigits=" +
                             nfat.getMinimumIntegerDigits());
          System.out.println(" getMaximumIntegerDigits=" +
                             nfat.getMaximumIntegerDigits());
          System.out.println(" getMinimumFractionDigits=" +
                             nfat.getMinimumFractionDigits());
          System.out.println(" getMaximumFractionDigits=" +
                             nfat.getMaximumFractionDigits());
        }
        if (f instanceof DecimalFormat) {
          DecimalFormat df = (DecimalFormat) f;
          System.out.println(" Pattern  = " + df.toPattern());
        }
      }
    }
}

/* Change History:
   $Log: Field.java,v $
   Revision 1.5  2003/05/29 23:33:28  john
   latest release

   Revision 1.4  2003/01/14 19:32:10  john
   add Password.getPassword()

   Revision 1.3  2003/01/06 19:37:04  john
   new tests

   Revision 1.2  2002/12/24 22:04:49  john
   add bean, beanObject methods

   Revision 1.1.1.1  2002/12/20 16:40:26  john
   start new cvs root: prefs

   Revision 1.6  2002/03/09 01:51:54  caron
   add BeanTable, fix FieldResizable

   Revision 1.5  2002/03/01 23:01:38  caron
   resize Fields; replace LayoutManager for PrefPanel

   Revision 1.4  2002/02/15 21:57:53  caron
   minor fixes

   Revision 1.3  2001/11/14 19:48:07  caron
   TextFormatted bug

   Revision 1.2  2001/11/12 19:36:14  caron
   version 0.3

   Revision 1.1.1.1  2001/11/10 16:01:24  caron
   checkin prefs

*/

