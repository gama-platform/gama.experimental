// $Id: ColorScaleManager.java.save 50 2006-07-12 16:30:06Z caron $
/*
 * Copyright 1998-2009 University Corporation for Atmospheric Research/Unidata
 *
 * Portions of this software were developed by the Unidata Program at the
 * University Corporation for Atmospheric Research.
 *
 * Access and use of this software shall impose the following obligations
 * and understandings on the user. The user is granted the right, without
 * any fee or cost, to use, copy, modify, alter, enhance and distribute
 * this software, and any derivative works thereof, and its supporting
 * documentation for any purpose whatsoever, provided that this entire
 * notice appears in all copies of the software, derivative works and
 * supporting documentation.  Further, UCAR requests that the user credit
 * UCAR/Unidata in any publications that result from the use of this
 * software or in any product that includes this software. The names UCAR
 * and/or Unidata, however, may not be used in any advertising or publicity
 * to endorse or promote any products or commercial entity unless specific
 * written permission is obtained from UCAR/Unidata. The user also
 * understands that UCAR/Unidata is not obligated to provide the user with
 * any support, consulting, training or assistance of any kind with regard
 * to the use, operation and performance of this software nor to provide
 * the user with any updates, revisions, new versions or "bug fixes."
 *
 * THIS SOFTWARE IS PROVIDED BY UCAR/UNIDATA "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL UCAR/UNIDATA BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE ACCESS, USE OR PERFORMANCE OF THIS SOFTWARE.
 */
package thredds.viewer.ui.grid;

import ucar.unidata.ui.*;
import ucar.unidata.util.PersistentStore;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;

/**
 * ColorScale editing Manager.
 *
 * @author John Caron
 * @version $Id: ColorScaleManager.java.save 50 2006-07-12 16:30:06Z caron $
 */
public class ColorScaleManager implements PersistentDataManager, PersistentObject.ManagerBean {
  private static final Color SELECTED_COLOR = Color.magenta;
  private static final Color NORMAL_COLOR = Color.black;
  private static final boolean debug = false;

    // for viewing persistent objects
  private PersistentDataDialog viewDialog;
  private String objectName = "ColorScale";
  private PersistentList csList;
  private ColorScale csCurrent;
  private ColorScale.Panel csPanel;

    // for editing
  private ColorScale csEdit = null;
  private EditDialog editDialog;
  private int selected;

    // misc
  private RootPaneContainer parent;
  private ucar.unidata.util.ListenerManager lm;

  ////////////////// PersistenObjectManagerBean interface /////

  /** get the name of this manager to put in a menu */
  public String getManagerName() { return "Color Scale Manager"; }

  /** Get the Class type of the objects managed */
  public Class getPersistentObjectClass() { return ColorScale.class; }

    /** add action event listener */
  public void addPropertyChangeListener( PropertyChangeListener l) { lm.addListener(l); }

    /** remove action event listener */
  public void removePropertyChangeListener(PropertyChangeListener l) { lm.removeListener(l); }

    /** popup the Manager Dialog */
  public void show() {
    viewDialog.setEnabled(true);
    viewDialog.show();
  }

    /** call this when you want to store the persistent data */
  public void storePersistentData() { csList.storePersistentData(); }

    /** get the currently selected object */
  public PersistentObject getSelection() { return (PersistentObject) csList.getSelected(); }

    /** set the currently selected thing */
  public void setSelection(PersistentObject select) {
    if (select instanceof ColorScale)
      setColorScale( (ColorScale) select);
    else
      throw new IllegalArgumentException(select+"in ColorScaleManager setSelection");
  }

    /* Constructor.
     * @param parent   JFrame or JApplet
     * @param store     store persistent objects here
     */
  public ColorScaleManager( RootPaneContainer parent, PersistentStore store)  {
    this.parent = parent;

    // manage StationModelListeners
    lm = new ucar.unidata.util.ListenerManager(
        "java.beans.PropertyChangeListener",
        "java.beans.PropertyChangeEvent",
        "propertyChange");

    //// the "view" Dialog
    csList = new PersistentList("ColorScales", store, "Name");

    // add a default
    if (csList.getNumElements() == 0) {
      csCurrent = new ColorScale("default");
      csList.appendElement( csCurrent);
    } else
      csCurrent = (ColorScale) csList.getSelected();

      // need a parent for the color chooser
    Component cp = (parent != null && parent instanceof JFrame) ? (JFrame) parent : null;
    csPanel = new ColorScale.Panel( cp, csCurrent);
    //csPanel.setEditable(true);
    csPanel.setShowText(false);
    viewDialog = new PersistentDataDialog(parent, false, objectName, csPanel, csList, this);

    editDialog = new EditDialog(parent);

      /* PersistenceList events: a ColorScale was selected */
    csList.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        setColorScale((ColorScale) evt.getSource());
      }
    });
  }


    //////////////////// PersistentDataManager methods
    /** accept/use the current selection */
  public void accept() {
    lm.sendEvent(new PropertyChangeEvent(this, "ColorScale", null, csCurrent));
  }
    /** does the list contain an Object with this id ? */
  public boolean contains(String id) {
    return csList.contains(id);
  }
    /** delete the selected object */
  public void deleteSelected() {
    csList.deleteSelected();
  }
    /** go into edit mode.
     * @param isNew      true = start new one; false = edit current one
     */
  public void edit(boolean isNew) {
    ColorScale cs = (ColorScale) csList.getSelected();
    if (cs == null)
      return;

    if (isNew) {
      cs = (ColorScale) cs.clone();
      cs.setName("");
    }
    selected = 0;
    csPanel.setColorScale(cs);
    csPanel.setSelected(selected);
    csPanel.setEditMode(true, false);

    editDialog.setValues(cs.getName(), cs.getNumColors());
    editDialog.setColorScale(cs, isNew);
    editDialog.show();

    viewDialog.setEnabled(false);
  }

    /** get the current ColorScale */
  public ColorScale getColorScale() { return csCurrent; }

    /** make the given ColorScale the current one */
  public void setColorScale(ColorScale cs) {
    csCurrent = cs;
    csPanel.setColorScale( csCurrent);
  }

  private class EditDialog extends IndependentDialog {
      // main delegate
    private ColorScale cs;
      // ui
    private InputFieldPanel ifp;
    private InputFieldPanel.TextField nameFld;
    private InputFieldPanel.TextField ncolorsFld;
    private JCheckBox autoIncFld;
    private JColorChooser chooser;
    private JComboBox standardChooser;

    private boolean isNew = false;
    private int ncolors = 1;

    EditDialog(RootPaneContainer parent) {
      super(parent, false, "Edit Colorscale");

        // input fields
      ifp = new InputFieldPanel();
      nameFld = ifp.addTextField("ColorScale Name", "");
      ncolorsFld = ifp.addTextField("Number of colors", "");
      autoIncFld = new JCheckBox("auto-increment", false);

        // standard colorscales
      String [] standards = {"Set to Standard", "red-hot", "blue-red", "hue-bands", "spectrum"}; // why barf
      standardChooser = new JComboBox( standards);
      standardChooser.setToolTipText("Standard ColorScales");
      standardChooser.addActionListener( new AbstractAction () {
        public void actionPerformed(ActionEvent e) {
          Color [] carray = null;
          switch (standardChooser.getSelectedIndex()) {
             case 1: carray = ColorScale.redHot;
                break;
            case 2: carray = ColorScale.redBlue;
                break;
            case 3: carray = ColorScale.hueBands;
                break;
            case 4: carray = ColorScale.spectrum2;
                break;
            default:
          }
          if (carray != null) {
            csPanel.setColors(carray);
            ncolorsFld.setText(Integer.toString(carray.length));
          }
        }
      });

        // color chooser
      chooser = new JColorChooser();
      chooser.getSelectionModel().addChangeListener( new ChangeListener() {
        public void stateChanged(ChangeEvent e) {
          csPanel.setColor(chooser.getColor());
          if (autoIncFld.getModel().isSelected()) {
            selected = (selected+1) % ncolors;
            csPanel.setSelected(selected);
          }
          csPanel.repaint();
        }
      });

      // button panel
      JPanel buttPanel = new JPanel();
      JButton acceptButton = new JButton("Accept");
      JButton cancelButton = new JButton("Cancel");
      JButton helpButton = new JButton("Help");
      buttPanel.add(acceptButton, null);
      buttPanel.add(cancelButton, null);
      buttPanel.add(helpButton, null);

      // button listeners
      acceptButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
          String newName = nameFld.getText();
          System.out.println(newName+" "+ncolorsFld.getInt());
          if (newName.trim().length() == 0) { // no blanks
            JOptionPane.showMessageDialog(null, "Name may not be blank", "Error entering name",
                JOptionPane.INFORMATION_MESSAGE);
            return;
          }
          if (isNew && ColorScaleManager.this.contains(newName)) { // no duplicates
            JOptionPane.showMessageDialog(null, "Name already exists", "Error entering name",
                JOptionPane.INFORMATION_MESSAGE);
            return;
          }
          int numColors = ncolorsFld.getInt();
          if ((numColors < 1) || (numColors > 100)) {
            JOptionPane.showMessageDialog(null, "must be between 1 and 100", "Error entering Number of Colors",
                JOptionPane.INFORMATION_MESSAGE);
            return;
          }

          cs.setName( newName);
          cs.setNumColors( numColors);
          csPanel.setEditMode(false, true);
          if (isNew)
            csList.appendElement(cs);
          else
            csList.replace(cs);

          EditDialog.this.setVisible(false);
          viewDialog.setEnabled(true);
        }
      });
      cancelButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
          csPanel.setEditMode(false, false);
          viewDialog.setEnabled(true);
          EditDialog.this.setVisible(false);
        }
      });
      helpButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
          ucar.unidata.ui.Help.getDefaultHelp().gotoTarget("ColorScale");
        }
      });

        // pack it up
      JPanel topRight = new JPanel(new BorderLayout());
      topRight.add(autoIncFld, BorderLayout.NORTH);
      topRight.add(standardChooser, BorderLayout.SOUTH);
      JPanel topPanel = new JPanel();
      topPanel.add(ifp, BorderLayout.CENTER);
      topPanel.add(topRight, BorderLayout.EAST);

      Container cp = getContentPane();
      cp.add(topPanel, BorderLayout.NORTH);
      cp.add(chooser, BorderLayout.CENTER);
      cp.add(buttPanel, BorderLayout.SOUTH);
      pack();
      //infoWindow.setSize(700,700);
      //infoWindow.setLocation(100,100);
    }

    void setValues(String nameStr, int ncolors) {
      nameFld.setText( nameStr);
      ncolorsFld.setInt( ncolors);
    }

    void setColorScale(ColorScale cs, boolean isNew) {
      this.cs = cs;
      this.isNew = isNew;
      ncolors = cs.getNumColors();
    }
  }

}

/* Change History:
   $Log: ColorScaleManager.java.save,v $
   Revision 1.1  2004/09/30 00:33:42  caron
   *** empty log message ***

   Revision 1.1  2002/12/13 00:55:08  caron
   pass 2

   Revision 1.1.1.1  2002/02/26 17:24:52  caron
   import sources

   Revision 1.3  2000/08/18 04:16:25  russ
   Licensed under GNU LGPL.

   Revision 1.2  2000/05/26 21:19:40  caron
   new GDV release

   Revision 1.1  2000/04/26 21:14:12  caron
   latest version of GDV

   Revision 1.2  1999/12/22 21:17:58  caron
   javahelp support

   Revision 1.1.1.1  1999/12/16 22:36:49  caron
   checking gridviewer

   Revision 1.2  1999/06/03 01:44:34  caron
   remove the damn controlMs

   Revision 1.1.1.1  1999/06/02 20:36:04  caron
   another reorg

   Revision 1.2  1999/05/21 21:39:22  russ
   Package renaming from "ucar." to "ucar.unidata." and "ucar.units" to
   "ucar.unidata.values".

   Revision 1.1.1.1  1999/05/21 17:33:53  caron
   startAgain

# Revision 1.5  1999/03/26  19:57:57  caron
# add SpatialSet; update javadocs
#
# Revision 1.4  1999/03/18  18:21:12  caron
# bug fixes
#
# Revision 1.3  1999/03/16  16:59:30  caron
# fix StationModel editing; add TopLevel
#
# Revision 1.5  1999/02/15  23:06:08  caron
# upgrade to java2D, new ProjectionManager
#
# Revision 1.4  1998/12/14  17:11:45  russ
# Add comment for accumulating change histories.
#
*/

