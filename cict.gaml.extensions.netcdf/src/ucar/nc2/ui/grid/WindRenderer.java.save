// $Id: WindRenderer.java.save 50 2006-07-12 16:30:06Z caron $
/*
 * Copyright 1998-2009 University Corporation for Atmospheric Research/Unidata
 *
 * Portions of this software were developed by the Unidata Program at the
 * University Corporation for Atmospheric Research.
 *
 * Access and use of this software shall impose the following obligations
 * and understandings on the user. The user is granted the right, without
 * any fee or cost, to use, copy, modify, alter, enhance and distribute
 * this software, and any derivative works thereof, and its supporting
 * documentation for any purpose whatsoever, provided that this entire
 * notice appears in all copies of the software, derivative works and
 * supporting documentation.  Further, UCAR requests that the user credit
 * UCAR/Unidata in any publications that result from the use of this
 * software or in any product that includes this software. The names UCAR
 * and/or Unidata, however, may not be used in any advertising or publicity
 * to endorse or promote any products or commercial entity unless specific
 * written permission is obtained from UCAR/Unidata. The user also
 * understands that UCAR/Unidata is not obligated to provide the user with
 * any support, consulting, training or assistance of any kind with regard
 * to the use, operation and performance of this software nor to provide
 * the user with any updates, revisions, new versions or "bug fixes."
 *
 * THIS SOFTWARE IS PROVIDED BY UCAR/UNIDATA "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL UCAR/UNIDATA BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE ACCESS, USE OR PERFORMANCE OF THIS SOFTWARE.
 */
package thredds.viewer.ui.grid;

import ucar.ma2.*;
import ucar.unidata.geoloc.*;
import ucar.unidata.geoloc.projection.LatLonProjection;
import ucar.unidata.gis.*;
import ucar.unidata.grid.*;
import ucar.unidata.text.Format;
import ucar.unidata.util.Debug;
import ucar.unidata.util.PersistentStore;

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.io.*;
import java.util.*;
import javax.swing.*;

/**
 * Render wind vectors using Java2D API.
 *
 * @author John Caron
 * @version $Id: WindRenderer.java.save 50 2006-07-12 16:30:06Z caron $
 */

public class WindRenderer {
  /* private static double windLength = 10.0;
  public static void setWindLength(double wlen) { windLength = wlen; } */

    // main delegates
  private DatasetImpl dataset = null;
  private GeoGridImpl ugrid = null, vgrid = null;
  private ProjectionImpl drawProjection = null;    // current drawing Projection
  private ProjectionImpl dataProjection = null;    // current GeoGrid Projection

    // misc
  private LatLonProjection projectll;       // special handling for LatLonProjection
  private double centerLon;
  private boolean contourMode = false;

    // data stuff
  private Array udata, vdata;
  private Index uima, vima;
  private int lastLevel = -1, lastTime = -1;
  private double maxWindSpeed;

    // drawing optimization
  private boolean dataChanged = true;
  private boolean sameProjection = false;

  // working objects to minimize excessive gc
  private ProjectionPointImpl ptBeg = new ProjectionPointImpl();
  private ProjectionPointImpl ptEnd = new ProjectionPointImpl();
  private boolean debug = false;

    /** constructor */
  public WindRenderer () {
  }

  ///// properties

    /** set the Dataset to use */
  public void setDataset( DatasetImpl dataset) {
    this.dataset = dataset;
    dataChanged = true;

    // major kludge for now
    // this is coord system dependent !!!
    ugrid = dataset.getGridByStandardName( "Uwind");
    vgrid = dataset.getGridByStandardName( "Vwind");

    if (debug) System.out.println("WindRenderer setDataset "+ugrid+","+vgrid);
    if ((ugrid == null) || (vgrid == null))
      return;

    dataProjection = (ProjectionImpl) ugrid.getGeoCoordSys().getProjection();
  }


    /** set the Projection to use for drawing */
  public void setProjection(ProjectionImpl project) {
    if (debug) System.out.println("WindRenderer setProjection "+project);
    drawProjection = project;
  }

  //////// data
  private Array getHSlice( GeoGridImpl g, int level, int time) throws java.io.IOException {
    Array arr = g.getDataSlice( time, level, -1, -1);

    lastLevel = level;
    lastTime = time;
    return arr;
  }


  //////////// Renderer stuff
    /** returns null
  public ucar.unidata.geoloc.LatLonRect getPreferredArea() {
    return null;
  }

  public void setColor(java.awt.Color color) { this.color = color;}
  public java.awt.Color getColor() { return color; } */

  private java.awt.Color color = Color.black;
  public void draw(java.awt.Graphics2D g, int level, int time) {
    if ((ugrid == null) || (vgrid == null) || (drawProjection == null))
      return;

     // no anitaliasing
    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
    g.setColor(color);

      // do we need new data ?
    if ((level != lastLevel) || (time != lastTime)) {
      dataChanged = true;
    }
    if (dataChanged) {
      try {
        udata = getHSlice( ugrid, level, time);
        uima = udata.getIndex();
        vdata = getHSlice( vgrid, level, time);
        vima = vdata.getIndex();

        /* get maximum wind vector */
        double umax = getMaximum(ugrid, udata);
        double vmax = getMaximum(vgrid, vdata);
        maxWindSpeed = Math.sqrt( umax*umax + vmax*vmax);

      } catch (java.io.IOException e) {
        System.out.println("WindRenderer got IOException "+e+" trying to read "+dataset.getName());
        return;
      }
    }

      // setup loop through the data
    GeoCoordSysImpl geocs = ugrid.getGeoCoordSysImpl();
    CoordAxisImpl xaxis = (CoordAxisImpl) geocs.getXaxis();
    CoordAxisImpl yaxis = (CoordAxisImpl) geocs.getYaxis();
    int nx = xaxis.getNumElements();
    int ny = yaxis.getNumElements();
    double dx = xaxis.getCoordValue(1) - xaxis.getCoordValue(0);  // size of grid

    //// drawing optimizations
    sameProjection = drawProjection.equals( dataProjection);
    if (drawProjection.isLatLon()) {
      projectll = (LatLonProjection) drawProjection;
      centerLon = projectll.getCenterLon();
      if (Debug.isSet("projection.LatLonShift")) System.out.println("projection.LatLonShift: gridDraw = "+ centerLon);
    }

    for (int y=0; y<ny; y++) {
      double ypos = yaxis.getCoordValue(y);

      for (int x=0; x<nx; x++) {
        double xpos = xaxis.getCoordValue(x);
        LatLonPoint llp = dataProjection.projToLatLon( xpos, ypos);
        ptBeg.setLocation( drawProjection.latLonToProj( llp));

        double uval = udata.getDouble( uima.set(y, x));
        double vval = vdata.getDouble( vima.set(y, x));
        //double windLength = Math.sqrt( uval*uval + vval*vval);

        // maxWindSpeed vector = dx = size of grid
        double xend = xpos + 2 * dx * uval/maxWindSpeed;
        double yend = ypos + 2 * dx * vval/maxWindSpeed;

        llp = dataProjection.projToLatLon( xend, yend);
        ptEnd.setLocation( drawProjection.latLonToProj( llp));

        drawArrow( g, ptBeg.getX(), ptBeg.getY(), ptEnd.getX(), ptEnd.getY());
      }
    }

    // clean up
    dataChanged = false;
  }

  static private double[] headx = {-.866, 0., -.866};
  static private double[] heady = {-.5, 0., .5};
  private double[] resultx = new double[3];
  private double[] resulty = new double[3];

  private GeneralPath path = new GeneralPath();
  private void drawArrow( Graphics2D g, double xbeg, double ybeg, double xend, double yend) {
    path.reset();
    path.moveTo( (float) xbeg, (float) ybeg);
    path.lineTo( (float) xend, (float) yend);

      // speed
    double dx = xend-xbeg;
    double dy = yend-ybeg;
    double speed = Math.sqrt(dx*dx + dy*dy);
    double headLength = speed/3;

      // rotate head
    double theta = Math.atan2(dy, dx);
    double cost = Math.cos(theta);
    double sint = Math.sin(theta);
    for (int i=0; i<3; i++) {
       resultx[i] = headLength * (headx[i] * cost - heady[i] * sint);
       resulty[i] = headLength * (headx[i] * sint + heady[i] * cost);
    }

      // translate and add to path
    path.moveTo( (float) (xend + resultx[0]), (float) (yend+resulty[0]));
    path.lineTo( (float) (xend + resultx[1]), (float) (yend+resulty[1]));
    path.lineTo( (float) (xend + resultx[2]), (float) (yend+resulty[2]));

    g.draw(path);
  }

  private double getMaximum( GeoGridImpl grid, Array data) {
    MAMath.MinMax minmax = grid.getMinMaxSkipMissingData( data);
    return Math.max( Math.abs( minmax.min), Math.abs( minmax.max));
  }


}

/* Change History:
   $Log: WindRenderer.java.save,v $
   Revision 1.1  2004/09/30 00:33:43  caron
   *** empty log message ***

   Revision 1.1  2002/12/13 00:55:08  caron
   pass 2

   Revision 1.1.1.1  2002/02/26 17:24:52  caron
   import sources

   Revision 1.4  2001/05/10 18:54:03  caron
   add windrenderer

   Revision 1.3  2001/02/21 21:31:01  caron
   nissing data

   Revision 1.2  2000/08/18 04:16:26  russ
   Licensed under GNU LGPL.

   Revision 1.1  2000/04/26 21:22:00  caron
   add new file

*/
