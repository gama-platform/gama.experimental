<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DHI.Generic.MikeZero.DFS</name>
    </assembly>
    <members>
        <member name="T:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile">
            <summary>
            Interface for accessing data in a dfsu file.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsFileIO">
            <summary>
            <para>
            Interface containing the raw read and write functions 
            of the dynamic items in a dfs file. 
            </para><para>
            The functionality is based on a file pointer pointing into the 
            file on the disk. 
            </para><para>
            Whenever calling one of the read or write methods, the file pointer 
            will move to the next static item or dynamic item-timestep in the file. 
            </para><para>
            The methods reading the next static or dynamic item will depend on previous calls
            to any of the read and write methods.
            </para><para>
            The <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStepNext"/> is the most efficient way of iterating through
            the data in the file. If iterating in another way, for example over all the time steps 
            of one item, and then the next item, this will imply a performance hit, since the file 
            pointer needs to be repositioned at each read.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStepNext">
            <summary>
            <para>
            Reads the next dynamic item-timestep. First time called it returns the first
            timestep of the first item. It cycles through each timestep, and each 
            item in the timestep. For a file with 3 items, it returns (itemnumber, timestepIndex)
            in the following order:
            (1,0), (2,0), (3,0), (1,1), (2,1), (3,1), (1,2), etc. 
            </para><para>
            If one of the ReadItemTimeStep is called with for example (1,4) 
            the next call to this method will continue from there and return (2,4).
            </para><para>
            If one of the methods reading/writing static item data is called,
            the iterator is reset, and the next call to this method again
            returns the first item-timestep.
            </para><para>
            This is the most efficient way to iterate through all the items and timesteps in a file,
            since it iterates exactly as the data is stored on the disk.
            </para>
            </summary>
            <returns>The next dynamic item-timestep, null if no more items are present.</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(System.Int32,System.Int32)">
            <summary>
            Reads the dynamic item-timestep as specified from the file. It throws an
            exception if <paramref name="itemNumber"/> or <paramref name="timestepIndex"/>
            is out of range.
            </summary>
            <returns>The dynamic item-timestep as specified.</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData,System.Int32)">
            <summary>
            Read the specified item and time step. With this you can reuse 
            the data buffer in <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData"/>, <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Data"/>.
            The data is updated in place. 
            <para>
            If the data from one timestep is to be saved for later, the user is responsible to copy the 
            data before using this method again.
            </para>
            </summary>
            <returns>true on succes, false on end of file</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.WriteItemTimeStepNext(System.Double,System.Array)">
            <summary>
            <para>
            Writes the next dynamic item-timestep. 
            </para><para>
            If the file pointer points to the end of the file, this will append
            a new item-timestep to the file. If the file pointer points to an
            existing item-timestep, the data of that item-timestep is updated.
            </para><para>
            Remember that the file pointer position depends on the mode that the file
            was opened: In edit mode the file pointer points at the first item-timestep.
            In append mode the file pointer points initially at the end of file. 
            </para><para>
            It iterates over the item-timesteps as the <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStepNext"/>, 
            see there for more details.
            </para><para>
            This is the most efficient way to iterate through and update/append the items and 
            timesteps in a file, since it iterates exactly as the data is stored on the disk.
            </para><para>
            The size of the data must match the data size of the item that is to be written.
            </para>
            </summary>
            <param name="time">Time relative to start of file, in unit specified in time axis</param>
            <param name="data">Data to write to file</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.WriteItemTimeStep(System.Int32,System.Int32,System.Double,System.Array)">
            <summary>
            Writes data to the specified item and timestep in the file. 
            <para>
            If the item-timestep exists already, data is updated. If it does not
            exist, the item number and timestep index must match exactly the next
            item-timestep after the last one in the file.
            </para><para>
            The size of the data must match the data size of the item that is to be written.
            </para>
            </summary>
            <param name="itemNumber">Number of item to write. 1-based.</param>
            <param name="timestepIndex">Index of time step to write. 0-based.VÃ¦rso</param>
            <param name="time">Time relative to start of file, in unit specified in time axis</param>
            <param name="data">Data to write to file</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.FindItem(System.Int32,System.Int32)">
            <summary>
            Positions the file pointer at the location in the file where the 
            specified dynamic item at the specified time step starts.
            </summary>
            <param name="itemNumber">Number of item to find (1-based)</param>
            <param name="timestepIndex">Index of time step to find (0-based)</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.FindTimeStep(System.Int32)">
            <summary>
            Positions the file pointer at the location in the file where the 
            specified time step starts.
            </summary>
            <param name="timestepIndex">Index of time step to find (0-based)</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.Reset">
            <summary>
            Resets the file pointer to point on the first dynamic item time step in the file.
            <para>
            Can also be used if it is required to restart reading the static items.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.Flush">
            <summary>
            Flush cached data to the file. This will especially update the header information, 
            such that if another process is reading the file while it is being read, the new
            header information can be retrieved.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.Close">
            <summary>
            Close the file and release all ressources associated with it. The header information
            is still valid (for reading) even though the file has been closed.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.DfsuFileType">
            <summary>
            Type of dfsu file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.NumberOfLayers">
            <summary>
            For files with a vertical dimension, returns the maximum number of layers.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.NumberOfSigmaLayers">
            <summary>
            For files with a vertical dimension, returns the number of sigma layers.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.FileTitle">
            <summary>
            Title of file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.ApplicationTitle">
            <summary>
            Title of application creating the file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.ApplicationVersion">
            <summary>
            Version number of appliation creating the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.Projection">
            <summary>
            Geographical projection.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.StartDateTime">
            <summary>
            Start date time of the file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.TimeStepInSeconds">
            <summary>
            Time step in seconds.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.NumberOfTimeSteps">
            <summary>
            Number of time steps in the file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.DeleteValueFloat">
            <summary>
            Delete (undefined/missing) value
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.NumberOfNodes">
            <summary>
            Number of nodes in the mesh.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.NumberOfElements">
            <summary>
            Number of elements in the mesh.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.NodeIds">
            <summary>
            Id for each node. Usually starts from 1 and increases, but needs not to.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.X">
            <summary>
            X coordinates of nodes. Depending on the projection string, 
            node coordinates are in meters or degrees.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.Y">
            <summary>
            Y coordinates of nodes. Depending on the projection string, 
            node coordinates are in meters or degrees.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.Z">
            <summary>
            Z coordinates of nodes. Unit is specified in <see cref="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.ZUnit"/>.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.Code">
            <summary>
            Boundary code of node. 0 means not a boundary node.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.ZUnit">
            <summary>
            Unit of the z coordinate. The unit
            must be a length unit (convertable to meters).
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.ElementIds">
            <summary>
            Id for each element. Usually starts from 1 and increases, but needs not to.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.ElementType">
            <summary>
            Type of element.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.ElementTable">
            <summary>
            The <see cref="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.ElementTable"/> defines for each element which 
            nodes that defines the element. 
            <para>
            The numbers in the <see cref="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.ElementTable"/> are node numbers, not indices!
            Each value in the table are between 1 and number-of-nodes.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile.ItemInfo">
            <summary>
            List of dynamic item info.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsItemInfo">
            <summary>
            Common information for static and dynamic items.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo">
            <summary>
            Interface that contains item information for items
            where you are not allowed to access/modify the spatial axis 
            and associated static items.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.SetUnitConversion(DHI.Generic.MikeZero.DFS.UnitConversionType,DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Sets the unit conversion for a specific item. 
            </summary>
            <param name="conversionType">Type of conversion</param>
            <param name="conversionUnit">Returns the desired unit to convert to</param>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.ItemNumber">
            <summary>
            Item number, in list of items. 1 based.
            <para>
            For newly created/added items this can be zero
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.Name">
            <summary>
            Name of item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.Quantity">
            <summary>
            EUM quantity of item.
            </summary>
            <remarks>
            To update a quantity, you should not update the item an unit 
            of the quantity individually, but provide an entirely new quantity, i.e.
            <code>
            itemInfo.Quantity = new eumQuantity(eumItem.eumIAreaFraction, eumUnit.eumUPerCent);
            </code>
            </remarks>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.DataType">
            <summary>
            Type of data stored in item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.ElementCount">
            <summary>
            Number of data elements in the item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.ConversionType">
            <summary>
            Type of conversion for the data values
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.ConversionUnit">
            <summary>
            Desired unit to convert to
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsItemInfo.SetReferenceCoordinates(System.Single,System.Single,System.Single)">
            <summary>
            Update the reference coordinates of the spatial axis.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsItemInfo.SetOrientation(System.Single,System.Single,System.Single)">
            <summary>
            Update the orientation of the spatial axis.
            </summary>
            <param name="alpha"></param>
            <param name="phi"></param>
            <param name="theta"></param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsItemInfo.SetAxisUnitConversion(DHI.Generic.MikeZero.DFS.UnitConversionType,DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Sets the unit axis conversion for a specific item. 
            </summary>
            <param name="conversionType">Type of conversion</param>
            <param name="conversionUnit">Returns the desired unit to convert axis to</param>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.SpatialAxis">
            <summary>
            Spatial axis of item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.ReferenceCoordinateX">
            <summary>
            Reference coordinate X
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.ReferenceCoordinateY">
            <summary>
            Reference coordinate Y
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.ReferenceCoordinateZ">
            <summary>
            Reference coordinate Z
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.OrientationAlpha">
            <summary>
            Orientation alpha
            <para>
            A rotation in the x-y plane, measured counter-clockwise.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.OrientationPhi">
            <summary>
            Orientation Phi
            <para>
            A rotation in the x-z plane, measured counter-clockwise.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.OrientationTheta">
            <summary>
            Orientation Theta
            <para>
            A rotation in the y-z plane, measured counter-clockwise.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.AxisConversionType">
            <summary>
            Type of conversion for the axis
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.AxisConversionUnit">
            <summary>
            Desired unit to convert axis to
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.UsedElementCount">
            <summary>
            Number of used data elements in the axis. For
            compressed files, this can differ from <see cref="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.ElementCount"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsDataConverter">
            <summary>
            Interface for converting static and dynamic items and their data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsDataConverter.Initialize(DHI.Generic.MikeZero.DFS.IDfsFile)">
            <summary>
            Initialise this data converter for working on the given <paramref name="dfsFile"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsDataConverter.Convert(DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo)">
            <summary>
            Convert the dynamic item information, <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/>.
            <para>
            In case no conversion is required, just return the input
            <paramref name="itemInfo"/>
            </para>
            <para>
            In case conversion is required for item, return a new <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/>
            wrapping the input argument as requried. See <see cref="T:DHI.Generic.MikeZero.DFS.DfsDynamicItemDecoratorBase"/>
            for an example of how to make a new dynamic item by wrapping an existing.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsDataConverter.Convert(DHI.Generic.MikeZero.DFS.IDfsItemData)">
            <summary>
            Convert the dynamic item data, <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData"/>
            <para>
            In case no conversion is required, just return the input
            <paramref name="itemData"/>
            </para>
            <para>
            In case conversion is required, return a new <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData"/>
            wrapping the input argument as requried. 
            You can use <see cref="M:DHI.Generic.MikeZero.DFS.DfsItemData`1.Create``1(DHI.Generic.MikeZero.DFS.IDfsItemData,``0[])"/> to quickly make a 
            new <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData"/> based on the input argument.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsDataConverter.Revert(System.Int32,System.Array)">
            <summary>
            Revert the dynamic item data.
            <para>
            This must be the opposite of what <see cref="M:DHI.Generic.MikeZero.DFS.IDfsDataConverter.Convert(DHI.Generic.MikeZero.DFS.IDfsItemData)"/>
            does. In case the convert method does nothing, this should do nothing as well.
            </para>
            <para>
            In case no conversion is required, just return the input
            <paramref name="data"/>. Otherwise return a new reverted data array.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsDataConverter.Convert(DHI.Generic.MikeZero.DFS.IDfsStaticItem)">
            <summary>
            Convert a static item, including its data.
            <para>
            In case no conversion is required, just return the input
            <paramref name="staticItem"/>
            </para>
            <para>
            In case conversion is required, return a new <see cref="T:DHI.Generic.MikeZero.DFS.IDfsStaticItem"/>
            wrapping the input argument as required. See <see cref="T:DHI.Generic.MikeZero.DFS.DfsStaticItemDecoratorBase"/>
            for an example of how to make a new static item by wrapping an existing.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsDataConverter.Revert(DHI.Generic.MikeZero.DFS.IDfsStaticItem@,System.Array@)">
            <summary>
            Revert the static item data.
            <para>
            This must be the opposite of what <see cref="M:DHI.Generic.MikeZero.DFS.IDfsDataConverter.Convert(DHI.Generic.MikeZero.DFS.IDfsStaticItem)"/>
            does. In case the convert method does nothing, this should do nothing as well.
            </para>
            <para>
            In case no conversion is required, just leave the method body empty.
            </para>
            <para>
            In case conversion is required, return the original <see cref="T:DHI.Generic.MikeZero.DFS.IDfsStaticItem"/>
            and the reverted array data as the two arguments.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder">
            <summary>
            Builder for creating a dfsu file.
            <para>
            The following must be set before calling <see cref="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.CreateFile(System.String)"/>:
            <see cref="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetProjection(DHI.Generic.MikeZero.DFS.IDfsProjection)"/>,
            <see cref="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetTimeInfo(System.DateTime,System.Double)"/>,
            <see cref="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetNodes(System.Double[],System.Double[],System.Single[],System.Int32[])"/>,
            <see cref="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetElements(System.Int32[][])"/>.
            </para>
            <para>
            For files with a vertical dimension, the <see cref="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetNumberOfSigmaLayers(System.Int32)"/> must also be set.
            </para>
            <para>
            Other setters are optional, and if not set, default values are written to the file.
            </para>
            <para>
            Using the <see cref="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetFromMeshFile(DHI.Generic.MikeZero.DFS.mesh.MeshFile)"/> will set the projection, nodes
            and elements from the mesh file.
            </para>
            <para>
            Be aware; setting the node and element id's to anything but the default
            values can cause some tools to fail.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder">
            <summary>
            Builder for creating a dfsu file.
            <para>
            See <see cref="T:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder"/> for details
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder.SetProjection(DHI.Generic.MikeZero.DFS.IDfsProjection)">
            <summary>
            Set the geographical projection
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder.SetTimeInfo(System.DateTime,System.Double)">
            <summary>
            Set time info for the temporal axis.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder.SetNodes(System.Double[],System.Double[],System.Single[],System.Int32[])">
            <summary>
            Set node coordinates and code. Depending on the projection string, 
            node coordinates are in meters or degrees.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder.SetZUnit(DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Set unit of the z coordinate. By default the unit is meters, but
            the unit can be overridden by setting it explicitly here. The unit
            must be a length unit (convertable to meters).
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder.SetNodeIds(System.Int32[])">
            <summary>
            Set the node id's. Optional. If not set, default values are used (1,2,3,...)
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder.SetElements(System.Int32[][])">
            <summary>
            Set element connectivity: For each element is specified which nodes
            the element consist of. The node is specified by its index into the list of nodes.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder.SetElementIds(System.Int32[])">
            <summary>
            Set the element id's. Optional. If not set, default values are used (1,2,3,...)
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder.SetFromMeshFile(DHI.Generic.MikeZero.DFS.mesh.MeshFile)">
            <summary>
            Set projection, nodes and elements from mesh file.
            <para>
            This is equivalent to calling
            <see cref="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetProjection(DHI.Generic.MikeZero.DFS.IDfsProjection)"/>,
            <see cref="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetNodes(System.Double[],System.Double[],System.Single[],System.Int32[])"/>,
            <see cref="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetElements(System.Int32[][])"/>.
            </para>
            </summary>
            <param name="meshFile"></param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder.AddDynamicItem(System.String,DHI.Generic.MikeZero.eumQuantity)">
            <summary>
            Add a dynamic item.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder.Validate">
            <summary>
            Validate will return a string of issues from the item builder.
            When this returns an empty list, the item has been properly build.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder.CreateFile(System.String)">
            <summary>
            Create and return a dfsu file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder.FileTitle">
            <summary>
            Get/Set the title of the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder.ApplicationTitle">
            <summary>
            Get/Set the title of the application writing the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.IDfsuBuilder.ApplicationVersion">
            <summary>
            Set the version number of the application writing the file.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetProjection(DHI.Generic.MikeZero.DFS.IDfsProjection)">
            <summary>
            Set the geographical projection
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetNumberOfSigmaLayers(System.Int32)">
            <summary>
            Set the number of sigma layers in a file with a vertical dimension
            </summary>
            <remarks>
            If called with a <see cref="T:DHI.Generic.MikeZero.DFS.dfsu.DfsuFileType"/> that does not have any
            vertical dimension, an <see cref="T:System.InvalidOperationException"/> is thrown.
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetTimeInfo(System.DateTime,System.Double)">
            <summary>
            Set time info for the temporal axis.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetNodes(System.Double[],System.Double[],System.Single[],System.Int32[])">
            <summary>
            Set node coordinates and code. Depending on the projection string, 
            node coordinates are in meters or degrees.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetNodes(System.Single[],System.Single[],System.Single[],System.Int32[])">
            <summary>
            Set node coordinates and code. Depending on the projection string, 
            node coordinates are in meters or degrees.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetZUnit(DHI.Generic.MikeZero.eumUnit)">
            <inheritdoc/>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetNodeIds(System.Int32[])">
            <summary>
            Set the node id's. Optional. If not set, default values are used (1,2,3,...)
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetElements(System.Int32[][])">
            <summary>
            Set element connectivity: For each element is specified which nodes
            the element consist of. The node is specified by its index into the list of nodes.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetElementIds(System.Int32[])">
            <summary>
            Set the element id's. Optional. If not set, default values are used (1,2,3,...)
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetFromMeshFile(DHI.Generic.MikeZero.DFS.mesh.MeshFile)">
            <summary>
            Set projection, nodes and elements from mesh file.
            <para>
            This is equivalent to calling
            <see cref="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetProjection(DHI.Generic.MikeZero.DFS.IDfsProjection)"/>,
            <see cref="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetNodes(System.Double[],System.Double[],System.Single[],System.Int32[])"/>,
            <see cref="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.SetElements(System.Int32[][])"/>.
            </para>
            </summary>
            <param name="meshFile"></param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.AddDynamicItem(System.String,DHI.Generic.MikeZero.eumQuantity)">
            <summary>
            Add a dynamic item.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.Validate">
            <summary>
            Validate will return a string of issues from the item builder.
            When this returns an empty list, the item has been properly build.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.CreateFile(System.String)">
            <summary>
            Create and return a dfsu file
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.Create(DHI.Generic.MikeZero.DFS.dfsu.DfsuFileType)">
            <summary>
            Create a new dfsu builder
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.FileTitle">
            <summary>
            Get/Set the title of the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.ApplicationTitle">
            <summary>
            Get/Set the title of the application writing the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder.ApplicationVersion">
            <summary>
            Set the version number of the application writing the file.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsFileMode">
            <summary>
            Mode that file was opened in.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsFileMode.Read">
            <summary>
            File is open and in read mode.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsFileMode.Edit">
            <summary>
            File is open and in edit mode. File can be edited. File pointer points initially to beginning of file data.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsFileMode.Append">
            <summary>
            File is open and in append mode. File can be edited. File pointer points initially to end of file data.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsFileMode.Closed">
            <summary>
            File is closed.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.FileType">
            <summary>
            File type enum.
            <para>
            Currently only the <see cref="F:DHI.Generic.MikeZero.DFS.FileType.EqtimeFixedspaceAllitems"/>
            and the <see cref="F:DHI.Generic.MikeZero.DFS.FileType.NeqtimeFixedspaceAllitems"/> is supported.
            </para>
            </summary>
            <remarks>
            from dfsio.h
            </remarks>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.FileType.Undefined">
            <summary>
            undefined - error.
            <para>
            dfs enum: F_UNDEFINED_FILE_TYPE
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.FileType.EqtimeFixedspaceAllitems">
            <summary>
            Equidistant time, spatial axis fixed in time, all items in every time step.
            <para>
            dfs enum: F_EQTIME_FIXEDSPACE_ALLITEMS
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.FileType.EqtimeTvarspaceAllitems">
            <summary>
            Equidistant time, spatial axis varies in time, all items in every time step.
            <para>
            dfs enum: F_EQTIME_TVARSPACE_ALLITEMS
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.FileType.NeqtimeFixedspaceAllitems">
            <summary>
            Non-equidistant time, spatial axis fixed in time, all items in every time step.
            <para>
            dfs enum: F_NEQTIME_FIXEDSPACE_ALLITEMS
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.FileType.NeqtimeFixedspaceVaritems">
            <summary>
            Non-equidistant time, spatial axis fixed in time, variable number of items in every time step.
            <para>
            dfs enum: F_NEQTIME_FIXEDSPACE_VARITEMS
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.FileType.NeqtimeTvarspaceVaritems">
            <summary>
            Non-equidistant time, spatial axis varies in time, variable number of items in every time step.
            <para>
            dfs enum: F_NEQTIME_TVARSPACE_VARITEMS
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.TimeAxisType">
            <summary>
            Type of the time axis
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.TimeAxisType.Undefined">
            <summary>
            Undefined axis - error.
            <para>
            dfs enum: F_UNDEFINED_TAXIS = 0
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.TimeAxisType.TimeEquidistant">
            <summary>
            Equidistant time axis.
            <para>
            dfs enum: F_TM_EQ_AXIS (= 1)
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.TimeAxisType.TimeNonEquidistant">
            <summary>
            Non-equidistant time axis.
            <para>
            dfs enum: F_TM_NEQ_AXIS (= 2)
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.TimeAxisType.CalendarEquidistant">
            <summary>
            Equidistant calendar axis.
            <para>
            dfs enum: F_CAL_EQ_AXIS (= 3)
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.TimeAxisType.CalendarNonEquidistant">
            <summary>
            Non-equidistant calendar axis.
            <para>
            dfs enum: F_CAL_NEQ_AXIS (= 4)
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.StatType">
            <summary>
            Type of statistics stored in file.
            </summary>
            <remarks>
            from dfsio.h. 
            </remarks>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.StatType.Undefined">
            <summary>
            Undefined - error.
            <para>
            dfs enum: F_UNDEFINED_STAT_TYPE
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.StatType.NoStat">
            <summary>
            no stats. Only statistics available is the global number of delete 
            values, min and max for all data cellss of the item.
            <para>
            dfs enum: F_NO_STAT
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.StatType.RegularStat">
            <summary>
            Regular statistics.
            <para>
            For each data value is stored the minimum, maximum, mean, standard 
            deviation, auto correlation coefficient and the number of values, 
            delete values and pairs.
            </para>
            <para>
            dfs enum: F_REGULAR_STAT
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.StatType.LargevalStat">
            <summary>
            Regular statistics, same as <see cref="F:DHI.Generic.MikeZero.DFS.StatType.RegularStat"/>
            <para>
            dfs enum: F_LARGEVAL_STAT
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DataValueType">
            <summary>
            Data value type defines how one value is interpreted in time. 
            Numerically same as in TSObject ItemValueType
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DataValueType.Instantaneous">
            <summary>
            Value at current point in time, current time step.
            <para>
            dfs enum: F_INSTANTANEOUS (=0)
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DataValueType.Accumulated">
            <summary>
            Value accumulated from start of time series to current time step. 
            <para>
            dfs enum: F_ACCUMULATED (=1)
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DataValueType.StepAccumulated">
            <summary>
            Value accumulated since last time step to current time step. 
            <para>
            dfs enum: F_STEP_ACCUMULATED (=2)
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DataValueType.MeanStepBackward">
            <summary>
            Mean value from previous to current time step. Also called: mean step accumulated.  
            <para>
            dfs enum: F_MEAN_STEP_ACCUMULATED (=3)
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DataValueType.MeanStepForward">
            <summary>
            Mean value from current to next time step. Also called: reverse mean step accumulated 
            <para>
            dfs enum: F_REV_MEAN_STEP_ACCUMULATED (=4)
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.SpaceAxisType">
            <summary>
            Type of spatial axis.
            
            Eq: Equidistant.
            Neq: Non-equidistant.
            Tvar: Time varying axis.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.Undefined">
            <summary>
            dfs enum: F_UNDEFINED_SAXIS = 0
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.EqD0">
            <summary>
            dfs enum: F_EQ_AXIS_D0 (= 1)
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.EqD1">
            <summary>
            dfs enum: F_EQ_AXIS_D1 (= 2)
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.NeqD1">
            <summary>
            dfs enum: F_NEQ_AXIS_D1 (= 3)
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.TvarD1">
            <summary>
            dfs enum: F_TVAR_AXIS_D1 (= 4)
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.EqD2">
            <summary>
            dfs enum: F_EQ_AXIS_D2  (= 5)
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.NeqD2">
            <summary>
            dfs enum: F_NEQ_AXIS_D2 (= 6)
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.TvarD2">
            <summary>
            dfs enum: F_TVAR_AXIS_D2 (= 7)
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.EqD3">
            <summary>
            dfs enum: F_EQ_AXIS_D3 (= 8)
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.NeqD3">
            <summary>
            dfs enum: F_NEQ_AXIS_D3 (= 9)
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.TvarD3">
            <summary>
            dfs enum: F_TVAR_AXIS_D3 (= 10)
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.EqD4">
            <summary>
            NOT CURRENTLY SUPPORTED - Equidistant 4D axis
            dfs enum: F_EQ_AXIS_D4 (= 11)
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.CurveLinearD2">
            <summary>
            dfs enum: F_CURVE_LINEAR_AXIS_D2 (= 12)
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.CurveLinearD3">
            <summary>
            dfs enum: F_CURVE_LINEAR_AXIS_D3 (= 13)
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsSimpleType">
            <summary>
            Enum for data types.  
            
            Compatible with TSobject, TimeSeries.idl (see comments on enum members)
            </summary>
            <remarks>
            From ufs.h.
            
            This does not include the file control tags in the ufs dll, as it
            is assumed that these are not returned by the ufs API. The total list 
            is:
             UFS_BAD        = -4,  // file control tag: bad
             UFS_MIN_VALUE  = -3,  // file control tag: For internal use only
             UFS_BLOCK      = -2,  // file control tag: For internal use only
             UFS_TERMINATOR = -1,  // file control tag: For internal use only
             UFS_EOF        =  0,  // file control tag: end-of-file
             UFS_FLOAT      =  1,  // data type: float, in TSObject: Type_Float
             UFS_DOUBLE     =  2,  // data type: double, in TSObject: Type_Double
             UFS_CHAR       =  3,  // data type: byte, c++ type char, in TSObject: Type_Char
             UFS_INT        =  4,  // data type: int, in TSObject: Type_Int
             UFS_UNSIGNED   =  5,  // data type: uint, in TSObject: Type_Unsigned
             UFS_SHORT      =  6,  // data type: short, in TSObject: Type_Short
             UFS_USHORT     =  7,  // data type: ushort, in TSObject: Type_Unsigned_Short
             UFS_MAX_VALUE  =  8,  // file control tag: For internal use only
            </remarks>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsSimpleType.Float">
            <summary>
            data type: float, in TSObject: Type_Float
            <para>
            dfs enum: UFS_FLOAT = 1
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsSimpleType.Double">
            <summary>
            data type: double, in TSObject: Type_Double
            <para>
            dfs enum: UFS_DOUBLE = 2
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsSimpleType.Byte">
            <summary>
            data type: byte, in TSObject: Type_Char
            <para>
            Be aware of the difference to the ufs: In UFS this is type char, but
            since C# uses 16 bit chars and C++ uses 8 bit chars, we have to use byte (8 bit) in C#
            </para>
            <para>
            dfs enum: UFS_CHAR = 3
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsSimpleType.Int">
            <summary>
            data type: int, in TSObject: Type_Int
            <para>
            dfs enum: UFS_INT = 4
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsSimpleType.UInt">
            <summary>
            data type: uint, in TSObject: Type_Unsigned
            <para>
            dfs enum: UFS_UNSIGNED = 5
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsSimpleType.Short">
            <summary>
            data type: short, in TSObject: Type_Short
            <para>
            dfs enum: UFS_SHORT = 6
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsSimpleType.UShort">
            <summary>
            data type: ushort, in TSObject: Type_Unsigned_Short
            <para>
            dfs enum: UFS_USHORT = 7
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.ProjectionType">
            <summary>
            Projection type. All newer files has a projection defined, 
            though there exists older files which does not have a projection
            defined.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ProjectionType.Undefined">
            <summary>
            No projection defined.
            <para>
            (dfs enum: F_UNDEFINED_PROJECTION (=0))
            </para>
            </summary>
            <remarks>
            The <see cref="F:DHI.Generic.MikeZero.DFS.ProjectionType.Undefined"/> projection type can be returned by older dfs files.
            In older versions of DFS geographical information could not be stored in the file,
            and these will return the <see cref="F:DHI.Generic.MikeZero.DFS.ProjectionType.Undefined"/> <see cref="T:DHI.Generic.MikeZero.DFS.ProjectionType"/>.
            <para>
            In current versions of DFS projection information is always stored. If the file
            is not geo-referenced and not related to any projection, an <see cref="P:DHI.Generic.MikeZero.DFS.IDfsProjection.WKTString"/>
            of "NON-UTM" can be specified, though it is not recommended.
            </para>
            </remarks>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ProjectionType.Projection">
            <summary>
            File has projection information (UTM or similar).
            <para>
            (dfs enum: F_UTM_PROJECTION (=1))
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.UnitConversionType">
            <summary>
            Type of unit conversion, when reading item
            data and axis.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.UnitConversionType.NoConversion">
            <summary>
            Do not convert
            <para>
            (dfs enum: F_NO_CONVERSION = 0)
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.UnitConversionType.UbgConversion">
            <summary>
            Convert to/from UBG (Unit Base Group)
            <para>
            (dfs enum: F_UBG_CONVERSION = 1)
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.UnitConversionType.FreeConversion">
            <summary>
            Convert to/from user defined unit, which must 
            also be provided with this type.
            <para>
            (dfs enum: F_FREE_CONVERSION = 2)
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.UnitConversionType.FirstRegisteredUnitConversion">
            <summary>
            Converts to/from the first registered unit for the given item type.
            <para>
            This parameter is mostly used by engines/tools that is based on the
            first registered unit. The engine/tool can then provide data in the
            usual (first registered) unit, and still provide a file in another 
            unit.
            </para>
            <para>
            The first registered unit need not be base unit (SI), in case the base unit
            is not specified as an allowed unit for an item.
            </para>
            <para>
            (dfs enum: F_1ST_REGISTERED_UNIT_CONVERSION = 3)
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Coords">
            <summary>
            Coordinates triplet (x, y, z)
            </summary>
            <remarks>
            Packed for unmanaged marshalling of structs, compatible with the Coords in
            the ufs.dll
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsCoordinate">
            <summary>
            Interface for a coordinate in x-y-z space
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsCoordinate.X">
            <summary>
            X-coordinate
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsCoordinate.Y">
            <summary>
            Y-coordinate
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsCoordinate.Z">
            <summary>
            Z-coordinate
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.Coords.X">
            <summary>
            x coordinate
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.Coords.Y">
            <summary>
            y coordinate
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.Coords.Z">
            <summary>
            z coordinate
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Coords.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor for Coords structure. 
            </summary>
            <param name="x">X-coordinate</param>
            <param name="y">Y-coordinate</param>
            <param name="z">Z-coordinate</param>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs0.Dfs0Util">
            <summary>
            Utility and extension methods for reading data from dfs0 files
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs0.Dfs0Util.ReadDfs0DataDouble(DHI.Generic.MikeZero.DFS.IDfsFile)">
            <summary>
            Bulk read the times and data for a dfs0 file, putting it all in
            a matrix structure.
            <para>
            First column in the result are the times, then a column for each 
            item in the file. There are as many rows as there are timesteps.
            All item data are converted to doubles.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Converters.DfsConvertDeleteValues">
            <summary>
            Converter class for converting delete values to a user defined value.
            Only works for float and double items. Reversion is not implemented.
            <para>
            It converts as well static as dynamic items and data.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertDeleteValues.Initialize(DHI.Generic.MikeZero.DFS.IDfsFile)">
            <summary>
            Initialise this data converter for working on the given <paramref name="dfsFile"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertDeleteValues.Convert(DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo)">
            <summary>
            Convert the dynamic item information, <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertDeleteValues.Convert(DHI.Generic.MikeZero.DFS.IDfsItemData)">
            <summary>
            Convert the dynamic item data, <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertDeleteValues.Revert(System.Int32,System.Array)">
            <summary>
            Revert the dynamic item data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertDeleteValues.Convert(DHI.Generic.MikeZero.DFS.IDfsStaticItem)">
            <summary>
            Convert a static item, including its data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertDeleteValues.Revert(DHI.Generic.MikeZero.DFS.IDfsStaticItem@,System.Array@)">
            <summary>
            Revert the static item data.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsBuilder">
            <summary>
            Builder for dfs files. 
            <para>
            The builder works in two stages. The first stage all header information
            and information of the dynamic items are provided. In the second stage
            static items are added. Then a dfs file is ready, and data for the dynamic
            items can be added.
            </para>
            <para>
            To go from the first to the second stage by calling
            <see cref="M:DHI.Generic.MikeZero.DFS.DfsBuilder.CreateFile(System.String)"/>, which will actually create a file on the disc.
            </para>
            <para>
            To get the final file, call <see cref="M:DHI.Generic.MikeZero.DFS.DfsBuilder.GetFile"/>. After <see cref="M:DHI.Generic.MikeZero.DFS.DfsBuilder.GetFile"/>
            has been called, no more static items can be added to the file.
            </para>
            <para>
            Stage 1: The following must be set during stage 1:
            <see cref="M:DHI.Generic.MikeZero.DFS.DfsBuilder.SetGeographicalProjection(DHI.Generic.MikeZero.DFS.IDfsProjection)"/>,
            <see cref="M:DHI.Generic.MikeZero.DFS.DfsBuilder.SetDataType(System.Int32)"/>,
            <see cref="M:DHI.Generic.MikeZero.DFS.DfsBuilder.SetTemporalAxis(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)"/>.
            Furthermore, a number of dynamic items must be added.
            </para>
            <para>
            Stage 2: Any number of static items can be added. Create the item
            by using one of the <see cref="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddStaticItem(System.String,System.Array)"/> functions.
            To create a new static item from scratch, use  
            <see cref="M:DHI.Generic.MikeZero.DFS.DfsBuilder.CreateStaticItemBuilder"/> together with  
            <see cref="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddStaticItem(DHI.Generic.MikeZero.DFS.IDfsStaticItem)"/>.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsFileBuilder">
            <summary>
            Builder for dfs files. 
            <para>
            See <see cref="T:DHI.Generic.MikeZero.DFS.DfsBuilder"/> for details
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.SetFileTitle(System.String)">
            <summary>
            Set the title of the file.
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.SetApplicationTitle(System.String)">
            <summary>
            Set the title of the application writing the file.
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.SetApplicationVersionNo(System.Int32)">
            <summary>
            Set the version number of the application writing the file.
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.SetItemStatisticsType(DHI.Generic.MikeZero.DFS.StatType)">
            <summary>
            Sets the statistics level <see cref="T:DHI.Generic.MikeZero.DFS.StatType"/> of all items
            in the file
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.SetDataType(System.Int32)">
            <summary>
            Set the data type. 
            <para>
            This is a stage 1 method.
            </para>
            <para>
            The data type tags the file as a special dfs file type.
            There exists no global system for maintaining these tag-variables. 
            The tag-variables should only be interpreted locally within one 
            model-complex e.g. MIKE 21. The application programmer can tag 
            bathymetries, result files, input files freely. 
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.SetGeographicalProjection(DHI.Generic.MikeZero.DFS.IDfsProjection)">
            <summary>
            Sets the geographical projection and reference coordinates.
            <para>
            This must be set. This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.SetTemporalAxis(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)">
            <summary>
            Sets the temporal axis of the file.
            <para>
            This must be set. This is a stage 1 method.
            </para>
            </summary>
            <param name="temporalAxis"></param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.CreateDynamicItemBuilder">
            <summary>
            Create a dynamic item builder, for creating and configuring a new dynamic item.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.AddDynamicItem(DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo)">
            <summary>
            Add a dynamic item to the file.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.AddCustomBlock(DHI.Generic.MikeZero.DFS.IDfsCustomBlock)">
            <summary>
            Adds a custom block. 
            </summary>
            <remarks>
            You can create a new custom block by using the CreateCustomBlock
            methods from <see cref="T:DHI.Generic.MikeZero.DFS.DfsFactory"/>.
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.AddCustomBlock(System.String,System.Array)">
            <summary>
            Adds a custom block containing the array data.
            <para>
            The type of <paramref name="arrayData"/> must be an array of type 
            equivalent to one of the supported <see cref="T:DHI.Generic.MikeZero.DFS.DfsSimpleType"/>, e.g. int[].
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.AddCustomBlock(System.String,System.Single[])">
            <summary>
            Add a custom block containing float data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.AddCustomBlock(System.String,System.Double[])">
            <summary>
            Add a custom block containing double data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.AddCustomBlock(System.String,System.Byte[])">
            <summary>
            Add a custom block containing byte data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.AddCustomBlock(System.String,System.Int32[])">
            <summary>
            Add a custom block containing int data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.AddCustomBlock(System.String,System.UInt32[])">
            <summary>
            Add a custom block containing uint data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.AddCustomBlock(System.String,System.Int16[])">
            <summary>
            Add a custom block containing short data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.AddCustomBlock(System.String,System.UInt16[])">
            <summary>
            Add a custom block containing ushort data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.SetEncodingKey(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Sets the encoding key for compressing the dfs file.
            See  <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileInfo.GetEncodeKey(System.Int32[]@,System.Int32[]@,System.Int32[]@)"/> for the definition
            of the encode key values.
            <para>
            Compression is only supported when all dynamic items are of type float. 
            </para>
            <para>
            All dynamic items must have a size that is compatible with the encode key values, i.e.,
            <code>
            xKey[i] &lt; xCount &amp;&amp; yKey[y] &lt; yCount &amp;&amp; zKey[i] &lt; zCount
            </code>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.Validate">
            <summary>
            Validate will return a string of issues from the item builder.
            When this returns an empty list, the item has been properly build.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.CreateFile(System.String)">
            <summary>
            Create the file and move from stage 1 to stage 2 of the build process.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.AddStaticItem(DHI.Generic.MikeZero.DFS.IDfsStaticItem)">
            <summary>
            Add static item to the file.
            <para>
            The static item can come from another file, then the item 
            definition and data is copied over.
            </para>
            </summary>
            <returns>
            A reference to the static item written to the file. 
            This can be used at a later point if the static data needs to
            be updated, using the <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.WriteStaticItemData(DHI.Generic.MikeZero.DFS.IDfsStaticItem,System.Array)"/>
            </returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.CreateStaticItemBuilder">
            <summary>
            Create a static item builder, for creating and configuring a new static item.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.AddStaticItem(System.String,System.Array)">
            <summary>
            Creates and adds a static item storing the <paramref name="arrayData"/>.
            Use this only when <see cref="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.Quantity"/>
            and <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.SpatialAxis"/> and others are
            not important. Quantity and spatial axis are set to default 
            dummy values.
            <para>
            The type of <paramref name="arrayData"/> must be an array of type equivalent to one of the supported
            <see cref="T:DHI.Generic.MikeZero.DFS.DfsSimpleType"/>, e.g. int[].
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.AddStaticItem(System.String,DHI.Generic.MikeZero.eumQuantity,System.Array)">
            <summary>
            Creates and adds a static item storing the <paramref name="arrayData"/>.
            Use this only when <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.SpatialAxis"/> is
            not important. Spatial axis are set to default dummy values.
            <para>
            The type of <paramref name="arrayData"/> must be an array of type equivalent to one of the supported
            <see cref="T:DHI.Generic.MikeZero.DFS.DfsSimpleType"/>, e.g. int[].
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.GetFile">
            <summary>
            Returns the new dfs file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.DeleteValueFloat">
            <summary>
            Gets/sets the delete value of type float
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.DeleteValueDouble">
            <summary>
            Gets/sets the delete value of type double
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.DeleteValueByte">
            <summary>
            Gets/sets the delete value of type byte
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.DeleteValueInt">
            <summary>
            Gets/sets the delete value of type int
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileBuilder.DeleteValueUnsignedInt">
            <summary>
            Gets/sets the delete value of type unsigned int
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.CheckBuildStage1">
            <summary>
            Check whether the builder is in stage 1, and throws an exception if not.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.CheckBuildStage2">
            <summary>
            Check whether the builder is in stage 2, and throws an exception if not.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.SetFileTitle(System.String)">
            <summary>
            Set the title of the file.
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.SetApplicationTitle(System.String)">
            <summary>
            Set the title of the application writing the file.
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.SetApplicationVersionNo(System.Int32)">
            <summary>
            Set the version number of the application writing the file.
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.SetItemStatisticsType(DHI.Generic.MikeZero.DFS.StatType)">
            <summary>
            Sets the statistics level <see cref="T:DHI.Generic.MikeZero.DFS.StatType"/> of all items
            in the file
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.SetDataType(System.Int32)">
            <summary>
            Set the data type. 
            <para>
            This is a stage 1 method.
            </para>
            <para>
            The data type tags the file as a special dfs file type.
            There exists no global system for maintaining these tag-variables. 
            The tag-variables should only be interpreted locally within one 
            model-complex e.g. MIKE 21. The application programmer can tag 
            bathymetries, result files, input files freely. 
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.SetGeographicalProjection(DHI.Generic.MikeZero.DFS.IDfsProjection)">
            <summary>
            Sets the geographical projection and reference coordinates.
            <para>
            This must be set. This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.SetTemporalAxis(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)">
            <summary>
            Sets the temporal axis of the file.
            <para>
            This must be set. This is a stage 1 method.
            </para>
            </summary>
            <param name="temporalAxis"></param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.CreateDynamicItemBuilder">
            <summary>
            Create a dynamic item builder, for creating and configuring a new dynamic item.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddDynamicItem(DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo)">
            <summary>
            Add a dynamic item to the file.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddCustomBlock(DHI.Generic.MikeZero.DFS.IDfsCustomBlock)">
            <summary>
            Adds a custom block. 
            </summary>
            <remarks>
            You can create a new custom block by using the CreateCustomBlock
            methods from <see cref="T:DHI.Generic.MikeZero.DFS.DfsFactory"/>.
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddCustomBlock(System.String,System.Array)">
            <summary>
            Adds a custom block containing the array data.
            <para>
            The type of <paramref name="arrayData"/> must be an array of type 
            equivalent to one of the supported <see cref="T:DHI.Generic.MikeZero.DFS.DfsSimpleType"/>, e.g. int[].
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddCustomBlock(System.String,System.Single[])">
            <summary>
            Add a custom block containing float data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddCustomBlock(System.String,System.Double[])">
            <summary>
            Add a custom block containing double data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddCustomBlock(System.String,System.Byte[])">
            <summary>
            Add a custom block containing byte data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddCustomBlock(System.String,System.Int32[])">
            <summary>
            Add a custom block containing int data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddCustomBlock(System.String,System.UInt32[])">
            <summary>
            Add a custom block containing uint data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddCustomBlock(System.String,System.Int16[])">
            <summary>
            Add a custom block containing short data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddCustomBlock(System.String,System.UInt16[])">
            <summary>
            Add a custom block containing ushort data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.SetEncodingKey(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Sets the encoding key for compressing the dfs file.
            See  <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileInfo.GetEncodeKey(System.Int32[]@,System.Int32[]@,System.Int32[]@)"/> for the definition
            of the encode key values.
            <para>
            Compression is only supported when all dynamic items are of type float. 
            </para>
            <para>
            All dynamic items must have a size that is compatible with the encode key values, i.e.,
            <code>
            xKey[i] &lt; xCount &amp;&amp; yKey[y] &lt; yCount &amp;&amp; zKey[i] &lt; zCount
            </code>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.Validate">
            <summary>
            Validate will return a string of issues from the item builder.
            When this returns an empty list, the item has been properly build.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.CreateFile(System.String)">
            <summary>
            Create the file and move from stage 1 to stage 2 of the build process.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddStaticItem(DHI.Generic.MikeZero.DFS.IDfsStaticItem)">
            <summary>
            Add static item to the file.
            <para>
            The static item can come from another file, then the item 
            definition and data is copied over.
            </para>
            </summary>
            <returns>
            A reference to the static item written to the file. 
            This can be used at a later point if the static data needs to
            be updated, using the <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.WriteStaticItemData(DHI.Generic.MikeZero.DFS.IDfsStaticItem,System.Array)"/>
            </returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.CreateStaticItemBuilder">
            <summary>
            Create a static item builder, for creating and configuring a new static item.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddStaticItem(System.String,System.Array)">
            <summary>
            Creates and adds a static item storing the <paramref name="arrayData"/>.
            Use this only when <see cref="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.Quantity"/>
            and <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.SpatialAxis"/> and others are
            not important. Quantity and spatial axis are set to default 
            dummy values.
            <para>
            The type of <paramref name="arrayData"/> must be an array of type equivalent to one of the supported
            <see cref="T:DHI.Generic.MikeZero.DFS.DfsSimpleType"/>, e.g. int[].
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.AddStaticItem(System.String,DHI.Generic.MikeZero.eumQuantity,System.Array)">
            <summary>
            Creates and adds a static item storing the <paramref name="arrayData"/>.
            Use this only when <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.SpatialAxis"/> is
            not important. Spatial axis are set to default dummy values.
            <para>
            The type of <paramref name="arrayData"/> must be an array of type equivalent to one of the supported
            <see cref="T:DHI.Generic.MikeZero.DFS.DfsSimpleType"/>, e.g. int[].
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.GetFile">
            <summary>
            Returns the new dfs file
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsBuilder.Create(System.String,System.String,System.Int32)">
            <summary>
            Create a new builder that will build a default type of dfs file (with FixedSpace and AllItems)
            </summary>
            <param name="fileTitle">Title of the file</param>
            <param name="appTitle">Title of the application creating the file</param>
            <param name="appVersionNo">Version of the application creating the file</param>
            <returns>A new Dfs builder</returns>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsBuilder.DeleteValueFloat">
            <summary>
            Gets/sets the delete value of type float
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsBuilder.DeleteValueDouble">
            <summary>
            Gets/sets the delete value of type double
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsBuilder.DeleteValueByte">
            <summary>
            Gets/sets the delete value of type byte
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsBuilder.DeleteValueInt">
            <summary>
            Gets/sets the delete value of type int
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsBuilder.DeleteValueUnsignedInt">
            <summary>
            Gets/sets the delete value of type unsigned int
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsStaticItemWrapper">
            <summary>
            Class implementing <see cref="T:DHI.Generic.MikeZero.DFS.IDfsStaticItem"/>.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper">
            <summary>
            Common functionality for dynamic and static items.
            <para>
            This class is wrapping unmanaged item data from dfs.
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper._dfsFile">
            <summary>
            The dfs file where the item comes from
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper._itemPointer">
            <summary>
            Pointer to the unmanated memory where the item information is allocated.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper._itemNumber">
            <summary>
            Number of item in the dfs file
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper._spatialAxis">
            <summary>
            Spatial axis of the item
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper._name">
            <summary>
            Name of the item
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper._eumQuantity">
            <summary>
            Quantity of the item
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper._itemDataType">
            <summary>
            Data type of the item
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.#ctor">
            <summary>
            Default constructor, hidden from the public.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.SetReferenceCoordinates(System.Single,System.Single,System.Single)">
            <summary>
            Set reference coordinates.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.SetOrientation(System.Single,System.Single,System.Single)">
            <summary>
            Set orientation
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.SetUnitConversion(DHI.Generic.MikeZero.DFS.UnitConversionType,DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Sets the unit axis conversion for a specific item. 
            </summary>
            <param name="conversionType">Type of conversion</param>
            <param name="conversionUnit">Returns the desired unit to convert axis to</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.SetAxisUnitConversion(DHI.Generic.MikeZero.DFS.UnitConversionType,DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Sets the unit axis conversion for a specific item. 
            </summary>
            <remarks>
            This will read a new <see cref="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.SpatialAxis"/>.
            </remarks>
            <param name="conversionType">Type of conversion</param>
            <param name="conversionUnit">Returns the desired unit to convert axis to</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.GetItemInfo(DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper)">
            <summary>
            Reads item information for the <paramref name="item"/> and stores it
            in local variables.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.TransferItemInfo(DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper,DHI.Generic.MikeZero.DFS.IDfsStaticItem)">
            <summary>
            Transfers item info from reference item to wrapper item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.ItemNumber">
            <summary>
            Number of item that the item info belongs to
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.Name">
            <summary>
            Name of item
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.Quantity">
            <summary>
            Quantity of item
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.DataType">
            <summary>
            Data type of item
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.ReferenceCoordinateX">
            <summary>
            X reference coordinate
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.ReferenceCoordinateY">
            <summary>
            Y reference coordinate
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.ReferenceCoordinateZ">
            <summary>
            Z reference coordinate
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.OrientationAlpha">
            <summary>
            Alpha orientation, <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.OrientationAlpha"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.OrientationPhi">
            <summary>
            Phi orientation,  <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.OrientationPhi"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.OrientationTheta">
            <summary>
            Theta orientation, <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemInfo.OrientationTheta"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.ConversionType">
            <summary>
            Type of conversion for the axis
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.ConversionUnit">
            <summary>
            Desired unit to convert axis to
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.AxisConversionType">
            <summary>
            Type of conversion for the axis
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.AxisConversionUnit">
            <summary>
            Desired unit to convert axis to
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.SpatialAxis">
            <summary>
            The spatial axis
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.ElementCount">
            <summary>
            Number of elements in item
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.UsedElementCount">
            <summary>
            Number of used elements in item (after compression)
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.Bytes">
            <summary>
            Number of bytes that this items uses for storing one time step
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemInfoWrapper.UsedBytes">
            <summary>
            Number of used bytes that this items uses for storing one time step,
            after compression.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsStaticItem">
            <summary>
            Static item, includes array of data. 
            
            The array of data can be cast to one of
            the basic array types, depending on <see cref="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.DataType"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsStaticItem.Data">
            <summary>
            Data. 
            <para>
            Can be cast to one of the basic array types, 
            depending on <see cref="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.DataType"/>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsStaticItemWrapper.Finalize">
            <summary>
            Destroys the static item unmanaged memory
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsStaticItemWrapper.SetUnitConversion(DHI.Generic.MikeZero.DFS.UnitConversionType,DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Sets the unit axis conversion for a specific item. 
            </summary>
            <param name="conversionType">Type of conversion</param>
            <param name="conversionUnit">Returns the desired unit to convert axis to</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsStaticItemWrapper.Create(DHI.Generic.MikeZero.DFS.DfsAbstractFile,System.IntPtr,System.IntPtr,DHI.Generic.MikeZero.DFS.IDfsStaticItem)">
            <summary>
            Used by builder
            </summary>
            <remarks>
            This methods takes over the responsibility for freeing ressources related to
            <paramref name="staticVectorPointer"/>, i.e.,
            no freeing of the static data must be done, even if this
            throws an exception.
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsStaticItemWrapper.ReadAndCreate(DHI.Generic.MikeZero.DFS.DfsAbstractFile,System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Reads the next static item from the file pointed to by <paramref name="filePointer"/>, and moves
            the <paramref name="filePointer"/> accordingly.
            </summary>
            <returns>A new static item. Null if no more static items exists</returns>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsStaticItemWrapper.Data">
            <summary>
            Data. 
            <para>
            Can be cast to one of the basic array types, 
            depending on <see cref="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.DataType"/>
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder">
            <summary>
            Interface common for building a dfs 1, 2 or 3 file
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.SetDataType(System.Int32)">
            <summary>
            Set the data type. 
            <para>
            The data type tags the file as a special dfs file type.
            There exists no global system for maintaining these tag-variables. 
            The tag-variables should only be interpreted locally within one 
            model-complex e.g. MIKE 21. The application programmer can tag 
            bathymetries, result files, input files freely. 
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.SetGeographicalProjection(DHI.Generic.MikeZero.DFS.IDfsProjection)">
            <summary>
            Set the geographical projection and reference coordinates.
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.SetTemporalAxis(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)">
            <summary>
            Sets the temporal axis of the file.
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.SetSpatialAxis(DHI.Generic.MikeZero.DFS.IDfsSpatialAxis)">
            <summary>
            Get/Set the spatial axis of the file. This must be one of the
            allowed axis, depending on the file builder
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.SetEncodingKeys(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Sets the encoding key for compressing the dfs file.
            See  <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileInfo.GetEncodeKey(System.Int32[]@,System.Int32[]@,System.Int32[]@)"/> for the definition
            of the encode key values.
            <para>
            Compression is only supported when all dynamic items are of type float. 
            </para>
            <para>
            All dynamic items must have a size that is compatible with the encode key values, i.e,
            for all values in the key arrays:
            <code>
            xKey[i] &lt; xCount &amp;&amp; yKey[y] &lt; yCount &amp;&amp; zKey[i] &lt; zCount
            </code>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.AddDynamicItem(System.String,DHI.Generic.MikeZero.eumQuantity,DHI.Generic.MikeZero.DFS.DfsSimpleType,DHI.Generic.MikeZero.DFS.DataValueType)">
            <summary>
            Add a dynamic item to the file.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.AddCustomBlock(DHI.Generic.MikeZero.DFS.IDfsCustomBlock)">
            <summary>
            Add a custom block to the file.
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.Validate">
            <summary>
            Validate will return a string of issues from the item builder.
            When this returns an empty list, the item has been properly build.
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.CreateFile(System.String)">
            <summary>
            Creates a file on the disc. Moves to the second build stage
            </summary>
            <param name="filename">Name of the file, with or without path.</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.AddStaticItem(System.String,DHI.Generic.MikeZero.eumQuantity,System.Array)">
            <summary>
            Creates and adds a static item storing the <paramref name="arrayData"/>.
            <para>
            The size of the <paramref name="arrayData"/> must match the size of the
            spatial axis set in <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.SpatialAxis"/>
            </para>
            <para>
            This is a stage 2 method.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.FileTitle">
            <summary>
            Get/Set the title of the file.
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.ApplicationTitle">
            <summary>
            Get/Set the title of the application writing the file.
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.ApplicationVersion">
            <summary>
            Set the version number of the application writing the file.
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.DataType">
            <summary>
            Get/Set the data type. 
            <para>
            The data type tags the file as a special dfs file type.
            There exists no global system for maintaining these tag-variables. 
            The tag-variables should only be interpreted locally within one 
            model-complex e.g. MIKE 21. The application programmer can tag 
            bathymetries, result files, input files freely. 
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.DeleteValueFloat">
            <summary>
            Gets/sets the delete value of type float
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.DeleteValueDouble">
            <summary>
            Gets/sets the delete value of type double
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.DeleteValueByte">
            <summary>
            Gets/sets the delete value of type byte
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.DeleteValueInt">
            <summary>
            Gets/sets the delete value of type int
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.DeleteValueUnsignedInt">
            <summary>
            Gets/sets the delete value of type unsigned int
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.Projection">
            <summary>
            Get/Set the geographical projection and reference coordinates.
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.TemporalAxis">
            <summary>
            Sets the temporal axis of the file.
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123Builder.SpatialAxis">
            <summary>
            Get/Set the spatial axis of the file. This must be one of the
            allowed axis, depending on the file builder
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.IDfs1Builder">
            <summary>
            Builder for dfs1 files. 
            <para>
            See <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs1Builder"/> for details
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs1Builder.GetFile">
            <summary>
            Return the file as a <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs1File"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.IDfs2Builder">
            <summary>
            Builder for dfs2 files. 
            <para>
            See <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Builder"/> for details
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs2Builder.GetFile">
            <summary>
            Return the file as a <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs1File"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.IDfs3Builder">
            <summary>
            Builder for dfs3 files. 
            <para>
            See <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs3Builder"/> for details
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs3Builder.GetFile">
            <summary>
            Return the file as a <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs1File"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs2File">
            <summary>
            Dfs2 file class
            <para>
            Use the <see cref="T:DHI.Generic.MikeZero.DFS.DfsFileFactory"/> to open an existing dfs2 file.
            </para>
            <para>
            Use the <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Builder"/> to create a new dfs2 file.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File">
            <summary>
            Abstract class, implementing common functionality for
            dfs1, dfs2 and dfs3 files.
            </summary>
            <remarks>
            When loading, check that all axis (dynamic and static) are
            equal, otherwise throw an exception.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.IDfs123File">
            <summary>
            Base interface common for dfs 1, 2 and 3 files
            <para>
            Special for these files are that all their dynamic 
            and static items use the same spatial axis.
            </para>
            <para>
            This interface provides the file header information
            and a spatial axis that are common to all dynamic items.
            The dynamic items does not export the spatial axis.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO">
            <summary>
            Interface containing the raw read and write functions 
            of the static items in a dfs file. 
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.ReadStaticItemNext">
            <summary>
            Reads the next static item. First time called it returns the first
            static item. 
            
            If <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.ReadStaticItem(System.Int32)"/> is called for example with argument 
            staticItemNo 3, the next call to this method will return static item number 4.
            
            If one of the methods reading/writing dynamic item data is called, see 
            <see cref="T:DHI.Generic.MikeZero.DFS.IDfsFileIO"/>, the static item number is reset, and 
            the next call to this method again returns the first item number.
            </summary>
            <returns>The next static item, null if no more items are present.</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.ReadStaticItem(System.Int32)">
            <summary>
            Read the number <paramref name="staticItemNo"/> static item from the file.
             </summary>
            <param name="staticItemNo">Number of static item in the file to read. First static item has number 1</param>
            <returns>The static item number <paramref name="staticItemNo"/>, null if there are not that many static items.</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.WriteStaticItemData(DHI.Generic.MikeZero.DFS.IDfsStaticItem,System.Array)">
            <summary>
            Write the static item back to the file. the <paramref name="staticItem"/> must
            originate from this file. This will update and overwrite the static item information and 
            the data of the static item. 
            </summary>
            <param name="staticItem">Static item to update</param>
            <param name="data">New data to insert. Data length must match the data size of the static item.</param>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123File.FileInfo">
            <summary>
            File info
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123File.SpatialAxis">
            <summary>
            Spatial axis that are valid for all dynamic and static items.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.IDfs123File.ItemInfo">
            <summary>
            Information on all the dynamic items in the file.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File._dfsFile">
            <summary>
            The <see cref="T:DHI.Generic.MikeZero.DFS.IDfsFile"/> that is used for
            reading or writing dfs data.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File._spatialAxis">
            <summary>
            Spatial axis common for all items in the file.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.Finalize">
            <summary>
            Desctructor automatically closes the file, if open.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.Dispose">
            <summary>
            Close file and release ressources on the unmanaged side.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.CheckAllDynamicAxisEquals">
            <summary>
            Checks that all dynamic items have the same spatial axis.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.SpatialAxisUpdated(DHI.Generic.MikeZero.DFS.IDfsSpatialAxis)">
            <summary>
            Flag that the spatial axis has been updated
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.ReadStaticItemNext">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.ReadStaticItemNext"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.ReadStaticItem(System.Int32)">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.ReadStaticItem(System.Int32)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.WriteStaticItemData(DHI.Generic.MikeZero.DFS.IDfsStaticItem,System.Array)">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.WriteStaticItemData(DHI.Generic.MikeZero.DFS.IDfsStaticItem,System.Array)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.WriteItemTimeStepNext(System.Double,System.Array)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.WriteItemTimeStep(System.Int32,System.Int32,System.Double,System.Array)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.FindItem(System.Int32,System.Int32)">
            <summary>
            Positions the file pointer at the location in the file where the 
            specified dynamic item at the specified time step starts.
            </summary>
            <param name="itemNumber">Number of item to find (1-based)</param>
            <param name="timestepIndex">Index of time step to find (0-based)</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.FindTimeStep(System.Int32)">
            <summary>
            Positions the file pointer at the location in the file where the 
            specified time step starts.
            </summary>
            <param name="timestepIndex">Index of time step to find (0-based)</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.Reset">
            <summary>
            Resets the file pointer to point on the first dynamic item time step in the file.
            <para>
            Can also be used if it is required to restart reading the static items.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.Flush">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.Flush"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.Close">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.Close"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.FileName">
            <summary>
            Name of file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.FileInfo">
            <summary>
            File info
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.SpatialAxis">
            <summary>
            Spatial axis that are valid for all dynamic and static items.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123File.ItemInfo">
            <summary>
            Information on all the dynamic items in the file.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.IDfs2File">
            <summary>
            Interface for a dfs2 file
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs2File.ReadItemTimeStepNext">
            <summary>
            For details, see <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStepNext"/>. 
            This version returns a <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData2D"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs2File.ReadItemTimeStep(System.Int32,System.Int32)">
            <summary>
            For details, see <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(System.Int32,System.Int32)"/>. 
            This version returns a <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData2D"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs2File.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData2D,System.Int32)">
            <summary>
            For details, see <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData,System.Int32)"/>. 
            This version works on a <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData2D"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs2File.#ctor(DHI.Generic.MikeZero.DFS.IDfsFile)">
            <summary>
            Wrap a dfs file object in a dfs2 file object.
            <para>
            If dfs file is not a dfs2 file, behavior is undefined.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs2File.ReadItemTimeStepNext">
            <summary>
            For details, see <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStepNext"/>. 
            This version returns a <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData2D"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs2File.ReadItemTimeStep(System.Int32,System.Int32)">
            <summary>
            For details, see <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(System.Int32,System.Int32)"/>. 
            This version returns a <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData2D"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs2File.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData2D,System.Int32)">
            <summary>
            For details, see <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData,System.Int32)"/>. 
            This version works on a <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData2D"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs2File.ConvertItemData2D(DHI.Generic.MikeZero.DFS.IDfsItemData,DHI.Generic.MikeZero.DFS.IDfsSimpleDynamicItemInfo)">
            <summary>
            Converts from <see cref="T:DHI.Generic.MikeZero.DFS.DfsItemData`1"/> to <see cref="T:DHI.Generic.MikeZero.DFS.DfsItemData2D`1"/>,
            assuming that dimensions match (no checks are being made)
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs1Util">
            <summary>
            Utility and extension methods for <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs1File"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs1Util.ReadFloatDataForItem(DHI.Generic.MikeZero.DFS.dfs123.Dfs1File,System.Int32,System.Int32[])">
            <summary>
            Read float data for the specified item and the specified time step indices.
            <para>
            If itemnumber or one of the time step indices is out of range, an exception is thrown.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.Cartography.CartException">
            <summary>
            Custom exception thrown when a Cartography error occurs
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.CartException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CartException class with a specified error message
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsFileInfo">
            <summary>
            File info class, containing information for/from the dfs file header.
            </summary>
            <remarks>
            This class It stores all data in its own properties. 
            <para>
            It is used by the builders for storing header information
            provided by the user, before creating a new file.
            </para>
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsFileInfo">
            <summary>
            File info, containing header data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileInfo.GetEncodeKey(System.Int32[]@,System.Int32[]@,System.Int32[]@)">
            <summary>
            Gets the compression encoding key. 
            <para>
            When a file is compressed, all dynamic items are compressed with the same
            encoding key, and hence also all dynamic items have the same spatial
            axis.
            </para>
            <para>
            When a file is compressed, the encoding key defines for each value stored
            in the file the indices [xi, yi, zy] in the data matrix where the value belongs.
            Hence, the i'th data value belongs in the data matrix on 
               Data[ xKey[i], yKey[i], zKey[i]], 
            or using linear indexing: 
               Data[xKey[i] + yKey[i]*xCount + zKey[i]*xCount*yCount].
            </para>
            <para>
            For a 2D axis all zKey values are zero. For a 1D axis all yKey and zKey values
            are zero.
            </para>
            <para>
            When reading data from dynamic items, data is automatically uncompressed when 
            loaded, hence the encoding keys are only for information. Some files also
            compresses static items, and compresses these also, however using a dummy axis
            of the size of the encoding key, and manual decoding needs to take place, 
            see <see cref="M:DHI.Generic.MikeZero.DFS.DfsExtensions.dfsDecode``1(``0[],System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[],``0)"/> and <see cref="M:DHI.Generic.MikeZero.DFS.DfsExtensions.dfsEncode``1(``0[],System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[])"/>.
            </para>
            <para>
            Data outside the encoding key gets the delete value.
            </para>
            <para>
            For a file with 2D data all zi's are zero, and for a 1D file, zi's and yi's are zero.
            </para>
            <para>
            It is only valid to call this function if <see cref="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.IsFileCompressed"/>
            returns true.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.FileName">
            <summary>
            Return the name of the file that was used to open/create the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.FileTitle">
            <summary>
            Title of the file. Can be empty string.
            <para>
            When setting, the new string must match the length of 
            the existing string. If the new string is shorter, 
            spaces are appended, if the new string is longer, 
            it is truncated.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.ApplicationTitle">
            <summary>
            Title of the application that wrote the file
            <para>
            When setting, the new string must match the length of 
            the existing string. If the new string is shorter, 
            spaces are appended, if the new string is longer, 
            it is truncated.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.ApplicationVersion">
            <summary>
            Version of the application that wrote the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.DataType">
            <summary>
            Type of data stored in the file.
            <para>
            The data type tags the file as a special dfs file type.
            There exists no global system for maintaining these tag-variables. 
            The tag-variables should only be interpreted locally within one 
            model-complex e.g. MIKE 21. The application programmer can tag 
            bathymetries, result files, input files freely. 
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.FileType">
            <summary>
            Type of dfs file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.StatsType">
            <summary>
            Type of statistics stored in the header for each dynamic item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.DeleteValueFloat">
            <summary>
            Delete value for type float
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.DeleteValueDouble">
            <summary>
            Delete value for type double
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.DeleteValueByte">
            <summary>
            Delete value for type byte
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.DeleteValueInt">
            <summary>
            Delete value for type int
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.DeleteValueUnsignedInt">
            <summary>
            Delete value for type unsigned int (uint)
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.Projection">
            <summary>
            Projection defining the coordinate system that is stored. All coordinates
            are stored in this projection.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.TimeAxis">
            <summary>
            Temporal axis of the file.
            <para>
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.CustomBlocks">
            <summary>
            List of all custom blocks stored in the header, ordered
            as they where read from the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.IsFileCompressed">
            <summary>
            Returns true if the file is compressed. Use the <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileInfo.GetEncodeKey(System.Int32[]@,System.Int32[]@,System.Int32[]@)"/>
            to get the compression encoding key.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileInfo.GetEncodeKey(System.Int32[]@,System.Int32[]@,System.Int32[]@)">
            <summary>
            Gets the compression encoding key. 
            <para>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileInfo.GetEncodeKey(System.Int32[]@,System.Int32[]@,System.Int32[]@)"/> for details.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileInfo.SetEncodingKey(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Sets the encoding keys
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.FileName">
            <summary>
            Return the name of the file that was used to open/create the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.FileTitle">
            <summary>
            Title of the file. Can be empty string.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.ApplicationTitle">
            <summary>
            Title of the application that wrote the file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.ApplicationVersion">
            <summary>
            Version of the application that wrote the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.DataType">
            <summary>
            Type of data stored in the file.
            <para>
            See <see cref="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.DataType"/> for details.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.FileType">
            <summary>
            Type of dfs file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.StatsType">
            <summary>
            Type of statistics stored in the header for each dynamic item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.DeleteValueFloat">
            <summary>
            Delete value for type float
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.DeleteValueDouble">
            <summary>
            Delete value for type double
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.DeleteValueByte">
            <summary>
            Delete value for type byte
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.DeleteValueInt">
            <summary>
            Delete value for type int
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.DeleteValueUnsignedInt">
            <summary>
            Delete value for type unsigned int (uint)
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.Projection">
            <summary>
            Projection defining the coordinate system that is stored. All coordinates
            are stored in this projection.
            <para>
            See <see cref="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.Projection"/> for details.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.TimeAxis">
            <summary>
            Temporal axis of the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.CustomBlocks">
            <summary>
            List of all custom blocks stored in the header, ordered
            as they where read from the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfo.IsFileCompressed">
            <summary>
            Returns true if the file is compressed. Use the <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileInfo.GetEncodeKey(System.Int32[]@,System.Int32[]@,System.Int32[]@)"/>
            to get the compression encoding key.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper">
            <summary>
            File info, containing information from the dfs file header.
            <para>
            This class wraps the unmanaged memory from ufs containing the file info.
            </para>
            </summary>
            <remarks>
            The <see cref="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.HeaderPointer"/> is valid until the class is garbage collected.
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.#ctor(DHI.Generic.MikeZero.DFS.DfsAbstractFile,System.IntPtr,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Internal constructor. 
            <para>
            The responsibility for freeing data associated with the header pointer
            is now this class.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.Finalize">
            <summary>
            Free unmanaged ressources
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.GetEncodeKey(System.Int32[]@,System.Int32[]@,System.Int32[]@)">
            <summary>
            Gets the compression encoding key. 
            <para>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileInfo.GetEncodeKey(System.Int32[]@,System.Int32[]@,System.Int32[]@)"/> for details
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.FileName">
            <summary>
            Return the name of the file that was used to open/create the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.FileTitle">
            <summary>
            Title of the file. Can be empty string.
            <para>
            When setting, the new string must match the length of 
            the existing string. If the new string is shorter, 
            spaces are appended, if the new string is longer, 
            it is truncated.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.ApplicationTitle">
            <summary>
            Title of the application that wrote the file
            <para>
            When setting, the new string must match the length of 
            the existing string. If the new string is shorter, 
            spaces are appended, if the new string is longer, 
            it is truncated.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.ApplicationVersion">
            <summary>
            Version of the application that wrote the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.DataType">
            <summary>
            Type of data stored in the file.
            <para>
            See <see cref="P:DHI.Generic.MikeZero.DFS.IDfsFileInfo.DataType"/> for details
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.FileType">
            <summary>
            Type of dfs file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.StatsType">
            <summary>
            Type of statistics stored in the header for each dynamic item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.DeleteValueFloat">
            <summary>
            Delete value for type float
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.DeleteValueByte">
            <summary>
            Delete value for type byte
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.DeleteValueDouble">
            <summary>
            Delete value for type double
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.DeleteValueInt">
            <summary>
            Delete value for type int
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.DeleteValueUnsignedInt">
            <summary>
            Delete value for type unsigned int (uint)
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.Projection">
            <summary>
            Projection defining the coordinate system that is stored. All coordinates
            are stored in this projection.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.TimeAxis">
            <summary>
            Temporal axis of the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.CustomBlocks">
            <summary>
            List of all custom blocks stored in the header, ordered
            as they where read from the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileInfoWrapper.IsFileCompressed">
            <summary>
            Returns true if the file is compressed. Use the <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileInfo.GetEncodeKey(System.Int32[]@,System.Int32[]@,System.Int32[]@)"/>
            to get the compression encoding key.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder">
            <summary>
            Item builder that handles common functionality for
            the static and the dynamic items.
            <para>
            The following functions must be set:
            <see cref="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.Set(System.String,DHI.Generic.MikeZero.eumQuantity,DHI.Generic.MikeZero.DFS.DfsSimpleType)"/>,
            <see cref="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.SetAxis(DHI.Generic.MikeZero.DFS.IDfsSpatialAxis)"/>.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.Set(System.String,DHI.Generic.MikeZero.eumQuantity,DHI.Generic.MikeZero.DFS.DfsSimpleType)">
            <summary>
            Sets name, eum quantity and item data type.
            <para>
            This must be set.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.SetAxis(DHI.Generic.MikeZero.DFS.IDfsSpatialAxis)">
            <summary>
            Sets the spatial axis.
            <para>
            This must be set.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.SetReferenceCoordinates(System.Single,System.Single,System.Single)">
            <summary>
            Sets reference coordinates.
            <para>
            Optional. If not set, default values of 0 are used.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.SetOrientation(System.Single,System.Single,System.Single)">
            <summary>
            Sets reference orientation.
            <para>
            Optional. If not set, default values of 0 are used.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.SetUnitConversion(DHI.Generic.MikeZero.DFS.UnitConversionType,DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Sets the unit conversion for item. 
            <para>
            Optional. The default for an item is that no conversion is performed. 
            </para>
            <para>
            If it's set to anything else than no conversion, automatic conversion is performed.
            </para>
            </summary>
            <param name="convType">Conversion type: F_NO_CONVERSION, F_UBG_CONVERSION and F_FREE_CONVERSION. In case of either F_NO_CONVERSION or F_UBG_CONVERSION nUnit is ignored</param>
            <param name="unit">Desired unit to convert to</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.SetAxisUnitConversion(DHI.Generic.MikeZero.DFS.UnitConversionType,DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Sets the unit conversion for the axis of the item. 
            <para>
            Optional. The default for an item is that no conversion is performed. 
            </para>
            <para>
            If it's set to anything else than no conversion, automatic conversion is performed.
            </para>
            </summary>
            <param name="convType">Conversion type: F_NO_CONVERSION, F_UBG_CONVERSION and F_FREE_CONVERSION. In case of either F_NO_CONVERSION or F_UBG_CONVERSION nUnit is ignored</param>
            <param name="unit">Desired unit to convert to</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.Validate">
            <summary>
            Validate will return a string of issues from the item builder.
            When this returns an empty list, the item has been properly build.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.SpatialAxis">
            <summary>
            Get the spatial axis (used for validation (compressed file))
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.DataType">
            <summary>
            Get the data type (used for validation (compressed file))
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsCustomBlock`1">
            <summary>
            Custom block class
            </summary>
            <remarks>
            Implemented using an array of the custom block data.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsCustomBlock">
            <summary>
            A custom block is a (small) array of a certain type, identified by its <see cref="P:DHI.Generic.MikeZero.DFS.IDfsCustomBlock.Name"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsCustomBlock.ToArray">
            <summary>
            Return data as an array. This may return a reference to
            an existing array, but it may also copy the values to
            a new array.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsCustomBlock.SimpleType">
            <summary>
            Type of the data stored in the custom block.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsCustomBlock.Name">
            <summary>
            Name of custom block.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsCustomBlock.Count">
            <summary>
            Number of elements in custom block
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsCustomBlock.Item(System.Int32)">
            <summary>
            Custom block value getter and setter. 
            <para>
            You can update the custom block data by setting 
            values directly in the array. The type must match
            the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsCustomBlock.SimpleType"/>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsCustomBlock`1.ToArray">
            <summary>
            Return data as an array. This returns a reference to
            an existing array.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsCustomBlock`1.SimpleType">
            <summary>
            Type of the data stored in the custom block.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsCustomBlock`1.Name">
            <summary>
            Name of custom block.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsCustomBlock`1.Count">
            <summary>
            Number of elements in custom block
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsCustomBlock`1.Item(System.Int32)">
            <summary>
            Custom block value getter and setter. 
            <para>
            You can update the custom block data by setting 
            values directly in the array. The type must match
            the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsCustomBlock.SimpleType"/>
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsCustomBlockWrapper">
            <summary>
            Custom block class.
            </summary>
            <remarks>
            Implemented by wrapping an ilist of the custom block data.
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsCustomBlockWrapper.#ctor">
            <summary>
            Hide default constructor
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsCustomBlockWrapper.ToArray">
            <summary>
            Return data as an array. This may return a reference to
            an existing array, but it may also copy the values to
            a new array.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsCustomBlockWrapper.SimpleType">
            <summary>
            Type of the data stored in the custom block.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsCustomBlockWrapper.Name">
            <summary>
            Name of custom block.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsCustomBlockWrapper.Count">
            <summary>
            Number of elements in custom block
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsCustomBlockWrapper.Item(System.Int32)">
            <summary>
            Custom block value getter and setter. 
            <para>
            You can update the custom block data by setting 
            values directly in the array. The type must match
            the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsCustomBlock.SimpleType"/>
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsCustomBlockWrapper.Data">
            <summary>
            Data as an IList
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsProjection">
            <summary>
            Projection class implementing <see cref="T:DHI.Generic.MikeZero.DFS.IDfsProjection"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsProjection">
            <summary>
            Defines a projection and its coordinate transforms.
            <para>
            You can use the <see cref="T:DHI.Generic.Cartography.MzCartography"/> to handle the
            difference coordinate systems involved in a dfs file. Also
            see there for detailed documentation.
            </para>
            <para>
            The <see cref="P:DHI.Generic.MikeZero.DFS.IDfsProjection.WKTString"/> is a WKT string for a spatial 
            reference system. A number of abbreviated strings also exists, 
            i.e., "UTM-33" for a WGS-84 UTM zone 33 projection, 
            and "LONG/LAT" for WGS-84 geographical coordinates.
            </para>
            <para>
            There are 3 levels of coordinates:
            Geographical coordinates (longitude, latitude) in degrees, 
            projection coordinates (easting, northing), and
            model/user defined coordinates (x,y).
            </para>
            <para>
            All coordinates in a dfs file are stored in model coordinates.
            </para>
            <para>
            The <see cref="P:DHI.Generic.MikeZero.DFS.IDfsProjection.WKTString"/> defines which ellipsoid the 
            geographical coordinates use (example: WGS-84).
            </para>
            <para>
            The <see cref="P:DHI.Generic.MikeZero.DFS.IDfsProjection.WKTString"/> defines the mapping from geographical 
            coordinates to projection coordinates.
            </para>
            <para>
            The <see cref="P:DHI.Generic.MikeZero.DFS.IDfsProjection.Longitude"/>, <see cref="P:DHI.Generic.MikeZero.DFS.IDfsProjection.Latitude"/> and 
            <see cref="P:DHI.Generic.MikeZero.DFS.IDfsProjection.Orientation"/> defines the origin and the 
            orientation of the model coordinates. It is used to move and rotate
            the model coordinates, i.e., a dfs2 file with a 2D equidistant axis  
            defines its model coordinate origin and orientation here (and not in 
            its axis definition, though that would also be possible).
            </para>
            <para>
            See <see cref="P:DHI.Generic.MikeZero.DFS.IDfsProjection.Orientation"/> for the definition of the orientation.
            The model coordinates are rotated around its origin.
            </para>
            <para>
            If <see cref="P:DHI.Generic.MikeZero.DFS.IDfsProjection.Orientation"/> is zero, and <see cref="P:DHI.Generic.MikeZero.DFS.IDfsProjection.Longitude"/> and <see cref="P:DHI.Generic.MikeZero.DFS.IDfsProjection.Latitude"/>
            matches the origin of the projection coordinate system, then projection coordinates equals model
            coordinates. Example: UTM-31 has projection origin at (lon,lat) = (3,0). 
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsProjection.Type">
            <summary>
            Type of projection. Old files that does not define a projection
            can have a <see cref="F:DHI.Generic.MikeZero.DFS.ProjectionType.Undefined"/>.
            All new files will have projection information.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsProjection.WKTString">
            <summary>
            WKT string for a spatial reference system.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsProjection.Longitude">
            <summary>
            Origin of model coordinates.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsProjection.Latitude">
            <summary>
            Origin of model coordinates.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsProjection.Orientation">
            <summary>
            Orientation of model coordinates.
            The rotation from true north to the model coordinate 
            y-axis in degrees, measured positive clockwise.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsProjection.InvokeOnUpdate">
            <summary>
            Method that is invoked when a property is updated.
            </summary>
        </member>
        <member name="E:DHI.Generic.MikeZero.DFS.DfsProjection.OnUpdate">
            <summary>
            Event that is triggered when a property is updated.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsProjection.Type">
            <summary>
            Type of projection. 
            <para>
            See <see cref="P:DHI.Generic.MikeZero.DFS.IDfsProjection.Type"/> for details.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsProjection.WKTString">
            <summary>
            WKT string for a spatial reference system.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsProjection.Longitude">
            <summary>
            Origin of model coordinates.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsProjection.Latitude">
            <summary>
            Origin of model coordinates.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsProjection.Orientation">
            <summary>
            Orientation of model coordinates.
            The rotation from true north to the model coordinate 
            y-axis in degrees, measured positive clockwise.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsProjection.UpdatedEventHandler">
            <summary>
            Delegate for hooking up to the event that is triggered when a property is updated.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsFactory">
            <summary>
            Factory class for creating Dfs classes. 
            <para>
            It contains functionality for creating classes
            that are to be used when building a new file, 
            e.g. the <see cref="T:DHI.Generic.MikeZero.DFS.DfsBuilder"/>.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateGenericDfsBuilder(System.String,System.String,System.Int32)">
            <summary>
            Create a <see cref="T:DHI.Generic.MikeZero.DFS.DfsBuilder"/> for building a generic dfs file.
            </summary>
            <param name="fileTitle">Title of file (not the file name)</param>
            <param name="applicationTitle">Title of application creating the file</param>
            <param name="applicationVersionNo">Version number of application creating the file</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateDfs1Builder(System.String,System.String,System.Int32)">
            <summary>
            Create a <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Builder"/> for building a dfs1 file.
            </summary>
            <param name="fileTitle">Title of file (not the file name)</param>
            <param name="applicationTitle">Title of application creating the file</param>
            <param name="applicationVersionNo">Version number of application creating the file</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateDfs2Builder(System.String,System.String,System.Int32)">
            <summary>
            Create a <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Builder"/> for building a dfs2 file.
            </summary>
            <param name="fileTitle">Title of file (not the file name)</param>
            <param name="applicationTitle">Title of application creating the file</param>
            <param name="applicationVersionNo">Version number of application creating the file</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateDfs3Builder(System.String,System.String,System.Int32)">
            <summary>
            Create a <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Builder"/> for building a dfs3 file.
            </summary>
            <param name="fileTitle">Title of file (not the file name)</param>
            <param name="applicationTitle">Title of application creating the file</param>
            <param name="applicationVersionNo">Version number of application creating the file</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateDfsuBuilder(DHI.Generic.MikeZero.DFS.dfsu.DfsuFileType)">
            <summary>
            Create a <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Builder"/> for building a dfsu file.
            </summary>
            <param name="dfsuFileType">Type of dfsu file to build</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateMeshBuilder">
            <summary>
            Create a <see cref="T:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder"/> for building a mesh file.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateProjection(System.String)">
            <summary>
            Create an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsProjection"/> based on the <paramref name="wktProjectionString"/>.
            <para>
            The reference coordinates are set to the origin of the projected coordinate system.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateProjectionGeoOrigin(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Create an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsProjection"/> based on the <paramref name="wktProjectionString"/>,
            and set the origin (in geo (lon-lat) coordinates) and orientation of the model coordinate system.
            <para>
            See <see cref="T:DHI.Generic.MikeZero.DFS.IDfsProjection"/> for details on the lon-lat origin and orientation.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateProjectionProjOrigin(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Create an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsProjection"/> based on the <paramref name="wktProjectionString"/>,
            and set the origin (in projected coordinates) and orientation of the model coordinate system.
            <para>
            See <see cref="T:DHI.Generic.MikeZero.DFS.IDfsProjection"/> for details on the lon-lat origin and orientation.
            </para>
            <para>
            The projection returned will store values as longitude, lattitude and orientation
            from true north.
            </para>
            </summary>
            <param name="wktProjectionString">WKT string for a spatial reference system.</param>
            <param name="easting">Origin easting/x coordinate value</param>
            <param name="northing">Origin northing/y coordinate value</param>
            <param name="orientation">Orientation of model coordinates. The rotation from projection north to the model coordinate y-axis, positive clockwise</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateProjectionUndefined">
            <summary>
            Creates an undefined <see cref="T:DHI.Generic.MikeZero.DFS.IDfsProjection"/> which is provided for backward
            compatibility. Use preferably one of the other projection methods.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateCustomBlock``1(System.String,``0[])">
            <summary>
            Create a custom block, with the provided name and data.
            </summary>
            <typeparam name="T">Must be an array of type float, double, byte, int, uint, short or ushort.</typeparam>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateCustomBlock(System.String,System.Array)">
            <summary>
            Create a custom block, with the provided name and data.
            <para>
            The <paramref name="arrayData"/> must be an array of type float, double, byte, int, uint, short or ushort
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateAxisDummy(System.Int32)">
            <summary>
            Create a dummy spatial axis that can contain <paramref name="numberOfValues"/>
            data values.
            <para>
            This can be used when an item does not have a relevant spatial axis and 
            it is required to store a number of values.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateAxisEqD0">
            <summary>
            Create a 0D spatial axis. See <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisEqD0"/> for details.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateAxisEqD1(DHI.Generic.MikeZero.eumUnit,System.Int32,System.Double,System.Double)">
            <summary>
            Create a 1D equidistant spatial axis. See <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisEqD1"/> for details.
            </summary>
            <param name="axisUnit">Unit of the axis coordinate values.</param>
            <param name="xCount">Number of data points in the x direction</param>
            <param name="x0">Relative offset to origin</param>
            <param name="dx">space between each gridpoint</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateAxisEqD2(DHI.Generic.MikeZero.eumUnit,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Create a 2D equidistant spatial axis. See <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisEqD2"/> for details.
            </summary>
            <param name="axisUnit">Unit of the axis coordinate values.</param>
            <param name="xCount">Number of data points in the x direction</param>
            <param name="x0">Relative offset to origin in x direction</param>
            <param name="dx">space between each gridpoint in x direction</param>
            <param name="yCount">Number of data points in the y direction</param>
            <param name="y0">Relative offset to origin in y direction</param>
            <param name="dy">space between each gridpoint in y direction</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateAxisEqD3(DHI.Generic.MikeZero.eumUnit,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Create a 3D equidistant spatial axis. See <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisEqD3"/> for details.
            </summary>
            <param name="axisUnit">Unit of the axis coordinate values.</param>
            <param name="xCount">Number of data points in the x direction</param>
            <param name="x0">Relative offset to origin in x direction</param>
            <param name="dx">space between each gridpoint in x direction</param>
            <param name="yCount">Number of data points in the y direction</param>
            <param name="y0">Relative offset to origin in y direction</param>
            <param name="dy">space between each gridpoint in y direction</param>
            <param name="zCount">Number of data points in the z direction</param>
            <param name="z0">Relative offset to origin in z direction</param>
            <param name="dz">space between each gridpoint in z direction</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateAxisEqD4(DHI.Generic.MikeZero.eumUnit,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Create a 4D equidistant spatial axis. Currently not supported.
            </summary>
            <param name="axisUnit">Unit of the axis coordinate values.</param>
            <param name="xCount">Number of data points in the x direction</param>
            <param name="x0">Relative offset to origin in x direction</param>
            <param name="dx">space between each gridpoint in x direction</param>
            <param name="yCount">Number of data points in the y direction</param>
            <param name="y0">Relative offset to origin in y direction</param>
            <param name="dy">space between each gridpoint in y direction</param>
            <param name="zCount">Number of data points in the z direction</param>
            <param name="z0">Relative offset to origin in z direction</param>
            <param name="dz">space between each gridpoint in z direction</param>
            <param name="fCount">Number of data points in the f direction</param>
            <param name="f0">Relative offset to origin in f direction</param>
            <param name="df">space between each gridpoint in f direction</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateAxisNeqD1(DHI.Generic.MikeZero.eumUnit,DHI.Generic.MikeZero.DFS.Coords[])">
            <summary>
            Create a 1D non-equidistant spatial axis. See <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisNeqD1"/> for details.
            <para>
            This is actually more alike a 1D curve-linear axis.
            </para>
            </summary>
            <param name="axisUnit">Unit of the axis coordinate values.</param>
            <param name="coords">A set of (x,y,z) coordinates of axis</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateAxisNeqD2(DHI.Generic.MikeZero.eumUnit,System.Double[],System.Double[])">
            <summary>
            Create a 2D non-equidistant spatial axis. See <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisNeqD2"/> for details.
            </summary>
            <param name="axisUnit">Unit of the axis coordinate values.</param>
            <param name="xCoords">X-coordinates in the axis.</param>
            <param name="yCoords">Y-coordinates in the axis.</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateAxisNeqD3(DHI.Generic.MikeZero.eumUnit,System.Double[],System.Double[],System.Double[])">
            <summary>
            Create a 3D non-equidistant spatial axis.
            </summary>
            <param name="axisUnit">Unit of the axis coordinate values.</param>
            <param name="xCoords">X-coordinates in the axis.</param>
            <param name="yCoords">Y-coordinates in the axis.</param>
            <param name="zCoords">Z-coordinates in the axis.</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateAxisCurveLinearD2(DHI.Generic.MikeZero.eumUnit,System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Create a 2D curve-linear spatial axis. See <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2"/> for details.
            </summary>
            <param name="axisUnit">Unit of the axis coordinate values.</param>
            <param name="xCount">Number of data points in the x direction</param>
            <param name="yCount">Number of data points in the Y direction</param>
            <param name="xCoords">X-coordinates of the grid.</param>
            <param name="yCoords">Y-coordinates of the grid.</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateAxisCurveLinearD3(DHI.Generic.MikeZero.eumUnit,System.Int32,System.Int32,System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
            Create a 3D curve-linear spatial axis. See <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3"/> for details.
            </summary>
            <param name="axisUnit">Unit of the axis coordinate values.</param>
            <param name="xCount">Number of data points in the x direction</param>
            <param name="yCount">Number of data points in the Y direction</param>
            <param name="zCount">Number of data points in the Z direction</param>
            <param name="xCoords">X-coordinates of the grid.</param>
            <param name="yCoords">Y-coordinates of the grid.</param>
            <param name="zCoords">Z-coordinates of the grid.</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateTemporalEqCalendarAxis(DHI.Generic.MikeZero.eumUnit,System.DateTime,System.Double,System.Double)">
            <summary>
            Create a temporal axis, equidistant calendar axis.
            </summary>
            <param name="timeUnit">Time unit used by the time axis</param>
            <param name="startDateTime">Start time of the file. Fractional seconds is ignored</param>
            <param name="startTimeOffset">Time in <paramref name="timeUnit"/> for the first time step in the file.</param>
            <param name="timeStep">Time step length, in <paramref name="timeUnit"/></param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateTemporalEqTimeAxis(DHI.Generic.MikeZero.eumUnit,System.Double,System.Double)">
            <summary>
            Create a temporal axis, equidistant time axis.
            </summary>
            <param name="timeUnit">Time unit used by the time axis</param>
            <param name="startTimeOffset">Time in <paramref name="timeUnit"/> for the first time step in the file.</param>
            <param name="timeStep">Time step length, in <paramref name="timeUnit"/></param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateTemporalNonEqCalendarAxis(DHI.Generic.MikeZero.eumUnit,System.DateTime)">
            <summary>
            Create a temporal axis, non-equidistant calendar axis.
            </summary>
            <param name="timeUnit">Time unit used by the time axis</param>
            <param name="startDateTime">Start time of the file. Fractional seconds is ignored.</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateTemporalNonEqTimeAxis(DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Create a temporal axis, non-equidistant time axis.
            </summary>
            <param name="timeUnit">Time unit used by the time axis</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFactory.CreateStaticItem(System.String,DHI.Generic.MikeZero.eumQuantity,System.Array)">
            <summary>
            Create a static item with the provided name, quantity and data.
            <para>
            <paramref name="data"/> must an array with one of the supported 
            <see cref="T:DHI.Generic.MikeZero.DFS.DfsSimpleType"/>, e.g. int[].
            </para>
            <para>
            The spatial axis is set to a dummy axis of the correct length.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnit">
            <summary>
            Converter class for converting item data and item info (spatial axis) 
            to eum base unit (usually SI)
            <para>
            It converts as well static as dynamic items and data.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnit.GetBaseUnit(DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Returns the base (SI) unit for the provided unit
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnit.Initialize(DHI.Generic.MikeZero.DFS.IDfsFile)">
            <summary>
            Initialise this data converter for working on the given <paramref name="dfsFile"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnit.Convert(DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo)">
            <summary>
            Convert the dynamic item information, <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnit.Convert(DHI.Generic.MikeZero.DFS.IDfsItemData)">
            <summary>
            Convert the dynamic item data, <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnit.Revert(System.Int32,System.Array)">
            <summary>
            Revert the dynamic item data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnit.Convert(DHI.Generic.MikeZero.DFS.IDfsStaticItem)">
            <summary>
            Convert a static item, including its data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnit.Revert(DHI.Generic.MikeZero.DFS.IDfsStaticItem@,System.Array@)">
            <summary>
            Revert the static item data.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnit.MyDynamicItemInfo">
            <summary>
            Private helper class that updates the <see cref="P:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnit.MyDynamicItemInfo.Quantity"/>
            of an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/> to the base (SI) unit
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsDynamicItemDecoratorBase">
            <summary>
            Class for decorating an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/>. If used as is, it 
            returns exactly what the decorated <see cref="P:DHI.Generic.MikeZero.DFS.DfsDynamicItemDecoratorBase.DynamicItemInfo"/> does.
            <para>
            All methods are implemented virtual. Hence you can override just one method, if
            just that is to be changed, and the remainder will work as always.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase">
            <summary>
            Abstract class for decorating an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemInfo"/>. If used as is, it 
            returns exactly what the decorated <see cref="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.ItemInfo"/> does.
            <para>
            All methods are implemented virtual. Hence you can override just one method, if
            just that is to be changed, and the remainder will work as always.
            </para>
            <para>
            Used by <see cref="T:DHI.Generic.MikeZero.DFS.DfsDynamicItemDecoratorBase"/> and 
            Used by <see cref="T:DHI.Generic.MikeZero.DFS.DfsStaticItemDecoratorBase"/> and 
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.SetUnitConversion(DHI.Generic.MikeZero.DFS.UnitConversionType,DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Sets the unit conversion for a specific item. 
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.SetReferenceCoordinates(System.Single,System.Single,System.Single)">
            <summary>
            Update the reference coordinates of the spatial axis.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.SetOrientation(System.Single,System.Single,System.Single)">
            <summary>
            Update the orientation of the spatial axis.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.SetAxisUnitConversion(DHI.Generic.MikeZero.DFS.UnitConversionType,DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Sets the unit axis conversion for a specific item. 
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.ItemInfo">
            <summary>
            Specialized item info, returned as <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemInfo"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.ItemNumber">
            <summary>
            Item number, in list of items. 1 based.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.Name">
            <summary>
            Name of item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.Quantity">
            <summary>
            EUM quantity of item
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.DataType">
            <summary>
            Type of data stored in item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.ConversionType">
            <summary>
            Type of conversion for the data values
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.ConversionUnit">
            <summary>
            Desired unit to convert to
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.SpatialAxis">
            <summary>
            Spatial axis of item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.ReferenceCoordinateX">
            <summary>
            Reference coordinate X
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.ReferenceCoordinateY">
            <summary>
            Reference coordinate Y
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.ReferenceCoordinateZ">
            <summary>
            Reference coordinate Z
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.OrientationAlpha">
            <summary>
            Orientation alpha
            <para>
            A rotation in the x-y plane, measured counter-clockwise.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.OrientationPhi">
            <summary>
            Orientation Phi
            <para>
            A rotation in the x-z plane, measured counter-clockwise.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.OrientationTheta">
            <summary>
            Orientation Theta
            <para>
            A rotation in the y-z plane, measured counter-clockwise.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.AxisConversionType">
            <summary>
            Type of conversion for the axis
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.AxisConversionUnit">
            <summary>
            Desired unit to convert axis to
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.ElementCount">
            <summary>
            Number of data elements in the axis.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase.UsedElementCount">
            <summary>
            Number of used data elements in the axis. For
            compressed files, this can differ from <see cref="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.ElementCount"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo">
            <summary>
            Information of a Dynamic item,
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsSimpleDynamicItemInfo">
            <summary>
            Interface that contains item information for dynamic items
            where you are not allowed to access/modify the spatial axis 
            and associated static items.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsSimpleDynamicItemInfo.ValueType">
            <summary>
            Type of value in item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo.AssociatedStaticItemNumbers">
            <summary>
            List of associated static item numbers.
            </summary>
            <remarks>
            You can not modify in the associated static numbers. This returns
            a read-only list.
            </remarks>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo.MaxValue">
            <summary>
            Maximum value of the item - stored in the statistics of the dfs file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo.MinValue">
            <summary>
            Minimum value of the item - stored in the statistics of the dfs file
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDynamicItemDecoratorBase.#ctor(DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsDynamicItemDecoratorBase.DynamicItemInfo">
            <summary>
            The <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/> that is decorated
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsDynamicItemDecoratorBase.ItemInfo">
            <summary>
            The <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/> that is decorated, as <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemInfo"/>,
            used by <see cref="T:DHI.Generic.MikeZero.DFS.DfsItemDecoratorBase"/>.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsDynamicItemDecoratorBase.ValueType">
            <summary>
            Type of value in item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsDynamicItemDecoratorBase.AssociatedStaticItemNumbers">
            <summary>
            List of associated static item numbers.
            </summary>
            <remarks>
            You can not modify in the associated static numbers. This returns
            a read-only list.
            </remarks>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsDynamicItemDecoratorBase.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsDynamicItemDecoratorBase.MinValue">
            <inheritdoc/>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnit.MyStaticItem">
            <summary>
            Private helper class that updates the <see cref="P:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnit.MyStaticItem.Quantity"/>
            of an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsStaticItem"/> to the base (SI) unit
            and converts the data to the base unit
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsStaticItemDecoratorBase">
            <summary>
            Class for decorating an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsStaticItem"/>. If used as is, it 
            returns exactly what the decorated <see cref="P:DHI.Generic.MikeZero.DFS.DfsStaticItemDecoratorBase.StaticItem"/> does.
            <para>
            All methods are implemented virtual. Hence you can override just one method, if
            just that is to be changed, and the remainder will work as always.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsStaticItemDecoratorBase.#ctor(DHI.Generic.MikeZero.DFS.IDfsStaticItem)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsStaticItemDecoratorBase.StaticItem">
            <summary>
            The <see cref="T:DHI.Generic.MikeZero.DFS.IDfsStaticItem"/> that is decorated
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsStaticItemDecoratorBase.ItemInfo">
            <summary>
            Specialized item info, returned as <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemInfo"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsStaticItemDecoratorBase.Data">
            <summary>
            Data. 
            <para>
            Can be cast to one of the basic array types, 
            depending on <see cref="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.DataType"/>
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnitManualExample">
            <summary>
            Converter class for converting item data to eum base unit (usually SI)
            <para>
            It converts as well static as dynamic items data.
            </para>
            <para>
            This is a typical example of the steps required to implement a converter.
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnitManualExample._dynamicItemNumbersToConvert">
            <summary>
            Set of item numbers of items that are converted.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnitManualExample.GetBaseUnit(DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Returns the base (SI) unit for the provided unit
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnitManualExample.Initialize(DHI.Generic.MikeZero.DFS.IDfsFile)">
            <summary>
            Initialise this data converter for working on the given <paramref name="dfsFile"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnitManualExample.Convert(DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo)">
            <summary>
            Convert the dynamic item information, <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnitManualExample.Convert(DHI.Generic.MikeZero.DFS.IDfsItemData)">
            <summary>
            Convert the dynamic item data, <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnitManualExample.Revert(System.Int32,System.Array)">
            <summary>
            Revert the dynamic item data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnitManualExample.Convert(DHI.Generic.MikeZero.DFS.IDfsStaticItem)">
            <summary>
            Convert a static item, including its data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnitManualExample.Revert(DHI.Generic.MikeZero.DFS.IDfsStaticItem@,System.Array@)">
            <summary>
            Revert the static item data.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnitManualExample.MyDynamicItemInfo">
            <summary>
            Private helper class that updates the <see cref="P:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnitManualExample.MyDynamicItemInfo.Quantity"/>
            of an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/> to the base (SI) unit
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnitManualExample.MyStaticItem">
            <summary>
            Private helper class that updates the <see cref="P:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToBaseUnitManualExample.MyStaticItem.Quantity"/>
            of an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsStaticItem"/> to the base (SI) unit
            and converts the data to the base unit
            </summary>
        </member>
        <member name="T:DHI.Generic.Cartography.MzCartography">
            <summary>
            A cartography object handles a map projection and a local grid 
            that can be translated and rotated compared to the projected
            coordinate system.
            <para>
            There are 3 levels of coordinates:
            Geographical coordinates (longitude, latitude) in degrees, 
            projection coordinates (easting, northing), and
            model/user grid coordinates (x,y).
            </para>
            <para>
            The <see cref="P:DHI.Generic.Cartography.MzCartography.ProjectionString"/> defines the mapping from geographical 
            coordinates to projection coordinates. See <see cref="T:DHI.Generic.Cartography.MzMapProjection"/>
            for details on the projection string.
            </para>
            <para>
            The <see cref="P:DHI.Generic.Cartography.MzCartography.LonOrigin"/>, <see cref="P:DHI.Generic.Cartography.MzCartography.LatOrigin"/> and 
            <see cref="P:DHI.Generic.Cartography.MzCartography.Orientation"/> defines the origin and the 
            orientation of the model grid coordinates. It defines how 
            the model grid coordinate system is translated and rotated,
            and is used to define a local coordinate system for e.g. 
            a 2D grid axis from a dfs2 file.
            </para>
            <para>
            See <see cref="P:DHI.Generic.Cartography.MzCartography.Orientation"/> for the definition of the orientation.
            The model coordinates are rotated around its origin.
            </para>
            <para>
            If <see cref="P:DHI.Generic.Cartography.MzCartography.Orientation"/> is zero, and <see cref="P:DHI.Generic.Cartography.MzCartography.LonOrigin"/> and <see cref="P:DHI.Generic.Cartography.MzCartography.LatOrigin"/>
            matches the origin of the projection coordinate system (from <see cref="M:DHI.Generic.Cartography.MzMapProjection.ProjectionOrigin(System.String,System.Double@,System.Double@)"/>), 
            then projection coordinates equals model grid coordinates. 
            Example: UTM-31 has projection origin at (lon,lat) = (3,0). 
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartography.#ctor(System.String)">
            <summary>
            Create and initialize a cartography object using the
            specified projection string.
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartography.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Create and initialize a cartography object using the
            specified projection string, setting the origin of the user
            defined model coordinates to the 
            <paramref name="lonOrigin"/>, <paramref name="latOrigin"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartography.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Create and initialize a cartography object using the
            specified projection string, setting the origin of the user
            defined model coordinates to the 
            <paramref name="lonOrigin"/>, <paramref name="latOrigin"/>, rotated
            <paramref name="orientation"/>.
            </summary>
            <param name="wktString">A string the the WKT format for a spatial reference system, or one of the abbreviations</param>
            <param name="lonOrigin">Longitude coordinate of the projection origin</param>
            <param name="latOrigin">Latitude coordinate of the projection origin</param>
            <param name="orientation">Orientation of the cartography class grid, rotation in degreesn clockwise from geographical north</param>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartography.Finalize">
            <summary>
            Release ressources on the unmanaged side when garbage collected.
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartography.Dispose">
            <summary>
            Release ressources on the unmanaged side.
            </summary>
            <remarks>
            The Dispose method must be private; The user should not be able 
            to call this method directly, since there can be a MapProjection 
            object out there that needs the unmanaged MzCartography class for 
            its work.
            </remarks>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartography.GetTrueNorth(System.Double,System.Double)">
            <summary>
            Returns the angle between true north and a line parallel to the 
            model grid passing through (x,y).
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartography.Geo2Proj(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from geographical coordinates to projection coordinates
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartography.Proj2Geo(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from projection coordinates to geographical coordinates 
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartography.Geo2Xy(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from geographical coordinates to model x-y coordinates
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartography.Xy2Geo(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from model x-y coordinates to geographical coordinates 
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartography.Proj2Xy(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from projetion coordinates to model x-y coordinates
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartography.Xy2Proj(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from model x-y coordinates to projection coordinates 
            </summary>
        </member>
        <member name="P:DHI.Generic.Cartography.MzCartography.Projection">
            <summary>
            Get the map projection that this cartography object uses.
            </summary>
        </member>
        <member name="P:DHI.Generic.Cartography.MzCartography.ProjectionName">
            <summary>
            The short name of a projection. 
            <para>
            The short name is not unique amongst all WKT projections
            </para>
            <para>
            If the <see cref="P:DHI.Generic.Cartography.MzCartography.ProjectionString"/> is not a WKT projection string, 
            the <see cref="P:DHI.Generic.Cartography.MzCartography.ProjectionString"/> itself is returned as the short name.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.Cartography.MzCartography.ProjectionString">
            <summary>
            Returns the WKT projection string, or one of the projection abbreviation strings.
            </summary>
        </member>
        <member name="P:DHI.Generic.Cartography.MzCartography.LonOrigin">
            <summary>
            Get the origin longitude coordinaet of the model grid coordinate system.
            </summary>
        </member>
        <member name="P:DHI.Generic.Cartography.MzCartography.LatOrigin">
            <summary>
            Get the origin latitude coordinaet of the model grid coordinate system.
            </summary>
        </member>
        <member name="P:DHI.Generic.Cartography.MzCartography.Orientation">
            <summary>
            Get the orientation of the model grid coordinate system. 
            <para>
            The orientation is the angle in degrees between true north and the coordinate 
            system y-axis in deg., measured positive clockwise.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.Cartography.MzCartography.ProjectionNorth">
            <summary>
            Returns the angle between projection north and a line parallel to the 
            model grid.
            <para>
            This is NOT the same as the <see cref="P:DHI.Generic.Cartography.MzCartography.Orientation"/>, the orientation
            is towards true north, this is towards projection north.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.Cartography.MzCartDLLWrapper">
            <summary>
            Abstract (static) class providing one-to-one access to the methods in 
            MzCart.dll, using C# calling conventions and marshalling. 
            </summary>
            <remarks>
            The class changes the following behavior compared to the MzCart.dll:
            - Methods with an error return code throws an exception on error
            - Methods with just one return argument now returns the value
            - Unmanaged arrays (strings) are Marshalled
            </remarks>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.CartSetupLinux(System.String,System.String)">
            <summary>
            Load the MzCartography data
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartCreate(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Create a new cartography class and return the pointer to it.
            <para>
            Remember to call <see cref="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartDestroy(System.IntPtr@)"/> on it in order to free
            ressources that it has allocated.
            </para>
            </summary>
            <param name="projstring">A string the the WKT format for a spatial reference system</param>
            <param name="lon">Longitude coordinate of the projection origin</param>
            <param name="lat">Latitude coordinate of the projection origin</param>
            <param name="ori">Orientation of the cartography class grid, rotation clockwise from geographical north</param>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartDestroy(System.IntPtr@)">
            <summary>
            Destroy the cartography object pointer to by the <paramref name="mzCartPointer"/>.
            <para>
            After this methods has been called, the <paramref name="mzCartPointer"/> will
            be set to <see cref="F:System.IntPtr.Zero"/>.
            </para>
            <para>
            The pointer must have been created by using the <see cref="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartCreate(System.String,System.Double,System.Double,System.Double)"/> method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartGetMapProjection(System.IntPtr)">
            <summary>
            <para>
            USE WITH CARE!
            </para>
            <para>
            Returns a pointer to the MzMapProjection that the cartography
            object uses.
            </para>
            <para>
            Note that the map projection object is deleted when the cartography object is.
            Hence, you should not call destroy on this pointer, and you should not
            use this pointer after destroy have been called on the cartography pointer.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartProjectionName(System.IntPtr)">
            <summary>
            Returns the name of the projection of the cartography object 
            pointed to by the <paramref name="mzCartPointer"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartProjectionString(System.IntPtr)">
            <summary>
            Returns the WKT projection string, or one of the projection abbreviation strings 
            of the cartography object pointed to by the <paramref name="mzCartPointer"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartProjectionNorth(System.IntPtr)">
            <summary>
            Return the angle between true north and a line parallel to the 
            model grid.
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartTrueNorth(System.IntPtr,System.Double,System.Double)">
            <summary>
            Returns the angle between true north and a line parallel to the 
            model grid passing through (x,y).
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartGeo2Proj(System.IntPtr,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from geographical coordinates to projection coordinates
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartProj2Geo(System.IntPtr,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from projection coordinates to geographical coordinates 
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartGeo2Xy(System.IntPtr,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from geographical coordinates to model x-y coordinates
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartXy2Geo(System.IntPtr,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from model x-y coordinates to geographical coordinates 
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartProj2Xy(System.IntPtr,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from projetion coordinates to model x-y coordinates
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartXy2Proj(System.IntPtr,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from model x-y coordinates to projection coordinates 
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzMapProjCreate(System.String)">
            <summary>
            Create a new cartography class and return the pointer to it.
            <para>
            Remember to call <see cref="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartDestroy(System.IntPtr@)"/> on it in order to free
            ressources that it has allocated.
            </para>
            </summary>
            <param name="projstring">A string the the WKT format for a spatial reference system</param>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzMapProjDestroy(System.IntPtr@)">
            <summary>
            Destroy the cartography object pointer to by the <paramref name="mzMapProjPointer"/>.
            <para>
            After this methods has been called, the <paramref name="mzMapProjPointer"/> will
            be set to <see cref="F:System.IntPtr.Zero"/>.
            </para>
            <para>
            The pointer must have been created by using the <see cref="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzCartCreate(System.String,System.Double,System.Double,System.Double)"/> method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzMapProjName(System.IntPtr)">
            <summary>
            Returns the name of the projection of the cartography object 
            pointed to by the <paramref name="mzMapProjPointer"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzMapProjProjectionString(System.IntPtr)">
            <summary>
            Returns the WKT projection string, or one of the projection abbreviation strings 
            of the cartography object pointed to by the <paramref name="mzMapProjPointer"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzMapProjGeo2Proj(System.IntPtr,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from geographical coordinates to projection coordinates
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzMapProjProj2Geo(System.IntPtr,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from projection coordinates to geographical coordinates 
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzMapProjGetOrigin(System.IntPtr,System.Double@,System.Double@)">
            <summary>
            Gets the geographical origin of the map projection
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzMapProjGetConvergence(System.IntPtr,System.Double,System.Double)">
            <summary>
            Gets the convergence (angle towards true north) at the given geographical location
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzMapProjGeo2Xyz(System.IntPtr,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from geographical coordinates to 3D coordinates
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.MzMapProjXyz2Geo(System.IntPtr,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from 3D coordinates to geographical coordinates 
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.IsValidUtmZone(System.String)">
            <summary>
            Returns true if the <paramref name="projString"/> is a valid UTM projection string
            </summary>
            <param name="projString">A string the the WKT format for a spatial reference system</param>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.IsValidProjection(System.String)">
            <summary>
            Returns true if the <paramref name="projString"/> is a valid projection string
            </summary>
            <param name="projString">A string the the WKT format for a spatial reference system</param>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.IsLonLatType(System.String)">
            <summary>
            Returns true of the <paramref name="projString"/> is a valid projection string
            </summary>
            <param name="projString">A string the the WKT format for a spatial reference system</param>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.S_LONGITUDETOUTMZONE(System.Double,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            The Return code <paramref name="rc"/> is (length of short name) if short_name buffer is too short.
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.Longitude2UtmZone(System.Double)">
            <summary>
            Get the UTM zone best matching the longitude coordinate
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.S_PROJECTIONSHORTNAME(System.String,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            The Return code <paramref name="rc"/> is (length of short name) if short_name buffer is too short.
            </summary>
            <param name="projString">A string the the WKT format for a spatial reference system</param>
            <param name="shortName">Stringbuffer to copy name to</param>
            <param name="maxLenShortName">Capacity of <paramref name="shortName"/> stringbuffer</param>
            <param name="rc">Return code</param>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.ProjectionShortName(System.String)">
            <summary>
            Get the short name out of a WKT projetion string. 
            <para>
            The short name is not unique amongst all WKT projections
            </para>
            <para>
            If the <paramref name="projString"/> is not a WKT projection string, 
            the <paramref name="projString"/> itself is returned as the short name.
            </para>
            </summary>
            <param name="projString">A string the the WKT format for a spatial reference system</param>
        </member>
        <member name="M:DHI.Generic.Cartography.MzCartDLLWrapper.ProjectionOrigin(System.String,System.Double@,System.Double@)">
            <summary>
            If the projection string is not a valid WKT string, an exception is thrown.
            </summary>
            <param name="projstring">A string the the WKT format for a spatial reference system</param>
            <param name="lon">Longitude coordinate of the projection origin</param>
            <param name="lat">Latitude coordinate of the projection origin</param>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsItemData">
            <summary>
            Data for one item and timestep. 
            <para>
            Depending on the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.DataType"/>
            this can be cast to a similar <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData`1"/>
            and the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Data"/> can be cast to its raw
            array data type.
            </para>
            </summary>
            <remarks>
            This interface is never/should not be implemented directly, use instead
            <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData`1"/>
            </remarks>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemData.ItemNumber">
            <summary>
            Number of item that data belongs to (one-based)
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemData.TimeStepIndex">
            <summary>
            Index of time step that data belongs to (zero-based)
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Time">
            <summary>
            Time relative to start of file. Unit is as specified in the temporal axis. 
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Data">
            <summary>
            Data in the file. The data can be cast to one of the basic array
            types, as for example int[], depending on <see cref="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.DataType"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsItemData`1">
            <summary>
            Data for one item and timestep. This is the generic extension 
            of <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData"/> 
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemData`1.Data">
            <summary>
            Data in the file in its basic type. 
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsItemData2D">
            <summary>
            Data for one item and timestep, wrapped with
            some 2D functionality.
            <para>
            The underlying data is still stored as a 1D array
            and returned by the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Data"/>
            </para>
            <para>
            Depending on the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.DataType"/>
            this can be cast to a similar <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData2D`1"/>
            and the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Data"/> can be cast to its raw
            array data type.
            </para>
            </summary>
            <remarks>
            This interface is never/should not be implemented directly, use instead
            <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData2D`1"/>.
            </remarks>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemData2D.Item(System.Int32,System.Int32)">
            <summary>
            Return data at the give x,y index
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsItemData2D`1">
            <summary>
            Data for one item and timestep, wrapped with
            some 2D functionality.
            <para>
            The underlying data is still stored as a 1D array
            and returned by the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData2D`1.Data"/>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsItemData2D`1.To2DArray">
            <summary>
            Copy data to a 2D array
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemData2D`1.Data">
            <summary>
            Return data as 1D array.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemData2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Return data at the give x,y index
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsItemData3D">
            <summary>
            Data for one item and timestep, wrapped with
            some 3D functionality.
            <para>
            The underlying data is still stored as a 1D array
            and returned by the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Data"/>
            </para>
            <para>
            Depending on the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.DataType"/>
            this can be cast to a similar <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData3D`1"/>
            and the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Data"/> can be cast to its raw
            array data type.
            </para>
            </summary>
            <remarks>
            This interface is never/should not be implemented directly, use instead
            <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData3D`1"/>.
            </remarks>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemData3D.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return data at the give x,y index
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsItemData3D`1">
            <summary>
            Data for one item and timestep, wrapped with
            some 3D functionality.
            <para>
            The underlying data is still stored as a 1D array
            and returned by the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData3D`1.Data"/>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsItemData3D`1.To3DArray">
            <summary>
            Copy data to a 3D array
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemData3D`1.Data">
            <summary>
            Return data as 1D array.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsItemData3D`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return data at the give x,y index
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs1Builder">
            <summary>
            Builder for building dfs2 files.
            /// <para>
            The builder works in two stages. The first stage all header information
            and information of the dynamic items are provided. In the second stage
            static items are added. Then a dfs file is ready, and data for the dynamic
            items can be added.
            </para>
            <para>
            To go from the first to the second stage by calling
            <see cref="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.CreateFile(System.String)"/>, which will actually create a file on the disc.
            </para>
            <para>
            To get the final file, call <see cref="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs1Builder.GetFile"/>.
            </para>
            <para>
            The following must be set during stage 1:
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs1Builder.SpatialAxis"/>,
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.TemporalAxis"/>,
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.DataType"/>,
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.Projection"/>.
            Furthermore at least one dynamic item must be added.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder">
            <summary>
            Common functionality for building dfs 1, 2 and 3 files.
            <para>
            Special for these files are that all their dynamic 
            and static items use the same spatial axis.
            </para>
            <para>
            The following must be set:
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.SpatialAxis"/>,
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.TemporalAxis"/>,
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.DataType"/>,
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.Projection"/>
            </para>
            <para>
            Use the <see cref="T:DHI.Generic.MikeZero.DFS.DfsFileFactory"/> to create classes for setting.
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder._spatialAxis">
            <summary>
            Spatial axis, common for all items.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder._xKey">
            <summary>
            Compression keys
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder._isSetSpatialAxis">
            <summary>
            Flag, specifying whether the spatial axis has been set.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder._builder">
            <summary>
            The underlying <see cref="T:DHI.Generic.MikeZero.DFS.DfsBuilder"/>
            used for actually building the file.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.CheckBuildStage1">
            <summary>
            Check whether the builder is in stage 1. If not, an exception is thrown
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.CheckBuildStage2">
            <summary>
            Check whether the builder is in stage 2. If not, an exception is thrown
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.SetDataType(System.Int32)">
            <summary>
            Set the data type. 
            <para>
            The data type tags the file as a special dfs file type.
            There exists no global system for maintaining these tag-variables. 
            The tag-variables should only be interpreted locally within one 
            model-complex e.g. MIKE 21. The application programmer can tag 
            bathymetries, result files, input files freely. 
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.SetGeographicalProjection(DHI.Generic.MikeZero.DFS.IDfsProjection)">
            <summary>
            Set the geographical projection and reference coordinates.
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.SetTemporalAxis(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)">
            <summary>
            Sets the temporal axis of the file.
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.SetSpatialAxis(DHI.Generic.MikeZero.DFS.IDfsSpatialAxis)">
            <summary>
            Get/Set the spatial axis of the file. This must be one of the
            allowed axis, depending on the file builder
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.SetEncodingKeys(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Sets the encoding key for compressing the dfs file.
            See  <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileInfo.GetEncodeKey(System.Int32[]@,System.Int32[]@,System.Int32[]@)"/> for the definition
            of the encode key values.
            <para>
            Compression is only supported when all dynamic items are of type float. 
            </para>
            <para>
            All dynamic items must have a size that is compatible with the encode key values, i.e,
            for all values in the key arrays:
            <code>
            xKey[i] &lt; xCount &amp;&amp; yKey[y] &lt; yCount &amp;&amp; zKey[i] &lt; zCount
            </code>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.AddDynamicItem(System.String,DHI.Generic.MikeZero.eumQuantity,DHI.Generic.MikeZero.DFS.DfsSimpleType,DHI.Generic.MikeZero.DFS.DataValueType)">
            <summary>
            Add a dynamic item to the file.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.AddCustomBlock(DHI.Generic.MikeZero.DFS.IDfsCustomBlock)">
            <summary>
            Add a custom block to the file.
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.Validate">
            <summary>
            Validate will return a string of issues from the item builder.
            When this returns an empty list, the item has been properly build.
            <para>
            This is a stage 1 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.Validate(System.Boolean)">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.Validate"/>
            </summary>
            <param name="dieOnError">If true, throws an exception in errors are found</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.CreateFile(System.String)">
            <summary>
            Creates a file on the disc. Moves to the second build stage
            </summary>
            <param name="filename">Name of the file, with or without path.</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.AddStaticItem(System.String,DHI.Generic.MikeZero.eumQuantity,System.Array)">
            <summary>
            Creates and adds a static item storing the <paramref name="arrayData"/>.
            <para>
            The size of the <paramref name="arrayData"/> must match the size of the
            spatial axis set in <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.SpatialAxis"/>
            </para>
            <para>
            This is a stage 2 method.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.GetDfsFile">
            <summary>
            Return the file as a <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs1File"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.FileTitle">
            <summary>
            Get/Set the title of the file.
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.ApplicationTitle">
            <summary>
            Get/Set the title of the application writing the file.
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.ApplicationVersion">
            <summary>
            Set the version number of the application writing the file.
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.DataType">
            <summary>
            Get/Set the data type. 
            <para>
            The data type tags the file as a special dfs file type.
            There exists no global system for maintaining these tag-variables. 
            The tag-variables should only be interpreted locally within one 
            model-complex e.g. MIKE 21. The application programmer can tag 
            bathymetries, result files, input files freely. 
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.DeleteValueFloat">
            <summary>
            Gets/sets the delete value of type float
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.DeleteValueDouble">
            <summary>
            Gets/sets the delete value of type double
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.DeleteValueByte">
            <summary>
            Gets/sets the delete value of type byte
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.DeleteValueInt">
            <summary>
            Gets/sets the delete value of type int
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.DeleteValueUnsignedInt">
            <summary>
            Gets/sets the delete value of type unsigned int
            <para>
            This is a stage 1 method. Setting in stage 2 has no effect.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.Projection">
            <summary>
            Get/Set the geographical projection and reference coordinates.
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.TemporalAxis">
            <summary>
            Sets the temporal axis of the file.
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.SpatialAxis">
            <summary>
            Get/Set the spatial axis of the file. This must be one of the
            allowed axis, depending on the file builder
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs1Builder.GetFile">
            <summary>
            Return the file as a <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs1File"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs1Builder.Create(System.String,System.String,System.Int32)">
            <summary>
            Create a new builder that will build a dfs2 file
            </summary>
            <param name="fileTitle">Title of the file</param>
            <param name="appTitle">Title of the application creating the file</param>
            <param name="appVersionNo">Version of the application creating the file</param>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs1Builder.SpatialAxis">
            <summary>
            Sets the spatial axis of the file. This must be one of the
            1D axes.
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAbstractSpatialAxis">
            <summary>
            Abstract class, common for many spatial axes, implementing <see cref="T:DHI.Generic.MikeZero.DFS.IDfsSpatialAxis"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsSpatialAxis">
            <summary>
            Basic "abstract" spatial axis description. Based on the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsSpatialAxis.AxisType"/>
            the class must implement the corresponding IDfsAxisXXX types.
            </summary>
            <remarks>
            A class should never implement this interface directly, always one of 
            the derived IDfsAxis iterfaces.
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsSpatialAxis.SizeOfDimension(System.Int32)">
            <summary>
            Size of data in the given dimension. 
            Return 1 if data dimension is less than argument dimension.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsSpatialAxis.AxisType">
            <summary>
            Type of spatial axis. Depending on this type, the class
            can be cast to one of the sub-types.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsSpatialAxis.Dimension">
            <summary>
            Axis dimension
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsSpatialAxis.SizeOfData">
            <summary>
            Size of data, number of data values.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsSpatialAxis.AxisUnit">
            <summary>
            Unit of the axis coordinate values.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractSpatialAxis.InvokeOnUpdate">
            <summary>
            Method that is invoked when ever the temporal axis is updated.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractSpatialAxis.SizeOfDimension(System.Int32)">
            <summary>
            Size of data in the given dimension. 
            Return 1 if data dimension is less than argument dimension.
            </summary>
        </member>
        <member name="E:DHI.Generic.MikeZero.DFS.DfsAbstractSpatialAxis.OnUpdate">
            <summary>
            Event that is triggered when a property of the axis is updated.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractSpatialAxis.AxisType">
            <summary>
            Type of spatial axis. Depending on this type, the class
            can be cast to one of the sub-types.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractSpatialAxis.Dimension">
            <summary>
            Axis dimension
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractSpatialAxis.SizeOfData">
            <summary>
            Size of data, number of data values.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractSpatialAxis.AxisUnit">
            <summary>
            Unit of the axis coordinate values.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAbstractSpatialAxis.UpdatedEventHandler">
            <summary>
            Delegate for hooking up to the event that is triggered when a property of the axis 
            is updated.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAxisEqD0">
            <summary>
            Class implementing the <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisEqD0"/>.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsAxisEqD0">
            <summary>
            Axis description of a 0-dimensional "equidistant" axis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAxisEqD0.SizeOfDimension(System.Int32)">
            <summary>
            Size of data in the given dimension. 
            Return 1 if data dimension is less than argument dimension.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD0.AxisType">
            <summary>
            Type of spatial axis. Always <see cref="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.EqD0"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD0.Dimension">
            <summary>
            Axis dimension
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD0.SizeOfData">
            <summary>
            Size of data, number of data values.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAxisEqD1">
            <summary>
            Class implementing the <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisEqD1"/>.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsAxisEqD1">
            <summary>
            Axis description of a 1-dimensional equidistant axis.
            <para>
             The user must know whether the data values are based
            on the coordinates (node values) or between coordinates
            (element values)
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisEqD1.XCount">
            <summary>
            Number of data points in the x direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisEqD1.X0">
            <summary>
            Relative offset to origin
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisEqD1.Dx">
            <summary>
            space between each gridpoint
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAxisEqD1.SizeOfDimension(System.Int32)">
            <summary>
            Size of data in the given dimension. 
            Return 1 if data dimension is less than argument dimension.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD1.AxisType">
            <summary>
            Type of spatial axis. Always <see cref="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.EqD1"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD1.Dimension">
            <summary>
            Axis dimension
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD1.SizeOfData">
            <summary>
            Size of data, number of data values.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD1.XCount">
            <summary>
            Number of data points in the x direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD1.X0">
            <summary>
            Relative offset to origin
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD1.Dx">
            <summary>
            space between each gridpoint
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAxisEqD2">
            <summary>
            Class implementing the <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisEqD2"/>.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsAxisEqD2">
            <summary>
            Axis description of a 2-dimensional equidistant structured grid.
            <para>
            The user must know whether the data values are based
            on the coordinates (node values) or between coordinates
            (element values)
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisEqD2.YCount">
            <summary>
            Number of data points in the y direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisEqD2.Y0">
            <summary>
            Relative offset to origin in the y direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisEqD2.Dy">
            <summary>
            Space between each gridpoint in the y direction
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAxisEqD2.SizeOfDimension(System.Int32)">
            <summary>
            Size of data in the given dimension. 
            Return 1 if data dimension is less than argument dimension.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD2.AxisType">
            <summary>
            Type of spatial axis. Always <see cref="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.EqD2"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD2.Dimension">
            <summary>
            Axis dimension
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD2.SizeOfData">
            <summary>
            Size of data, number of data values.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD2.XCount">
            <summary>
            Number of data points in the x direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD2.X0">
            <summary>
            Relative offset to origin
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD2.Dx">
            <summary>
            space between each gridpoint
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD2.YCount">
            <summary>
            Number of data points in the y direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD2.Y0">
            <summary>
            Relative offset to origin
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD2.Dy">
            <summary>
            Space between each gridpoint
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAxisEqD3">
            <summary>
            Class implementing the <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisEqD3"/>.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsAxisEqD3">
            <summary>
            Axis description of a 3-dimensional equidistant structured grid.
            <para>
            The user must know whether the data values are based
            on the coordinates (node values) or between coordinates
            (element values)
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisEqD3.ZCount">
            <summary>
            Number of data points in the z direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisEqD3.Z0">
            <summary>
            Relative offset to origin in the z direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisEqD3.Dz">
            <summary>
            Space between each gridpoint in the z direction
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAxisEqD3.SizeOfDimension(System.Int32)">
            <summary>
            Size of data in the given dimension. 
            Return 1 if data dimension is less than argument dimension.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD3.AxisType">
            <summary>
            Type of spatial axis. Always <see cref="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.EqD3"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD3.Dimension">
            <summary>
            Axis dimension
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD3.SizeOfData">
            <summary>
            Size of data, number of data values.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD3.XCount">
            <summary>
            Number of data points in the x direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD3.X0">
            <summary>
            Relative offset to origin
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD3.Dx">
            <summary>
            space between each gridpoint
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD3.YCount">
            <summary>
            Number of data points in the y direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD3.Y0">
            <summary>
            Relative offset to origin
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD3.Dy">
            <summary>
            Space between each gridpoint
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD3.ZCount">
            <summary>
            Number of data points in the z direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD3.Z0">
            <summary>
            Relative offset to origin
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD3.Dz">
            <summary>
            Space between each gridpoint
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAxisEqD4">
            <summary>
            Class implementing the <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisEqD4"/>.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsAxisEqD4">
            <summary>
            Axis description of a 4-dimensional equidistant structured grid
            <para>
            The user must know whether the data values are based
            on the coordinates (node values) or between coordinates
            (element values)
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisEqD4.FCount">
            <summary>
            Number of data points in the z direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisEqD4.F0">
            <summary>
            Relative offset to origin
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisEqD4.Df">
            <summary>
            Space between each gridpoint
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.SizeOfDimension(System.Int32)">
            <summary>
            Size of data in the given dimension. 
            Return 1 if data dimension is less than argument dimension.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.AxisType">
            <summary>
            Type of spatial axis. Always <see cref="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.EqD4"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.Dimension">
            <summary>
            Axis dimension
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.SizeOfData">
            <summary>
            Size of data, number of data values.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.XCount">
            <summary>
            Number of data points in the x direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.X0">
            <summary>
            Relative offset to origin
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.Dx">
            <summary>
            space between each gridpoint
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.YCount">
            <summary>
            Number of data points in the y direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.Y0">
            <summary>
            Relative offset to origin
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.Dy">
            <summary>
            Space between each gridpoint
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.ZCount">
            <summary>
            Number of data points in the z direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.Z0">
            <summary>
            Relative offset to origin
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.Dz">
            <summary>
            Space between each gridpoint
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.FCount">
            <summary>
            Number of data points in the z direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.F0">
            <summary>
            Relative offset to origin
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisEqD4.Df">
            <summary>
            Space between each gridpoint
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAxisNeqD1">
            <summary>
            Class implementing the <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisNeqD1"/>.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsAxisNeqD1">
            <summary>
            Axis description of a 1-dimensional non-equidistant curvelinear axis.
            <para>
            The number of coordinates is the same as the number of data values, i.e.
            each data value belongs on the coordinate (node values).
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisNeqD1.Coordinates">
            <summary>
            Coordinates of the axis.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAxisNeqD1.SizeOfDimension(System.Int32)">
            <summary>
            Size of data in the given dimension. 
            Return 1 if data dimension is less than argument dimension.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD1.AxisType">
            <summary>
            Type of spatial axis. Always <see cref="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.NeqD1"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD1.Dimension">
            <summary>
            Axis dimension
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD1.SizeOfData">
            <summary>
            Size of data, number of data values.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD1.Coordinates">
            <summary>
            Coordinates of the axis.
            <para>
            To update the coordinates, use the setter. The length of the new
            coordinate vector can not change.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAxisNeqD2">
            <summary>
            Class implementing the <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisNeqD2"/>.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsAxisNeqD2">
            <summary>
            Axis description of a 2-dimensional non-equidistant, orthogonal structured grid.
            <para>
            The number of coordinates in each dimension is one larger than the number of data values, i.e.
            datavalue[i,j] belongs within the element x[i]-x[i+1] and y[j]-y[j+1] (element values)
            </para>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisNeqD2.XCoordinates">
            <summary>
            X-coordinates in the axis.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisNeqD2.YCoordinates">
            <summary>
            Y-coordinates in the axis.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAxisNeqD2.SizeOfDimension(System.Int32)">
            <summary>
            Size of data in the given dimension. 
            Return 1 if data dimension is less than argument dimension.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD2.AxisType">
            <summary>
            Type of spatial axis. Always <see cref="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.NeqD2"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD2.Dimension">
            <summary>
            Axis dimension
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD2.SizeOfData">
            <summary>
            Size of data, number of data values.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD2.XCoordinates">
            <summary>
            X-coordinates in the axis.
            <para>
            To update the coordinates, use the setter. The length of the new
            coordinate vector can not change.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD2.YCoordinates">
            <summary>
            Y-coordinates in the axis.
            <para>
            To update the coordinates, use the setter. The length of the new
            coordinate vector can not change.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAxisNeqD3">
            <summary>
            Class implementing the <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisNeqD3"/>.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsAxisNeqD3">
            <summary>
            Axis description of a 3-dimensional non-equidistant, orthogonal structured grid.
            <para>
            The number of coordinates in each dimension is one larger than the number of data values, i.e.
            datavalue[i,j,k] belongs within the element x[i]-x[i+1], y[j]-y[j+1], z[k]-z[k+1] (element values)
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisNeqD3.XCoordinates">
            <summary>
            X-coordinates in the axis.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisNeqD3.YCoordinates">
            <summary>
            Y-coordinates in the axis.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisNeqD3.ZCoordinates">
            <summary>
            Z-coordinates in the axis.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAxisNeqD3.SizeOfDimension(System.Int32)">
            <summary>
            Size of data in the given dimension. 
            Return 1 if data dimension is less than argument dimension.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD3.AxisType">
            <summary>
            Type of spatial axis. Always <see cref="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.NeqD3"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD3.Dimension">
            <summary>
            Axis dimension
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD3.SizeOfData">
            <summary>
            Size of data, number of data values.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD3.XCoordinates">
            <summary>
            X-coordinates in the axis.
            <para>
            To update the coordinates, use the setter. The length of the new
            coordinate vector can not change.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD3.YCoordinates">
            <summary>
            Y-coordinates in the axis.
            <para>
            To update the coordinates, use the setter. The length of the new
            coordinate vector can not change.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisNeqD3.ZCoordinates">
            <summary>
            Y-coordinates in the axis.
            <para>
            To update the coordinates, use the setter. The length of the new
            coordinate vector can not change.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD2">
            <summary>
            Class implementing the <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2"/>.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2">
            <summary>
            Axis description of a 2-dimensional curvelinear structured grid.
            <para>
            The number of coordinates in each dimension is one larger than the number of data values, i.e.
            datavalue[i,j] belongs within the element xy(i,j)-xy(i,j+1)-xy(i+1,j)-xy(i+1,j+1) (element values)
            </para>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2.XCount">
            <summary>
            Number of data points in the x direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2.YCount">
            <summary>
            Number of data points in the Y direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2.XCoordinates">
            <summary>
            X coordinates of the grid. 
            <para>
            It is of size (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2.XCount"/>+1) X (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2.YCount"/>+1).
            </para>
            <para>
            To get coordinates at index (i,j), you can do:
            <code>
            XCoordinates[i + j*(<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2.XCount"/>+1)]
            </code>
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2.YCoordinates">
            <summary>
            Y coordinates of the grid. 
            <para>
            It is of size (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2.XCount"/>+1) X (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2.YCount"/>+1).
            </para>
            <para>
            To get coordinates at index (i,j), you can do:
            <code>
            YCoordinates[i + j*(<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2.XCount"/>+1)]
            </code>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD2.SizeOfDimension(System.Int32)">
            <summary>
            Size of data in the given dimension. 
            Return 1 if data dimension is less than argument dimension.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD2.AxisType">
            <summary>
            Type of spatial axis. Always <see cref="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.CurveLinearD2"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD2.Dimension">
            <summary>
            Axis dimension
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD2.SizeOfData">
            <summary>
            Size of data, number of data values.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD2.XCoordinates">
            <summary>
            X-coordinates in the axis.
            <para>
            To update the coordinates, use the setter. The length of the new
            coordinate vector can not change.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD2.YCoordinates">
            <summary>
            Y-coordinates in the axis.
            <para>
            To update the coordinates, use the setter. The length of the new
            coordinate vector can not change.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD3">
            <summary>
            Class implementing the <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3"/>.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3">
            <summary>
            Axis description of a 3-dimensional curvelinear structured grid.
            <para>
            The number of coordinates in each dimension is one larger than the number of data values, i.e.
            datavalue[i,j,k] belongs within the cubic element with corners xyz(i,j,k)-xy(i+1,j+1,k+1) (element values)
            </para>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.XCount">
            <summary>
            Number of data points in the x direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.YCount">
            <summary>
            Number of data points in the Y direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.ZCount">
            <summary>
            Number of data points in the Z direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.XCoordinates">
            <summary>
            X coordinates of the grid. 
            <para>
            It is of size (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.XCount"/>+1) X (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.YCount"/>+1) X (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.ZCount"/>+1).
            </para>
            <para>
            To get coordinates at index (i,j,k), you can do:
            <code>
            XCoordinates[i + j*(<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.XCount"/>+1) + k*(<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.XCount"/>+1)*(<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.YCount"/>+1)]
            </code>
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.YCoordinates">
            <summary>
            Y coordinates of the grid. 
            <para>
            It is of size (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.XCount"/>+1) X (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.YCount"/>+1) X (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.ZCount"/>+1).
            </para>
            <para>
            To get coordinates at index (i,j,k), you can do:
            <code>
            YCoordinates[i + j*(<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.XCount"/>+1) + k*(<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.XCount"/>+1)*(<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.YCount"/>+1)]
            </code>
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.ZCoordinates">
            <summary>
            Z coordinates of the grid. 
            <para>
            It is of size (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.XCount"/>+1) X (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.YCount"/>+1) X (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.ZCount"/>+1).
            </para>
            <para>
            To get coordinates at index (i,j,k), you can do:
            <code>
            ZCoordinates[i + j*(<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.XCount"/>+1) + k*(<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.XCount"/>+1)*(<see cref="P:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD3.YCount"/>+1)]
            </code>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD3.SizeOfDimension(System.Int32)">
            <summary>
            Size of data in the given dimension. 
            Return 1 if data dimension is less than argument dimension.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD3.AxisType">
            <summary>
            Type of spatial axis. Always <see cref="F:DHI.Generic.MikeZero.DFS.SpaceAxisType.CurveLinearD3"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD3.Dimension">
            <summary>
            Axis dimension
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD3.SizeOfData">
            <summary>
            Size of data, number of data values.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD3.XCount">
            <summary>
            Number of data points in the X direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD3.YCount">
            <summary>
            Number of data points in the Y direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD3.ZCount">
            <summary>
            Number of data points in the Z direction
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD3.XCoordinates">
            <summary>
            X-coordinates in the axis.
            <para>
            To update the coordinates, use the setter. The length of the new
            coordinate vector can not change.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD3.YCoordinates">
            <summary>
            Y-coordinates in the axis.
            <para>
            To update the coordinates, use the setter. The length of the new
            coordinate vector can not change.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAxisCurveLinearD3.ZCoordinates">
            <summary>
            Z-coordinates in the axis.
            <para>
            To update the coordinates, use the setter. The length of the new
            coordinate vector can not change.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfsu.DfsuFileType">
            <summary>
            Type of dfsu file.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.dfsu.DfsuFileType.Dfsu2D">
            <summary>
            2D area series
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.dfsu.DfsuFileType.DfsuVerticalColumn">
            <summary>
            1D vertical column
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.dfsu.DfsuFileType.DfsuVerticalProfileSigma">
            <summary>
            2D vertical slice through a <see cref="F:DHI.Generic.MikeZero.DFS.dfsu.DfsuFileType.Dfsu3DSigma"/>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.dfsu.DfsuFileType.DfsuVerticalProfileSigmaZ">
            <summary>
            2D vertical slice through a <see cref="F:DHI.Generic.MikeZero.DFS.dfsu.DfsuFileType.Dfsu3DSigmaZ"/>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.dfsu.DfsuFileType.Dfsu3DSigma">
            <summary>
            3D file with sigma coordinates, i.e., a constant number of layers.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.dfsu.DfsuFileType.Dfsu3DSigmaZ">
            <summary>
            3D file with sigma and Z coordinates, i.e. a varying number of layers.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile">
            <summary>
            Class for exposing data from a dfsu file. 
            <para>
            Use the <see cref="T:DHI.Generic.MikeZero.DFS.DfsFileFactory"/> to open an existing dfsu file.
            </para>
            <para>
            Use the <see cref="T:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder"/> to create a new dfsu file.
            </para>
            <para>
            You can read, write and append item-timesteps to the file. 
            </para>
            <para>
            The geometry can be altered, by moving the nodes, but the element connectivity can not be changed.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.#ctor(DHI.Generic.MikeZero.DFS.IDfsFile)">
            <summary>
            Wrap a dfs file in the <see cref="T:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile"/> object.
            <para>
            It will throw an exception if file is not a dfsu file.
            </para>
            </summary>
            <param name="dfsFile"></param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.Dispose">
            <summary>
            Close file and release ressources on the unmanaged side.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.ReadItemTimeStepNext">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStepNext"/> for details
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.ReadItemTimeStep(System.Int32,System.Int32)">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(System.Int32,System.Int32)"/> for details
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData,System.Int32)">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData,System.Int32)"/> for details
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.WriteItemTimeStep(System.Int32,System.Int32,System.Double,System.Array)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.WriteItemTimeStepNext(System.Double,System.Array)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.FindItem(System.Int32,System.Int32)">
            <summary>
            Positions the file pointer at the location in the file where the 
            specified dynamic item at the specified time step starts.
            </summary>
            <param name="itemNumber">Number of item to find (1-based)</param>
            <param name="timestepIndex">Index of time step to find (0-based)</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.FindTimeStep(System.Int32)">
            <summary>
            Positions the file pointer at the location in the file where the 
            specified time step starts.
            </summary>
            <param name="timestepIndex">Index of time step to find (0-based)</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.Reset">
            <summary>
            Resets the file pointer to point on the first dynamic item time step in the file.
            <para>
            Can also be used if it is required to restart reading the static items.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.Flush">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.Flush"/> for details
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.Close">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.Close"/> for details
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.Open(System.String)">
            <summary>
            Open a dfsu file for reading
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.OpenEdit(System.String)">
            <summary>
            Open a dfsu file for editing. File pointer is pointing to the start of the file data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.OpenAppend(System.String)">
            <summary>
            Open a dfsu file for appending/editing. File pointer is pointing to the end of the file data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.#ctor(DHI.Generic.MikeZero.DFS.IDfsFile,DHI.Generic.MikeZero.DFS.IDfsStaticItem,DHI.Generic.MikeZero.DFS.IDfsStaticItem,DHI.Generic.MikeZero.DFS.IDfsStaticItem,DHI.Generic.MikeZero.DFS.IDfsStaticItem,DHI.Generic.MikeZero.DFS.IDfsStaticItem,DHI.Generic.MikeZero.DFS.IDfsStaticItem,System.Int32[],System.Double[],System.Double[],System.Single[],System.Int32[],System.Int32[],System.Int32[],System.Int32[][],DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Internal factory method, used by the <see cref="T:DHI.Generic.MikeZero.DFS.dfsu.DfsuBuilder"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.FileName">
            <summary>
            Name of file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.DfsuFileType">
            <summary>
            Type of dfsu file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.NumberOfLayers">
            <summary>
            For files with a vertical dimension, returns the maximum number of layers.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.NumberOfSigmaLayers">
            <summary>
            For files with a vertical dimension, returns the number of sigma layers.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.FileTitle">
            <summary>
            Title of file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.ApplicationTitle">
            <summary>
            Title of application creating the file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.ApplicationVersion">
            <summary>
            Version number of appliation creating the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.Projection">
            <summary>
            Geographical projection.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.StartDateTime">
            <summary>
            Start date time of the file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.TimeStepInSeconds">
            <summary>
            time step in seconds.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.NumberOfTimeSteps">
            <summary>
            Number of time steps in the file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.DeleteValueFloat">
            <summary>
            Delete (undefined/missing) value
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.NumberOfNodes">
            <summary>
            Number of nodes in the mesh.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.NumberOfElements">
            <summary>
            Number of elements in the mesh.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.NodeIds">
            <summary>
            Id for each node. Usually starts from 1 and increases, but needs not to.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.X">
            <summary>
            X coordinates of nodes
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.Y">
            <summary>
            Y coordinates of nodes
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.Z">
            <summary>
            Z coordinates of nodes
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.ZUnit">
            <summary>
            Unit of the z coordinate. The unit
            must be a length unit (convertable to meters).
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.Code">
            <summary>
            Boundary code of node. 0 means not a boundary node.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.ElementIds">
            <summary>
            Id for each element. Usually starts from 1 and increases, but needs not to.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.ElementType">
            <summary>
            Type of element.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.ElementTable">
            <summary>
            The <see cref="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.ElementTable"/> defines for each element which 
            nodes that defines the element. 
            <para>
            The numbers in the <see cref="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.ElementTable"/> are node numbers, not indices!
            Each value in the table are between 1 and number-of-nodes.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile.ItemInfo">
            <summary>
            List of dynamic item info.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfsu.DfsuDynamicItemInfo">
            <summary>
            Dynamic item info for a dfsu file
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuDynamicItemInfo.SetUnitConversion(DHI.Generic.MikeZero.DFS.UnitConversionType,DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Sets the unit conversion for a specific item. 
            </summary>
            <param name="conversionType">Type of conversion</param>
            <param name="conversionUnit">Returns the desired unit to convert to</param>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuDynamicItemInfo.ItemNumber">
            <summary>
            Number of item in the file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuDynamicItemInfo.Name">
            <summary>
            Name of item
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuDynamicItemInfo.Quantity">
            <summary>
            Quantity of item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuDynamicItemInfo.DataType">
            <summary>
            Type of data stored in item. For a dfsu file
            this is always <see cref="F:DHI.Generic.MikeZero.DFS.DfsSimpleType.Float"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuDynamicItemInfo.ElementCount">
            <summary>
            Number of data elements in the item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuDynamicItemInfo.ValueType">
            <summary>
            Type of value in item. For a dfsu file
            this is always <see cref="F:DHI.Generic.MikeZero.DFS.DataValueType.Instantaneous"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuDynamicItemInfo.ConversionType">
            <summary>
            Type of conversion for the data values
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfsu.DfsuDynamicItemInfo.ConversionUnit">
            <summary>
            Desired unit to convert to
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsSimpleItemInfo">
            <summary>
            Basic/simple item info used by builders when creating new files.
            </summary>
            <remarks>
            Could also be used when opening in read mode, where data is 
            not editable, but that is currently not the case.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsDynamicItemBuilder">
            <summary>
            Builder to configure an existing dynamic item structure.
            <para>
            The following functions must be set:
            <see cref="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.Set(System.String,DHI.Generic.MikeZero.eumQuantity,DHI.Generic.MikeZero.DFS.DfsSimpleType)"/>,
            <see cref="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.SetAxis(DHI.Generic.MikeZero.DFS.IDfsSpatialAxis)"/>, 
            <see cref="M:DHI.Generic.MikeZero.DFS.DfsDynamicItemBuilder.SetValueType(DHI.Generic.MikeZero.DFS.DataValueType)"/>.
            </para>
            </summary>
            <remarks>
            This configures an existing dynamic item that has not yet been
            written to file, i.e., length of strings can be changed.
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDynamicItemBuilder.SetValueType(DHI.Generic.MikeZero.DFS.DataValueType)">
            <summary>
            Sets the time value type for the item.
            <para>
            This must be set.
            </para>
            </summary>
            <param name="valueType"></param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDynamicItemBuilder.SetAssociatedStaticItem(System.Int32)">
            <summary>
            Associate a static item with this dynamic item.
            </summary>
            <param name="staticItemNumber">Static item number, one-based</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDynamicItemBuilder.Validate">
            <summary>
            Validate will return a string of issues from the item builder.
            When this returns an empty list, the item has been properly build.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDynamicItemBuilder.GetDynamicItemInfo">
            <summary>
            Gets the newly created dynamic item info
            <para>
            It does call <see cref="M:DHI.Generic.MikeZero.DFS.DfsDynamicItemBuilder.Validate"/>, and if validate returns any issues,
            this method will throw an exception.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Converters.DfsConvertFloatToDouble">
            <summary>
            Converter class for converting item data from floats to doubles.
            <para>
            It converts as well static as dynamic items and data.
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.Converters.DfsConvertFloatToDouble._dynamicItemNumbersToConvert">
            <summary>
            Set of item numbers of items that are converted.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertFloatToDouble.Initialize(DHI.Generic.MikeZero.DFS.IDfsFile)">
            <summary>
            Initialise this data converter for working on the given <paramref name="dfsFile"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertFloatToDouble.Convert(DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo)">
            <summary>
            Convert the dynamic item information, <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertFloatToDouble.Convert(DHI.Generic.MikeZero.DFS.IDfsItemData)">
            <summary>
            Convert the dynamic item data, <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertFloatToDouble.Revert(System.Int32,System.Array)">
            <summary>
            Revert the dynamic item data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertFloatToDouble.Convert(DHI.Generic.MikeZero.DFS.IDfsStaticItem)">
            <summary>
            Convert a static item, including its data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertFloatToDouble.Revert(DHI.Generic.MikeZero.DFS.IDfsStaticItem@,System.Array@)">
            <summary>
            Revert the static item data.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Converters.DfsConvertFloatToDouble.MyDynamicItemInfo">
            <summary>
            Private helper class that updates the <see cref="P:DHI.Generic.MikeZero.DFS.Converters.DfsConvertFloatToDouble.MyDynamicItemInfo.DataType"/>
            of an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/> to <see cref="F:DHI.Generic.MikeZero.DFS.DfsSimpleType.Double"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Converters.DfsConvertFloatToDouble.MyStaticItem">
            <summary>
            Private helper class that updates the <see cref="P:DHI.Generic.MikeZero.DFS.Converters.DfsConvertFloatToDouble.MyStaticItem.DataType"/>
            of an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsStaticItem"/> to <see cref="F:DHI.Generic.MikeZero.DFS.DfsSimpleType.Double"/>
            and converts the data from float to double
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs3File">
            <summary>
            Dfs3 file class
            <para>
            Use the <see cref="T:DHI.Generic.MikeZero.DFS.DfsFileFactory"/> to open an existing dfs3 file.
            </para>
            <para>
            Use the <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs3Builder"/> to create a new dfs3 file.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.IDfs3File">
            <summary>
            Interface for a dfs3 file
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs3File.ReadItemTimeStepNext">
            <summary>
            For details, see <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStepNext"/>. 
            This version returns a <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData3D"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs3File.ReadItemTimeStep(System.Int32,System.Int32)">
            <summary>
            For details, see <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(System.Int32,System.Int32)"/>. 
            This version returns a <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData3D"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.IDfs3File.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData3D,System.Int32)">
            <summary>
            For details, see <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData,System.Int32)"/>. 
            This version works on a <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData3D"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs3File.ReadStaticItemNext">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.ReadStaticItemNext"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs3File.ReadStaticItem(System.Int32)">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.ReadStaticItem(System.Int32)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs3File.WriteStaticItemData(DHI.Generic.MikeZero.DFS.IDfsStaticItem,System.Array)">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.WriteStaticItemData(DHI.Generic.MikeZero.DFS.IDfsStaticItem,System.Array)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs3File.ReadItemTimeStepNext">
            <summary>
            For details, see <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStepNext"/>. 
            This version returns a <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData2D"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs3File.ReadItemTimeStep(System.Int32,System.Int32)">
            <summary>
            For details, see <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(System.Int32,System.Int32)"/>. 
            This version returns a <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData2D"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs3File.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData3D,System.Int32)">
            <summary>
            For details, see <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData,System.Int32)"/>. 
            This version works on a <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData2D"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs3File.ConvertItemData3D(DHI.Generic.MikeZero.DFS.IDfsItemData,DHI.Generic.MikeZero.DFS.IDfsSimpleDynamicItemInfo)">
            <summary>
            Converts from <see cref="T:DHI.Generic.MikeZero.DFS.DfsItemData`1"/> to <see cref="T:DHI.Generic.MikeZero.DFS.DfsItemData2D`1"/>,
            assuming that dimensions match (no checks are being made)
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Util">
            <summary>
            Utility and extension methods for <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs2File"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Util.CreateEmptyItemData(DHI.Generic.MikeZero.DFS.dfs123.IDfs2File,System.Int32)">
            <summary>
            Create an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData2D`1"/> of the correct type for the
            item with the given <paramref name="itemNumber"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Util.ReadFloatTimeSeriesByPoint(DHI.Generic.MikeZero.DFS.dfs123.Dfs2File,System.Int32,System.Int32)">
            <summary>
            This method will read all items and timesteps and return the values on 
            the <paramref name="xIndex"/>,<paramref name="yIndex"/> in the grid
            as time series.
            <para>
            first dimension is time, second is items.
            </para>
            <para>
            This method will fail if not all items are of type float.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Util.GenerateMinItemData(DHI.Generic.MikeZero.DFS.dfs123.Dfs2File,System.Int32)">
            <summary>
            Reads all timesteps of a dfs2 file item and returns one item data with
            the minimum value over time.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Util.GenerateMaxItemData(DHI.Generic.MikeZero.DFS.dfs123.Dfs2File,System.Int32)">
            <summary>
            Reads all timesteps of a dfs2 file item and returns one item data with
            the maximum value over time.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsDLLWrapper">
            <summary>
            Static class providing one-to-one access to the ufs.dll, using C# calling conventions
            and marshalling. 
            
            Compared to the <see cref="T:DHI.Generic.MikeZero.DFS.DfsDLLAccess"/> class the following has changed:
            - Methods with an error return code now throws an exception on error
            - Methods with just one return argument now returns the value
            - Methods working with enum arguments/returns use these enums instead of int's
            - Unmanaged arrays (strings) are Marshalled
            
            <para>
            With any <code>ref IntPtr</code> argument, which are all return arguments, null can 
            be used and the argument is ignored.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.CheckEOF(System.Int32)">
            <summary>
            Check if the return code is ok or end-of-file
            </summary>
            <returns>true on ok, false on EOF</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsDebugOn(System.Boolean)">
            <summary>
            wrapped dfsDebugOn
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsHeaderCreate(DHI.Generic.MikeZero.DFS.FileType,System.String,System.String,System.Int32,System.Int32,DHI.Generic.MikeZero.DFS.StatType)">
            <summary>
            wrapped dfsHeaderCreate
            </summary>
            <returns>Pointer to header structure</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsHeaderDestroy(System.IntPtr@)">
            <summary>
            wrapped dfsHeaderDestroy
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetEncodeKey(System.IntPtr,System.Int32[],System.Int32[],System.Int32[],System.Int32)">
            <summary>
            wrapped dfsSetEncodeKey
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetEncodeKey(System.IntPtr,System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Wrapped dfsGetEncodeKey
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetEncodeKeySize(System.IntPtr)">
            <summary>
            wrapped dfsGetEncodeKeySize
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsIsFileCompressed(System.IntPtr)">
            <summary>
            wrapped dfsIsFileCompressed
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsEnablePlugin(System.IntPtr,System.IntPtr)">
            <summary>
            Wrapped dfsEnablePlugin
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsUnloadPlugin(System.IntPtr)">
            <summary>
            Wrapped dfsUnloadPlugin
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsParamModifyTimes(System.IntPtr,System.Boolean)">
            <summary>
            wrapped dfsParamModifyTimes
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsFileRead(System.String,System.IntPtr@,System.IntPtr@)">
            <summary>
            wrapped dfsFileRead
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsFileCreate(System.String,System.IntPtr,System.IntPtr@)">
            <summary>
            wrapped dfsFileCreate
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsFileAppend(System.String,System.IntPtr@,System.IntPtr@)">
            <summary>
            wrapped dfsFileAppend
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsFileEdit(System.String,System.IntPtr@,System.IntPtr@)">
            <summary>
            wrapped dfsFileEdit
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsFileFlush(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsFileFlush
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsFileClose(System.IntPtr,System.IntPtr@)">
            <summary>
            wrapped dfsFileClose
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteStartBlockDynamic(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsWriteStartBlockDynamic
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetAppTitle(System.IntPtr)">
            <summary>
            wrapped dfsGetAppTitle
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetAppTitle(System.IntPtr,System.String)">
            <summary>
            wrapped dfsSetAppTitle
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetAppVersionNo(System.IntPtr)">
            <summary>
            wrapped dfsGetAppVersionNo
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetAppVersionNo(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsSetAppVersionNo
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetFileTitle(System.IntPtr)">
            <summary>
            wrapped dfsGetFileTitle
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetFileTitle(System.IntPtr,System.String)">
            <summary>
            wrapped dfsSetFileTitle
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetFileType(System.IntPtr)">
            <summary>
            wrapped dfsGetFileType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetVersionCurrent">
            <summary>
            wrapped dfsGetVersionCurrent
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetDataType(System.IntPtr)">
            <summary>
            wrapped dfsGetDataType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetDataType(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsSetDataType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetDeleteValByte(System.IntPtr)">
            <summary>
            wrapped dfsGetDeleteValByte
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetDeleteValDouble(System.IntPtr)">
            <summary>
            wrapped dfsGetDeleteValDouble
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetDeleteValFloat(System.IntPtr)">
            <summary>
            wrapped dfsGetDeleteValFloat
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetDeleteValInt(System.IntPtr)">
            <summary>
            wrapped dfsGetDeleteValInt
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetDeleteValUnsignedInt(System.IntPtr)">
            <summary>
            wrapped dfsGetDeleteValUnsignedInt
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetDeleteValByte(System.IntPtr,System.Byte)">
            <summary>
            wrapped dfsSetDeleteValByte
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetDeleteValDouble(System.IntPtr,System.Double)">
            <summary>
            wrapped dfsSetDeleteValDouble
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetDeleteValFloat(System.IntPtr,System.Single)">
            <summary>
            wrapped dfsSetDeleteValFloat
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetDeleteValInt(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsSetDeleteValInt
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetDeleteValUnsignedInt(System.IntPtr,System.UInt32)">
            <summary>
            wrapped dfsSetDeleteValUnsignedInt
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetGeoInfoType(System.IntPtr)">
            <summary>
            wrapped dfsGetGeoInfoType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetGeoInfoUTMProj(System.IntPtr,System.String@,System.Double@,System.Double@,System.Double@)">
            <summary>
            wrapped dfsGetGeoInfoUTMProj
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsUpdateGeoInfoUTMProj(System.IntPtr,System.String,System.Double,System.Double,System.Double)">
            <summary>
            wrapped dfsUpdateGeoInfoUTMProj
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetGeoInfoUTMProj(System.IntPtr,System.String,System.Double,System.Double,System.Double)">
            <summary>
            wrapped dfsSetGeoInfoUTMProj
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetGeoInfoUndefined(System.IntPtr)">
            <summary>
            wrapped dfsSetGeoInfoUndefined
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetTimeAxisType(System.IntPtr)">
            <summary>
            wrapped dfsGetTimeAxisType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetEqTimeAxis(System.IntPtr,System.Int32@,System.String@,System.Double@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetEqTimeAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetNeqTimeAxis(System.IntPtr,System.Int32@,System.String@,System.Double@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetNeqTimeAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetEqTimeAxis(System.IntPtr,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            wrapped dfsSetEqTimeAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetNeqTimeAxis(System.IntPtr,System.Int32,System.Double,System.Int32)">
            <summary>
            wrapped dfsSetNeqTimeAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetEqCalendarAxis(System.IntPtr,System.String@,System.String@,System.Int32@,System.String@,System.Double@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetEqCaledendarAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetNeqCalendarAxis(System.IntPtr,System.String@,System.String@,System.Int32@,System.String@,System.Double@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetNeqCalendarAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetEqCalendarAxis(System.IntPtr,System.String,System.String,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            wrapped dfsSetEqCalendarAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetNeqCalendarAxis(System.IntPtr,System.String,System.String,System.Int32,System.Double,System.Int32)">
            <summary>
            wrapped dfsSetNeqCalendarAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsItemD(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsItemD (pointer to dynamic item)
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsItemS(System.IntPtr)">
            <summary>
            wrapped dfsItemS (pointer to static item)
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetNoOfItems(System.IntPtr)">
            <summary>
            wrapped dfsGetNoOfItems
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemInfo_(System.IntPtr,System.Int32@,System.String@,System.String@,DHI.Generic.MikeZero.DFS.DfsSimpleType@)">
            <summary>
            wrapped dfsGetItemInfo_
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemInfo_(System.IntPtr,System.IntPtr,System.Int32,System.String,System.String,DHI.Generic.MikeZero.DFS.DfsSimpleType)">
            <summary>
            wrapped dfsSetItemInfo_
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemUnitConversion(System.IntPtr,DHI.Generic.MikeZero.DFS.UnitConversionType,DHI.Generic.MikeZero.eumUnit)">
            <summary>
            wrapped dfsSetItemUnitConversion
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisUnitConversion(System.IntPtr,DHI.Generic.MikeZero.DFS.UnitConversionType,DHI.Generic.MikeZero.eumUnit)">
            <summary>
            wrapped dfsSetTimeAxisUnitConversion
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemUnitConversion(System.IntPtr,DHI.Generic.MikeZero.DFS.UnitConversionType@,DHI.Generic.MikeZero.eumUnit@)">
            <summary>
            wrapped dfsGetItemUnitConversion
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisUnitConversion(System.IntPtr,DHI.Generic.MikeZero.DFS.UnitConversionType@,DHI.Generic.MikeZero.eumUnit@)">
            <summary>
            wrapped dfsGetItemAxisUnitConversion
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemValueType(System.IntPtr)">
            <summary>
            wrapped dfsGetItemValueType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemValueType(System.IntPtr,DHI.Generic.MikeZero.DFS.DataValueType)">
            <summary>
            wrapped dfsSetItemValueType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemInfo(System.IntPtr,System.Int32@,System.String@,System.String@,System.Int32@,System.String@,DHI.Generic.MikeZero.DFS.DfsSimpleType@)">
            <summary>
            wrapped dfsGetItemInfo
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemInfo(System.IntPtr,System.IntPtr,System.Int32,System.String,System.Int32,DHI.Generic.MikeZero.DFS.DfsSimpleType)">
            <summary>
            wrapped dfsSetItemInfo
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsUpdateItemInfo(System.IntPtr,System.IntPtr,System.Int32,System.String,System.Int32)">
            <summary>
            wrapped dfsUpdateItemInfo
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsRqItemUnit_(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsRqItemUnit_ (Numeric unit id)
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetNoAssocStatic(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsGetNoAssocStatic
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetAssocStatic(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            wrapped dfsGetAssocStatic
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetAssocStatic(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            wrapped dfsSetAssocStatic
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemElements(System.IntPtr)">
            <summary>
            wrapped dfsGetItemElements
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetUsedItemElements(System.IntPtr)">
            <summary>
            wrapped dfsGetUsedItemElements
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemXYZSize(System.IntPtr)">
            <summary>
            wrapped dfsGetItemXYZSize
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemXYSize(System.IntPtr)">
            <summary>
            wrapped dfsGetItemXYSize
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemXSize(System.IntPtr)">
            <summary>
            wrapped dfsGetItemXSize
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemBytes(System.IntPtr)">
            <summary>
            wrapped dfsGetItemBytes
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetUsedItemBytes(System.IntPtr)">
            <summary>
            wrapped dfsGetUsedItemBytes
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemRefCoords(System.IntPtr,System.Single@,System.Single@,System.Single@)">
            <summary>
            wrapped dfsGetItemRefCoords
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemRefCoords(System.IntPtr,System.Single,System.Single,System.Single)">
            <summary>
            wrapped dfsSetItemRefCoords
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisOrientation(System.IntPtr,System.Single@,System.Single@,System.Single@)">
            <summary>
            wrapped dfsGetItemAxisOrientation
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisOrientation(System.IntPtr,System.Single,System.Single,System.Single)">
            <summary>
            wrapped dfsSetItemAxisOrientation
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemStatsGlobal(System.IntPtr,System.Double@,System.Double@,System.Int32@)">
            <summary>
            wrapped dfsGetItemStatsGlobal
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisType(System.IntPtr)">
            <summary>
            wrapped dfsGetItemAxisType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemDim(System.IntPtr)">
            <summary>
            wrapped dfsGetItemDim
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemGeometryType(System.IntPtr)">
            <summary>
            wrapped dfsGetItemGeometryType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemGeometryUnit(System.IntPtr)">
            <summary>
            wrapped dfsGetItemGeometryUnit
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisEqD0(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsSetImteAxisEqD0
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisEqD0(System.IntPtr,System.Int32@,System.String@)">
            <summary>
            wrapped dfsGetItemAxisEqD0
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisEqD1(System.IntPtr,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            wrapped dfsSetItemAxisEqD1
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisEqD1(System.IntPtr,System.Int32@,System.String@,System.Int32@,System.Single@,System.Single@)">
            <summary>
            wrapped dfsGetItemAxisEqD1
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisEqD2(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            wrapped dfsSetItemAxisEqD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisEqD2(System.IntPtr,System.Int32@,System.String@,System.Int32@,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            wrapped dfsGetItemAxisEqD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisEqD3(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            wrapped dfsSetItemAxisEqD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisEqD3(System.IntPtr,System.Int32@,System.String@,System.Int32@,System.Int32@,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            wrapped dfsGetItemAxisEqD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisEqD4(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            wrapped dfsSetItemAxisEqD4
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisEqD4(System.IntPtr,System.Int32@,System.String@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            wrapped dfsGetItemAxisEqD4
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisNeqD1(System.IntPtr,System.Int32,System.Int32,DHI.Generic.MikeZero.DFS.Coords[],System.Boolean)">
            <summary>
            wrapped dfsSetItemAxisNeqD1.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisNeqD1(System.IntPtr,System.Int32@,System.String@,System.Int32@,DHI.Generic.MikeZero.DFS.Coords[]@)">
            <summary>
            wrapped dfsGetItemAxisNeqD1.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisNeqD2(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Double[],System.Double[],System.Boolean)">
            <summary>
            wrapped dfsSetItemAxisNeqD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisNeqD2(System.IntPtr,System.Int32@,System.String@,System.Int32@,System.Int32@,System.Double[]@,System.Double[]@)">
            <summary>
            wrapped dfsGetItemAxisNeqD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisNeqD3(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Double[],System.Double[],System.Double[],System.Boolean)">
            <summary>
            wrapped dfsSetItemAxisNeqD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisNeqD3(System.IntPtr,System.Int32@,System.String@,System.Int32@,System.Int32@,System.Int32@,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            wrapped dfsGetItemAxisNeqD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisCurveLinearD2(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Double[],System.Double[],System.Boolean)">
            <summary>
            wrapped dfsSetItemAxisCurveLinearD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisCurveLinearD2(System.IntPtr,System.Int32@,System.String@,System.Int32@,System.Int32@,System.Double[]@,System.Double[]@)">
            <summary>
            wrapped dfsGetItemAxisCurveLinearD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisCurveLinearD3(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Double[],System.Double[],System.Double[],System.Boolean)">
            <summary>
            wrapped dfsSetItemAxisCurveLinearD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisCurveLinearD3(System.IntPtr,System.Int32@,System.String@,System.Int32@,System.Int32@,System.Int32@,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            wrapped dfsGetItemAxisCurveLinearD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisTvarD1(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            wrapped dfsSetItemAxisTvarD1
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisTvarD1(System.IntPtr,System.Int32@,System.String@,System.Int32@)">
            <summary>
            wrapped dfsGetItemAxisTvarD1
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisTvarD2(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            dfsSetItemAxisTvarD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisTvarD2(System.IntPtr,System.Int32@,System.String@,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetItemAxisTvarD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSetItemAxisTvarD3(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            wrapped dfsSetItemAxisTvarD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemAxisTvarD3(System.IntPtr,System.Int32@,System.String@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetItemAxisTvarD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsIsItemCompressed(System.IntPtr,System.Int32@)">
            <summary>
            wrapped dfsIsItemCompressed
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsItemEnableCompression(System.IntPtr)">
            <summary>
            wrapped dfsItemEnableCompression
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemStatsType(System.IntPtr)">
            <summary>
            wrapped dfsGetItemStatsType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetItemStats(System.IntPtr,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetItemStats
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,DHI.Generic.MikeZero.DFS.DfsSimpleType,System.String,System.Int32,System.IntPtr)">
            <summary>
            wrapped dfsAddCustomBlock
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,System.String,System.Single[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,DHI.Generic.MikeZero.DFS.DfsSimpleType,System.String,System.Int32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,System.String,System.Double[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,DHI.Generic.MikeZero.DFS.DfsSimpleType,System.String,System.Int32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,System.String,System.Byte[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,DHI.Generic.MikeZero.DFS.DfsSimpleType,System.String,System.Int32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,System.String,System.Int32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,DHI.Generic.MikeZero.DFS.DfsSimpleType,System.String,System.Int32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,System.String,System.UInt32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,DHI.Generic.MikeZero.DFS.DfsSimpleType,System.String,System.Int32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,System.String,System.Int16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,DHI.Generic.MikeZero.DFS.DfsSimpleType,System.String,System.Int32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,System.String,System.UInt16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsAddCustomBlock(System.IntPtr,DHI.Generic.MikeZero.DFS.DfsSimpleType,System.String,System.Int32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetCustomBlockRef(System.IntPtr)">
            <summary>
            wrapped dfsGetCustomBlockRef
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetCustomBlock(System.IntPtr,DHI.Generic.MikeZero.DFS.DfsSimpleType@,System.String@,System.Int32@,System.IntPtr@,System.IntPtr@)">
            <summary>
            wrapped dfsGetCustomBlock
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticRead(System.IntPtr)">
            <summary>
            wrapped dfsStaticRead
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticSetHeader(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsStaticSetHeader
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticWrite(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsStaticWrite
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticWrite(System.IntPtr,System.IntPtr,System.Single[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticWrite(System.IntPtr,System.IntPtr,System.Double[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticWrite(System.IntPtr,System.IntPtr,System.Byte[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticWrite(System.IntPtr,System.IntPtr,System.Int32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticWrite(System.IntPtr,System.IntPtr,System.UInt32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticWrite(System.IntPtr,System.IntPtr,System.Int16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticWrite(System.IntPtr,System.IntPtr,System.UInt16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticCreate">
            <summary>
            wrapped dfsStaticCreate
            </summary>
            <returns>A pointer to the created static vector structure</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticDestroy(System.IntPtr@)">
            <summary>
            wrapped dfsStaticDestroy
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsStaticGetData
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.Single[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.Double[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.Byte[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.Int32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.UInt32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.Int16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.UInt16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsStaticSkip(System.IntPtr)">
            <summary>
            wrapped dfsStaticSkip
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsFindBlockStatic(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsFindBlockStatic
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsFindBlockDynamic(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsFindBlockDynamic
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSkipItem(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsSkipItem
            </summary>
            <returns>true on succes, false on end of file</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsSkipTimeStep(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsSkipTimeStep
            </summary>
            <returns>true on succes, false on end of file</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)">
            <summary>
            wrapped dfsReadItemTimeStep
            </summary>
            <returns>true on succes, false on end of file</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.Single[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.Double[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.Byte[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.Int32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.UInt32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.Int16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.UInt16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)">
            <summary>
            wrapped dfsWriteItemTimeStep
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.Single[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.Double[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.Byte[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.Int32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.UInt32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.Int16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.UInt16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsFindItemDynamic(System.IntPtr,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            wrapped dfsFindItemDynamic
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsFindTimeStep(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsFindTimeStep
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsFindItemStatic(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsFindItemStatic
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_END_OF_FILE">
            <summary>
            End of file was reached.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_FAIL_DATA">
            <summary>
            Failed reading data from the file. File is corrupt, not a DFS file or handled incorrectly.
            <para>
            Returned if a wrong method is called, i.e, if file has a equidistant 2D spatial axis, 
            and one of the other spatial axis get/set methods was called.
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_FAIL_ILLEGEAL_TSTEP">
            <summary>
            The time step number is out of range.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_FAIL_ILLEGEAL_ITEM">
            <summary>
            The item number is out of range.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_MALLOC">
            <summary>
            Error allocating memory
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_READ">
            <summary>
            Error reading file. Reasons: File has zero size, disc is corrupt, other.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_WRITE">
            <summary>
            Error writing data to disc. Reasons: Disc is full, filename is invalid, other.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_OPEN">
            <summary>
            Error opening file. Filename is invalid, or header could not be read (corrupt, or not a DFS file).
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_CLOSE">
            <summary>
            Error closing file.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_FLUSH">
            <summary>
            Error flushing data to disc. Disc/quota may be full.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_SEEK">
            <summary>
            Error seeking in file. File has been truncated or disc is corrupt.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_ITEMNO">
            <summary>
            An item number is out of range.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_INDEX">
            <summary>
            An index number is out of range.
            </summary>
            <remarks>
            Currently only used for the offset index in dfsGetItemStats
            </remarks>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_DTYPE">
            <summary>
            A data type does not match (internal error). File is most likely corrupt.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_DATA">
            <summary>
            Error in file data, file is most likely corrupt.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_DATE_FORMAT">
            <summary>
            Date format is invalid. Must be YYYY-MM-dd
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_TIME_FORMAT">
            <summary>
            Time format is invalid. Must be hh:mm:ss
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_SIZE">
            <summary>
            A size does not match (internal error). File is most likely corrupt.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_TAG">
            <summary>
            Error reading DHI DFS tag (DHI_). Most likely file is not a DFS file.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_READONLY">
            <summary>
            Trying to write to a readonly file.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_SKIP">
            <summary>
            Error skipping a logical block (internal error). Most likely file is corrupt.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_APPTAG">
            <summary>
            Error reading DHI DFS API tag (DFS_). Most likely file is not a DFS file.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_AXIS">
            <summary>
            Wrong axis type number (internal error). Most likely the file is corrupt.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_CTYPE">
            <summary>
            Error reading logical block type (internal error). Most likely the file is corrupt.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_EUM">
            <summary>
            EUM unit and type does not match.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_NOT_DTX">
            <summary>
            File is not a dtx file, though loaded as such.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.ufsError.F_ERR_PLUGIN">
            <summary>
            Error in extension plugin.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsDLLAccess">
            <summary>
            Static class providing one-to-one access to the ufs.dll. For documentation, see the
            ufs documentation.
            
            Methods supporting array arguments with each of the ufs simple types exists
            in versions for each type, as e.g., <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>.
            The types are:
            float[], 
            double[], 
            byte[], 
            int[], 
            uint[], 
            short[], 
            ushort[]. 
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsDebugOn(System.Boolean)">
            <summary>
            wrapped dfsDebugOn
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsInitSystem">
            <summary>
            wrapped dfsInitSystem
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetVersionCurrent">
            <summary>
            wrapped dfsGetVersionCurrent
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsHeaderCreate(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            wrapped dfsHeaderCreate
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsHeaderDestroy(System.IntPtr@)">
            <summary>
            wrapped dfsHeaderDestroy
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetEncodeKey(System.IntPtr,System.Int32[],System.Int32[],System.Int32[],System.Int32)">
            <summary>
            wrapped dfsSetEncodeKey
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetEncodeKey(System.IntPtr,System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Wrapped dfsGetEncodeKey
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetEncodeKeySize(System.IntPtr)">
            <summary>
            wrapped dfsGetEncodeKeySize
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsIsFileCompressed(System.IntPtr)">
            <summary>
            wrapped dfsIsFileCompressed
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsFileRead(System.String,System.IntPtr@,System.IntPtr@)">
            <summary>
            wrapped dfsFileRead
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsFileCreate(System.String,System.IntPtr,System.IntPtr@)">
            <summary>
            wrapped dfsFileCreate
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsFileAppend(System.String,System.IntPtr@,System.IntPtr@)">
            <summary>
            wrapped dfsFileAppend
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsFileEdit(System.String,System.IntPtr@,System.IntPtr@)">
            <summary>
            wrapped dfsFileEdit
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsFileFlush(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsFileFlush
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsFileClose(System.IntPtr,System.IntPtr@)">
            <summary>
            wrapped dfsFileClose
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsEnablePlugin(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsEnablePlugin
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsUnloadPlugin(System.IntPtr)">
            <summary>
            wrapped dfsUnloadPlugin
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsParamModifyTimes(System.IntPtr,System.Boolean)">
            <summary>
            wrapped dfsParamModifyTimes
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteStartBlockDynamic(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsWriteStartBlockDynamic
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetAppTitle(System.IntPtr)">
            <summary>
            wrapped dfsGetAppTitle
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetAppTitle(System.IntPtr,System.String)">
            <summary>
            wrapped dfsSetAppTitle
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetAppVersionNo(System.IntPtr)">
            <summary>
            wrapped dfsGetAppVersionNo
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetAppVersionNo(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsSetAppVersionNo
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetFileTitle(System.IntPtr)">
            <summary>
            wrapped dfsGetFileTitle
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetFileTitle(System.IntPtr,System.String)">
            <summary>
            wrapped dfsSetFileTitle
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetFileType(System.IntPtr)">
            <summary>
            wrapped dfsGetFileType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetDataType(System.IntPtr)">
            <summary>
            wrapped dfsGetDataType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetDataType(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsSetDataType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetDeleteValByte(System.IntPtr)">
            <summary>
            wrapped dfsGetDeleteValByte
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetDeleteValDouble(System.IntPtr)">
            <summary>
            wrapped dfsGetDeleteValDouble
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetDeleteValFloat(System.IntPtr)">
            <summary>
            wrapped dfsGetDeleteValFloat
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetDeleteValInt(System.IntPtr)">
            <summary>
            wrapped dfsGetDeleteValInt
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetDeleteValUnsignedInt(System.IntPtr)">
            <summary>
            wrapped dfsGetDeleteValUnsignedInt
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetDeleteValByte(System.IntPtr,System.Byte)">
            <summary>
            wrapped dfsSetDeleteValByte
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetDeleteValDouble(System.IntPtr,System.Double)">
            <summary>
            wrapped dfsSetDeleteValDouble
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetDeleteValFloat(System.IntPtr,System.Single)">
            <summary>
            wrapped dfsSetDeleteValFloat
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetDeleteValInt(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsSetDeleteValInt
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetDeleteValUnsignedInt(System.IntPtr,System.UInt32)">
            <summary>
            wrapped dfsSetDeleteValUnsignedInt
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetGeoInfoType(System.IntPtr)">
            <summary>
            wrapped dfsGetGeoInfoType
            </summary>
            <param name="pdfs"></param>
            <returns></returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetGeoInfoUTMProj(System.IntPtr,System.IntPtr@,System.Double@,System.Double@,System.Double@)">
            <summary>
            wrapped dfsGetGeoInfoUTMProj
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsUpdateGeoInfoUTMProj(System.IntPtr,System.String,System.Double,System.Double,System.Double)">
            <summary>
            wrapped dfsUpdateGeoInfoUTMProj
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetGeoInfoUTMProj(System.IntPtr,System.String,System.Double,System.Double,System.Double)">
            <summary>
            wrapped dfsSetGeoInfoUTMProj
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetGeoInfoUndefined(System.IntPtr)">
            <summary>
            wrapped dfsSetGeoInfoUndefined
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetTimeAxisType(System.IntPtr)">
            <summary>
            wrapped dfsGetTimeAxisType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetEqTimeAxis(System.IntPtr,System.Int32@,System.IntPtr@,System.Double@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetEqTimeAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetNeqTimeAxis(System.IntPtr,System.Int32@,System.IntPtr@,System.Double@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetNeqTimeAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetEqTimeAxis(System.IntPtr,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            wrapped dfsSetEqTimeAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetNeqTimeAxis(System.IntPtr,System.Int32,System.Double,System.Int32)">
            <summary>
            wrapped dfsSetNeqTimeAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetEqCalendarAxis(System.IntPtr,System.IntPtr@,System.IntPtr@,System.Int32@,System.IntPtr@,System.Double@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetEqCaldendarAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetNeqCalendarAxis(System.IntPtr,System.IntPtr@,System.IntPtr@,System.Int32@,System.IntPtr@,System.Double@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetNeqCalendarAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetEqCalendarAxis(System.IntPtr,System.String,System.String,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            wrapped dfsSetEqCalendarAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetNeqCalendarAxis(System.IntPtr,System.String,System.String,System.Int32,System.Double,System.Int32)">
            <summary>
            wrapped dfsSetNeqCalendarAxis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsItemD(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsItemD (pointer to dynamic item)
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsItemS(System.IntPtr)">
            <summary>
            wrapped dfsItemS (pointer to static item)
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetNoOfItems(System.IntPtr)">
            <summary>
            wrapped dfsGetNoOfItems
            </summary>
            <param name="pdfs"></param>
            <returns></returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemInfo_(System.IntPtr,System.Int32@,System.IntPtr@,System.IntPtr@,System.Int32@)">
            <summary>
            wrapped dfsGetItemInfo_
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemInfo_(System.IntPtr,System.IntPtr,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            wrapped dfsSetItemInfo_
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemUnitConversion(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            wrapped dfsSetItemUnitConversion
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisUnitConversion(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            wrapped dfsSetTimeAxisUnitConversion
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemUnitConversion(System.IntPtr,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetItemUnitConversion
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisUnitConversion(System.IntPtr,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetItemAxisUnitConversion
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemValueType(System.IntPtr,System.Int32@)">
            <summary>
            wrapped dfsGetItemValueType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemValueType(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsSetItemValueType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemInfo(System.IntPtr,System.Int32@,System.IntPtr@,System.IntPtr@,System.Int32@,System.IntPtr@,System.Int32@)">
            <summary>
            wrapped dfsGetItemInfo
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemInfo(System.IntPtr,System.IntPtr,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            wrapped dfsSetItemInfo
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsUpdateItemInfo(System.IntPtr,System.IntPtr,System.Int32,System.String,System.Int32)">
            <summary>
            wrapped dfsUpdateItemInfo
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsRqItemUnit_(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsRqItemUnit_
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetAssocStatic(System.IntPtr,System.Int32,System.Int32,System.Int32@)">
            <summary>
            wrapped dfsGetAssocStatic
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetAssocStatic(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            wrapped dfsSetAssocStatic
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetNoAssocStatic(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsGetNoAssocStatic
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemElements(System.IntPtr)">
            <summary>
            wrapped dfsGetItemElements
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetUsedItemElements(System.IntPtr)">
            <summary>
            wrapped dfsGetUsedItemElements
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemXYZSize(System.IntPtr)">
            <summary>
            wrapped dfsGetItemXYZSize
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemXYSize(System.IntPtr)">
            <summary>
            wrapped dfsGetItemXYSize
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemXSize(System.IntPtr)">
            <summary>
            wrapped dfsGetItemXSize
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemBytes(System.IntPtr)">
            <summary>
            wrapped dfsGetItemBytes
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetUsedItemBytes(System.IntPtr)">
            <summary>
            wrapped dfsGetUsedItemBytes
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemRefCoords(System.IntPtr,System.Single@,System.Single@,System.Single@)">
            <summary>
            wrapped dfsGetItemRefCoords
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemRefCoords(System.IntPtr,System.Single,System.Single,System.Single)">
            <summary>
            wrapped dfsSetItemRefCoords
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisOrientation(System.IntPtr,System.Single@,System.Single@,System.Single@)">
            <summary>
            wrapped dfsGetItemAxisOrientation
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisOrientation(System.IntPtr,System.Single,System.Single,System.Single)">
            <summary>
            wrapped dfsSetItemAxisOrientation
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemStatsGlobal(System.IntPtr,System.Double@,System.Double@,System.Int32@)">
            <summary>
            wrapped dfsGetItemStatsGlobal
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisType(System.IntPtr)">
            <summary>
            wrapped dfsGetItemAxisType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemDim(System.IntPtr)">
            <summary>
            wrapped dfsGetItemDim
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemGeometryType(System.IntPtr)">
            <summary>
            wrapped dfsGetItemGeometryType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemGeometryUnit(System.IntPtr)">
            <summary>
            wrapped dfsGetItemGeometryUnit
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisEqD0(System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsSetImteAxisEqD0
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisEqD0(System.IntPtr,System.Int32@,System.IntPtr@)">
            <summary>
            wrapped dfsGetItemAxisEqD0
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisEqD1(System.IntPtr,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            wrapped dfsSetItemAxisEqD1
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisEqD1(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@,System.Single@,System.Single@)">
            <summary>
            wrapped dfsGetItemAxisEqD1
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisEqD2(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            wrapped dfsSetItemAxisEqD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisEqD2(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            wrapped dfsGetItemAxisEqD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisEqD3(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            wrapped dfsSetItemAxisEqD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisEqD3(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@,System.Int32@,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            wrapped dfsGetItemAxisEqD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisEqD4(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            wrapped dfsSetItemAxisEqD4
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisEqD4(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            wrapped dfsGetItemAxisEqD4
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisNeqD1(System.IntPtr,System.Int32,System.Int32,DHI.Generic.MikeZero.DFS.Coords[],System.Boolean)">
            <summary>
            wrapped dfsSetItemAxisNeqD1.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisNeqD1(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@,System.IntPtr@)">
            <summary>
            wrapped dfsGetItemAxisNeqD1.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisNeqD1(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@,DHI.Generic.MikeZero.DFS.Coords[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisNeqD1(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@,System.IntPtr@)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisNeqD2(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Double[],System.Double[],System.Boolean)">
            <summary>
            wrapped dfsSetItemAxisNeqD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisNeqD2(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@,System.Int32@,System.IntPtr@,System.IntPtr@)">
            <summary>
            wrapped dfsGetItemAxisNeqD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisNeqD3(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Double[],System.Double[],System.Double[],System.Boolean)">
            <summary>
            wrapped dfsSetItemAxisNeqD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisNeqD3(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@,System.Int32@,System.Int32@,System.IntPtr@,System.IntPtr@,System.IntPtr@)">
            <summary>
            wrapped dfsGetItemAxisNeqD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisCurveLinearD2(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Double[],System.Double[],System.Boolean)">
            <summary>
            wrapped dfsSetItemAxisCurveLinearD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisCurveLinearD2(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@,System.Int32@,System.IntPtr@,System.IntPtr@)">
            <summary>
            wrapped dfsGetItemAxisCurveLinearD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisCurveLinearD3(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Double[],System.Double[],System.Double[],System.Boolean)">
            <summary>
            wrapped dfsSetItemAxisCurveLinearD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisCurveLinearD3(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@,System.Int32@,System.Int32@,System.IntPtr@,System.IntPtr@,System.IntPtr@)">
            <summary>
            wrapped dfsGetItemAxisCurveLinearD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisTvarD1(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            wrapped dfsSetItemAxisTvarD1
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisTvarD1(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@)">
            <summary>
            wrapped dfsGetItemAxisTvarD1
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisTvarD2(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            dfsSetItemAxisTvarD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisTvarD2(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetItemAxisTvarD2
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSetItemAxisTvarD3(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            wrapped dfsSetItemAxisTvarD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemAxisTvarD3(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetItemAxisTvarD3
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsIsItemCompressed(System.IntPtr,System.Int32@)">
            <summary>
            wrapped dfsIsItemCompressed
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsItemEnableCompression(System.IntPtr)">
            <summary>
            wrapped dfsItemEnableCompression
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemStatsType(System.IntPtr)">
            <summary>
            wrapped dfsGetItemStatsType
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetItemStats(System.IntPtr,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            wrapped dfsGetItemStats
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.IntPtr)">
            <summary>
            wrapped dfsAddCustomBlock
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.Single[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.Double[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.Byte[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.Int32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.UInt32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.Int16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.UInt16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsAddCustomBlock(System.IntPtr,System.Int32,System.String,System.Int32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetCustomBlockRef(System.IntPtr,System.IntPtr@)">
            <summary>
            wrapped dfsGetCustomBlockRef
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsGetCustomBlock(System.IntPtr,System.Int32@,System.IntPtr@,System.Int32@,System.IntPtr@,System.IntPtr@)">
            <summary>
            wrapped dfsGetCustomBlock
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticRead(System.IntPtr,System.Int32@)">
            <summary>
            wrapped dfsStaticRead
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticSetHeader(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsStaticSetHeader
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsStaticWrite
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.Single[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.Double[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.Byte[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.Int32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.UInt32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.Int16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.UInt16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticWrite(System.IntPtr,System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticCreate(System.IntPtr@)">
            <summary>
            wrapped dfsStaticCreate
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticDestroy(System.IntPtr@)">
            <summary>
            wrapped dfsStaticDestroy
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsStaticGetData
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.Single[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.Double[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.Byte[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.Int32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.UInt32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.Int16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.UInt16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticGetData(System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsStaticSkip(System.IntPtr)">
            <summary>
            wrapped dfsStaticSkip
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsFindBlockStatic(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsFindBlockStatic
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsFindBlockDynamic(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsFindBlockDynamic
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSkipItem(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsSkipItem
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsSkipTimeStep(System.IntPtr,System.IntPtr)">
            <summary>
            wrapped dfsSkipTimeStep
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)">
            <summary>
            wrapped dfsReadItemTimeStep
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.Single[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.Double[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.Byte[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.Int32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.UInt32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.Int16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.UInt16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsReadItemTimeStep(System.IntPtr,System.IntPtr,System.Double@,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)">
            <summary>
            wrapped dfsWriteItemTimeStep
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.Single[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.Double[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.Byte[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.Int32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.UInt32[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.Int16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.UInt16[])">
            <summary>
            Typed version of <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsWriteItemTimeStep(System.IntPtr,System.IntPtr,System.Double,System.IntPtr)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsFindItemDynamic(System.IntPtr,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            wrapped dfsFindItemDynamic
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsFindTimeStep(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsFindTimeStep
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLAccess.dfsFindItemStatic(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            wrapped dfsFindItemStatic
            </summary>
        </member>
        <member name="T:DHI.Generic.Cartography.MzMapProjection">
            <summary>
            A map projection handles conversion from geographical coordinates (lon, lat)
            to projection coordintes (east, north).
            <para>
            The <see cref="P:DHI.Generic.Cartography.MzMapProjection.ProjectionString"/> is a WKT string for a spatial 
            reference system. A number of abbreviated strings also exists, 
            i.e., "UTM-33" for a WGS-84 UTM zone 33 projection, 
            and "LONG/LAT" for WGS-84 geographical coordinates.
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.Cartography.MzMapProjection._objectHolder">
            <summary>
            Reference to object that actually holds the unmanaged
            data, and that will free unmanaged ressources.
            The reference is kept here to avoid garbage collection
            of the holding object and thereby the release of 
            the MzMapProjection object that this object relies on.
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.#ctor(System.String)">
            <summary>
            Create and initialize a mapprojection with the specifed projection string.
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.#ctor(System.IntPtr,System.Object)">
            <summary>
            Creates a map-projection from a pointer to a map-projection object that
            is part of parent object (e.g. MzCartography), and that will
            be released together with the parent object, i.e. the map-projection object
            can not be released standalone.
            </summary>
            <param name="mzMapProjPointer">Pointer to map projection object</param>
            <param name="mapProjObjectHolder">Pointer to .NET object that represents the parent unmanaged object</param>
            <remarks>
            The mapProjObjectHolder reference is required to assure that the parent .NET object can go 
            out of scope, but only when the map projection also goes out of scope the parent object
            is garbage collected (and only then parent unmanged ressources are released).
            </remarks>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.Finalize">
            <summary>
            Free unmanaged ressources
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.Geo2Proj(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from geographical coordinates to projection coordinates
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.Proj2Geo(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from projection coordinates to geographical coordinates 
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.GetOrigin(System.Double@,System.Double@)">
            <summary>
            Get the geographical origin of the map projection
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.GetConvergence(System.Double,System.Double)">
            <summary>
            Get the convergence (orientation towards true north) at the given geographical location.
            <para>
            The convergence is the angle measured clockwise from true north to the north-south
            gridline passing through the specified coordinate.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.Geo2Xyz(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from geographical coordinates to 3D coordinates.
            <para>
            The 3D coordinate system origin is at the earth center (ellipsoid center)
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.Xyz2Geo(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert coordinates from 3D coordinates to geographical coordinates.
            <para>
            The 3D coordinate system origin is at the earth center (ellipsoid center)
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.Proj2GeoRotation(System.Double,System.Double,System.Double)">
            <summary>
            Convert a rotation from map projection north
            into a rotation from true north. 
            <para>
            It adds the convergence value to the projection north rotation value
            </para>
            <para>
            The convertion depends on the geographical location.
            </para>
            </summary>
            <param name="east">Easting coordinate</param>
            <param name="north">Northing coordinate</param>
            <param name="rotation">Rotation clock-wise from map projection north</param>
            <returns>Rotation clock-wise from true north</returns>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.Geo2ProjRotation(System.Double,System.Double,System.Double)">
            <summary>
            Convert a rotation from true north
            into a rotation from map projection north
            <para>
            It subtracts the convergence value from the true north rotation value
            </para>
            <para>
            The convertion depends on the geographical location.
            </para>
            </summary>
            <param name="lon">Easting coordinate</param>
            <param name="lat">Northing coordinate</param>
            <param name="rotation">Rotation clock-wise from true north</param>
            <returns>Rotation clock-wise from map projection north</returns>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.IsValidUtmZone(System.String)">
            <summary>
            Checks whether a projection string is a valid UTM zone projection string
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.IsValidProjection(System.String)">
            <summary>
            Checks whether a projection string is a valid projection string
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.IsLonLatType(System.String)">
            <summary>
            Checks whether a projection string is using longitude/latitude 
            coordinates
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.Longitude2UtmZone(System.Double)">
            <summary>
            Get the projection string for the UTM zone best matching the longitude coordinate
            </summary>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.ProjectionShortName(System.String)">
            <summary>
            Get the short name out of a WKT projetion string. 
            <para>
            The short name is not unique amongst all WKT projections
            </para>
            <para>
            If the <paramref name="projString"/> is not a WKT projection string, 
            the <paramref name="projString"/> itself is returned as the short name.
            </para>
            </summary>
            <param name="projString">A string the the WKT format for a spatial reference system</param>
        </member>
        <member name="M:DHI.Generic.Cartography.MzMapProjection.ProjectionOrigin(System.String,System.Double@,System.Double@)">
            <summary>
            Returns the geographical origin of the projection defined by the
            <paramref name="projstring"/>
            <para>
            If the projection string is not a valid WKT string, an exception is thrown.
            </para>
            </summary>
            <param name="projstring">A string the the WKT format for a spatial reference system</param>
            <param name="lon">Longitude coordinate of the projection origin</param>
            <param name="lat">Latitude coordinate of the projection origin</param>
        </member>
        <member name="P:DHI.Generic.Cartography.MzMapProjection.Name">
            <summary>
            The short name of a projection. 
            <para>
            The short name is not unique amongst all WKT projections
            </para>
            <para>
            If the <see cref="P:DHI.Generic.Cartography.MzMapProjection.ProjectionString"/> is not a WKT projection string, 
            the <see cref="P:DHI.Generic.Cartography.MzMapProjection.ProjectionString"/> itself is returned as the short name.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.Cartography.MzMapProjection.ProjectionString">
            <summary>
            Returns the WKT projection string, or one of the projection abbreviation strings.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsFile">
            <summary>
            Base implementation of a dfs file.
            <para>
            This dfs file is of the type: all items, fixed space.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsAbstractFile">
            <summary>
            Base class implementation of the different DFS file types. Currently only
            the <see cref="T:DHI.Generic.MikeZero.DFS.DfsFile"/> is extending this, but if some day support
            for DFS is extended to some of the other file types as <see cref="T:DHI.Generic.MikeZero.DFS.FileType"/>,
            this will be required.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsAbstractFile.Close">
            <summary>
            Close the file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractFile.FileName">
            <summary>
            Name of file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsAbstractFile.FileMode">
            <summary>
            Mode that the file was opened in.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsFile">
            <summary>
            Interface handling generic access to Dfs file.
            <para>
            The functionality is based on a file pointer pointing into the 
            file on the disk. 
            </para>
            <para>
            Whenever calling one of the read or write methods, the file pointer 
            will move to the next static item or dynamic item-timestep in the file. 
            </para>
            <para>
            The methods reading the next static or dynamic item will depend on previous calls
            to any of the read and write methods.
            </para>
            <para>
            The two <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.ReadStaticItemNext"/> and 
            <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStepNext"/>
            are the most efficient way of iterating through the data in the file. If iterating
            in another way, for example over all the time steps of one item, and then the next item, 
            this will imply a performance hit, since the file pointer needs to be repositioned
            at each read. Especially fro dfs0 files this is noticable; not very much data is being 
            read for one item timestep, and it is faster reading data sequentially than moving the 
            file pointer.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFile.DfsCurrentVersion">
            <summary>
            Returns the current version of the Dfs file library
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFile.FileInfo">
            <summary>
            Information in the header.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFile.ItemInfo">
            <summary>
            List of dynamic item info's.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsFile.FileMode">
            <summary>
            Mode of the current file
            <para>
            This is set to <see cref="F:DHI.Generic.MikeZero.DFS.DfsFileMode.Closed"/>
            when the file has been closed.
            </para>
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsFile._fpState">
            <summary>
            Type of item that the file currently points to.
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsFile._fpItemNumber">
            <summary>
            Number of the item that the file currently points to
            </summary>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsFile._fpTimeStepIndex">
            <summary>
            Index of the time step that the file currently points to. -1 for static items.
            <para>
            When adding item-timesteps to the file, this together with <see cref="F:DHI.Generic.MikeZero.DFS.DfsFile._fpItemNumber"/>
            will point to the next item-timestep to come.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.Finalize">
            <summary>
            Free unmanaged ressources, by closing the file.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.Dispose">
            <summary>
            Close file and release ressources on the unmanaged side.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.GetNextItemNumber">
            <summary>
            Get the number of the next item to be read.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.GetNextTimeStepIndex">
            <summary>
            Get the index of the next time step to be read.
            If the next item is a static item, this will return -1;
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.ReadStaticItemNext">
            Static item methods
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.ReadStaticItem(System.Int32)">
            <summary>
            Read the number <paramref name="staticItemNo"/> static item from the file.
             </summary>
            <param name="staticItemNo">Number of static item in the file to read</param>
            <returns>The static item number <paramref name="staticItemNo"/>, null if there are not that many static items.</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.WriteStaticItemData(DHI.Generic.MikeZero.DFS.IDfsStaticItem,System.Array)">
            <summary>
            Write the static item back to the file. the <paramref name="staticItem"/> must
            originate from this file. This will update and overwrite the static item information and 
            the data of the static item. 
            </summary>
            <param name="staticItem">Static item to update</param>
            <param name="data">New data to insert. Data length must match the data size of the static item.</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.ReadItemTimeStepNext">
            Dynamic item methods
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.ReadItemTimeStep(System.Int32,System.Int32)">
            <summary>
            Reads the dynamic item-timestep as specified from the file. It throws an
            exception if <paramref name="itemNumber"/> or <paramref name="timestepIndex"/>
            is out of range.
            </summary>
            <returns>The dynamic item-timestep as specified.</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData,System.Int32)">
            <summary>
            Read the specified item and time step. With this you can reuse 
            the data buffer in <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData"/>, <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Data"/>.
            The data is updated in place. 
            <para>
            If the data from a timestep is to be stored, the user is responsible to copy the 
            data before using this method again.
            </para>
            <para>
            The <paramref name="itemData"/> must origin from the dfs file at hand, either
            returned by another ReadItemTimeStep call, or by use of a <code>CreateEmptyItemData</code> method.
            </para>
            </summary>
            <returns>true on succes, false on end of file</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.ReadItemTimeStepNextUnchecked(DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo)">
            <summary>
            Reads the next item time step from the file, assuming that the 
            <paramref name="dynamicItem"/> is matching data in the file (not checked)
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.GetTime(System.Double,System.Int32)">
            <summary>
            Returns the time for a time step. It uses the time axis type,
            the time step index and the time value returned from ufs.dll.
            <para>
            For the non-equidistant time axes, it returns <paramref name="time"/> as
            returned from ufs.dll. For the equidistant time axis, it returns the
            start time offset + timestep * timestepindex (since ufs.dll just returns
            the timestepindex in the time parameter).
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.ReadItemTimeStepNextUnchecked(DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo,DHI.Generic.MikeZero.DFS.DfsItemData{System.Single})">
            <summary>
            Read the next item time step from the file. The itemData
            must match the data being read.
            </summary>
            <returns>true on succes, false on end of file</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.WriteItemTimeStep(System.Int32,System.Int32,System.Double,System.Array)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.Reset">
            <summary>
            Resets the file pointer to point on the first dynamic item time step in the file.
            <para>
            Can also be used if it is required to restart reading the static items.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.FindItem(System.Int32,System.Int32)">
            <summary>
            Positions the file pointer at the location in the file where the specified item at the specified time step starts.
            </summary>
            <param name="itemNumber">Number of item to find (1-based)</param>
            <param name="timestepIndex">Index of time step to find (0-based)</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.FindTimeStep(System.Int32)">
            <summary>
            Positions the file pointer at the location in the file where the the specified time step starts.
            </summary>
            <param name="timestepIndex">Index of time step to find (0-based)</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.WriteItemTimeStepNext(System.Double,System.Array)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.Close">
            <summary>
            Close the file
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.Close(System.Boolean)">
            <summary>
            Close the file
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.Flush">
            <summary>
            Flush cached data to the file. This will especially update the header information, 
            such that if another process is reading the file while it is being read, the new
            header information can be retrieved.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.DfsCurrentVersion">
            <summary>
            Returns the current version of the Dfs file library
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.Create(System.String,System.IntPtr,System.IntPtr,DHI.Generic.MikeZero.DFS.DfsFileMode,System.Boolean,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Create a DfsFile based on the <paramref name="headerPointer"/> and
            <paramref name="filePointer"/>. 
            <para>
            This methods takes over the responsibility for freeing ressources, i.e.,
            no freeing of the header and file data must be done, even if this
            throws an exception.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.CheckIfOpen">
            <summary>
            Checks if the file is open, throws and IOException if not.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.FpFindBlockDynamic">
            <summary>
            Positions file pointer at the first dynamic item, first time step
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.FpFindItemTimeStep(System.Int32,System.Int32)">
            <summary>
            Position file pointer at the dynamic item with itemNumber and
            at time timestepIndex
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.FpFindTimeStep(System.Int32)">
            <summary>
            Position file pointer at the first dynamic item 
            at time timestepIndex
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFile.FpDynamicIncrement">
            <summary>
            Increment the file pointer variables after having read one time step of one dynamic item.
            If the time step is incremented, it returns true, if only the item number is incremented
            it returns false.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFile.FileInfo">
            <summary>
            Information in the header.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFile.ItemInfo">
            <summary>
            List of dynamic item info's.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFile.ItemInfoList">
            <summary>
            List of dynamic item info's.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsFile.FilePointerState">
            <summary>
            State of the file pointer, where it currently points.
            <para>
            The <see cref="F:DHI.Generic.MikeZero.DFS.DfsFile.FilePointerState.CreatingItems"/> is a state defining that a new
            file is being created. It is allowed to write as well static item data 
            as dynamic item-timestep data. Writing the first dynamic item-timestep
            data will turn the state into <see cref="F:DHI.Generic.MikeZero.DFS.DfsFile.FilePointerState.DynamicItem"/>
            </para>
            <para>
            If the file is being created (<see cref="F:DHI.Generic.MikeZero.DFS.DfsFile.FilePointerState.CreatingItems"/>), it is not 
            allowed to read other data. 
            Reason: Before the first item-time step is written to the file, 
            the dynamic block start tag is not written to the file, and is is 
            not possible to navigate in such a file (dfsFindBlockDynamic fails)
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsFileConverter">
            <summary>
            Class wrapping an <see cref="T:DHI.Generic.MikeZero.DFS.DfsFile"/>, applying a number of 
            <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDataConverter"/>s to the <see cref="T:DHI.Generic.MikeZero.DFS.DfsFile"/> methods.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.Dispose">
            <summary>
            Close file and release ressources on the unmanaged side.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.ReadItemTimeStepNext">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStepNext"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.ReadItemTimeStep(System.Int32,System.Int32)">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData,System.Int32)">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData,System.Int32)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.WriteItemTimeStepNext(System.Double,System.Array)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.WriteItemTimeStep(System.Int32,System.Int32,System.Double,System.Array)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.FindItem(System.Int32,System.Int32)">
            <summary>
            Positions the file pointer at the location in the file where the 
            specified dynamic item at the specified time step starts.
            </summary>
            <param name="itemNumber">Number of item to find (1-based)</param>
            <param name="timestepIndex">Index of time step to find (0-based)</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.FindTimeStep(System.Int32)">
            <summary>
            Positions the file pointer at the location in the file where the 
            specified time step starts.
            </summary>
            <param name="timestepIndex">Index of time step to find (0-based)</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.Reset">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.Reset"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.Flush">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.Flush"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.Close">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.Close"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.ReadStaticItemNext">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.ReadStaticItemNext"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.ReadStaticItem(System.Int32)">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.ReadStaticItem(System.Int32)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.WriteStaticItemData(DHI.Generic.MikeZero.DFS.IDfsStaticItem,System.Array)">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileStaticIO.WriteStaticItemData(DHI.Generic.MikeZero.DFS.IDfsStaticItem,System.Array)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileConverter.DfsCurrentVersion">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFile.DfsCurrentVersion"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileConverter.FileInfo">
            <summary>
            See <see cref="P:DHI.Generic.MikeZero.DFS.IDfsFile.FileInfo"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileConverter.ItemInfo">
            <summary>
            See <see cref="P:DHI.Generic.MikeZero.DFS.IDfsFile.ItemInfo"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsFileConverter.FileMode">
            <inheritdoc/>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsDynamicItemInfo">
            <summary>
            Dynamic item info used by builders when creating new files.
            </summary>
            <remarks>
            Could also be used when opening in read mode, where data is 
            not editable, but that is currently not the case.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsItemInfo">
            <summary>
            Item info used by builders when creating new files.
            </summary>
            <remarks>
            Could also be used when opening in read mode, where data is 
            not editable, but that is currently not the case.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil">
            <summary>
            Utilities related to the <see cref="T:DHI.Generic.MikeZero.DFS.DfsDLLWrapper"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.dfsGetItemSpatialAxis(System.IntPtr)">
            <summary>
            Get the spatial axis for the item pointer to by the <paramref name="itemPointer"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.GetItemSpatialAxis(System.IntPtr)">
            <summary>
            Get the spatial axis for the item pointer to by the <paramref name="itemPointer"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.dfsSetItemSpatialAxis(System.IntPtr,DHI.Generic.MikeZero.DFS.IDfsSpatialAxis)">
            <summary>
            Set the spatial axis on the item pointer to by <paramref name="itemPointer"/>
            based on the <paramref name="spatialAxis"/>
            </summary>
            <param name="itemPointer">Pointer to item, must be valid</param>
            <param name="spatialAxis">Spatial axis to set</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.dfsGetTemporalAxis(System.IntPtr)">
            <summary>
            Get the temporal axis of the file pointer to by the <paramref name="headerPointer"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.GetTemporalAxis(System.IntPtr)">
            <summary>
            Get the temporal axis of the file pointer to by the <paramref name="headerPointer"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.dfsUpdateTemporalAxis(System.IntPtr,DHI.Generic.MikeZero.DFS.DfsTemporalAxis)">
            <summary>
            Update the <paramref name="temporalAxis"/> from a header pointer to by <paramref name="headerPointer"/>.
            It is assumed that the <paramref name="temporalAxis"/> originates from the <paramref name="headerPointer"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.dfsSetTemporalAxis(System.IntPtr,DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)">
            <summary>
            Set the temporal axis of the file pointer to by <paramref name="headerPointer"/>
            based on the <paramref name="temporalAxis"/>
            </summary>
            <remarks>
            When editing in an existing file, setting another temporal axis than the
            one already defined in the file will corrupt the file.
            Check the type using the <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsGetTimeAxisType(System.IntPtr)"/>.
            </remarks>
            <param name="headerPointer">Pointer to header structure (pdfs)</param>
            <param name="temporalAxis">Temporal axis to set</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.dfsAddCustomBlock(System.IntPtr,DHI.Generic.MikeZero.DFS.IDfsCustomBlock)">
            <summary>
            Add the custom block to the file pointer to by <paramref name="headerPointer"/>
            </summary>
            <param name="headerPointer">Pointer to header structure (pdfs)</param>
            <param name="customBlock">custom block to set</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.FromDfsDateStrings(System.String,System.String)">
            <summary>
            Converts a DateTime into the two strings in MZ format for date and time, respectively
            </summary>
            <param name="date">the date, "yyyy-MM-dd"</param>
            <param name="time">the time, "HH:mm:ss"</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.ToDfsDateStrings(System.DateTime,System.String@,System.String@)">
            <summary>
            Create two strings in MZ format for date and time, respectively
            </summary>
            <param name="d">DateTime</param>
            <param name="date">the date, "yyyy-MM-dd"</param>
            <param name="time">the time, "HH:mm:ss"</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.GetSystemType(DHI.Generic.MikeZero.DFS.DfsSimpleType)">
            <summary>
            returns the .Net type for a DHI type
            </summary>
            <param name="u">the UFS type (the file control codes are not allowed here)</param>
            <returns>type</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.GetDfsType(System.Type)">
            <summary>
            convert a System.Type into a UfsSimpleType, if possible
            </summary>
            <param name="t">system type (int, double, float, byte, uint, short, ushort)</param>
            <returns>ufs type</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.GetDfsType(System.Array)">
            <summary>
            Get the <see cref="T:DHI.Generic.MikeZero.DFS.DfsSimpleType"/> of the given array.
            <para>
            Throws an exception is the array is not one of the supported
            types
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.dfsErrorToString(DHI.Generic.MikeZero.DFS.ufsError)">
            <summary>
            Create a string based on the <paramref name="error"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapperUtil.StringModify(System.String,System.String)">
            <summary>
            Make a new string that is as long as the old string, 
            with the content of the new string, truncated
            or padded with spaces.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsParameters">
            <summary>
            Parameters that can be set for a dfs file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsParameters.UbgConversion">
            <summary>
            Sets UBG (Unit Base Group) conversion for all items
            and item axis.
            <para>
            Default is false.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsParameters.ModifyTimes">
            <summary>
            Defines whether the times should be modified.
            <para>
            If set to true, then modifications are made to the temporal axis 
            definition and the times from the <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData"/> such 
            that the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Time"/> start from zero.
            </para>
            <para>
            Default is false.
            </para>
            </summary>
            <remarks>
            If set to true, the following happens:
            <para>
            For the calendar type axes the 
            <see cref="P:DHI.Generic.MikeZero.DFS.IDfsEqCalendarAxis.StartDateTime"/>/<see cref="P:DHI.Generic.MikeZero.DFS.IDfsNonEqCalendarAxis.StartDateTime"/> 
            has the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.StartTimeOffset"/>
            added, and the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.StartTimeOffset"/> is returned as zero. 
            Furthermore the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Time"/> starts from zero. 
            If the first time step has a time containing fractions of a second, these fractions are lost.
            </para>
            <para>
            For the <see cref="T:DHI.Generic.MikeZero.DFS.IDfsNonEqTimeAxis"/> the time of the first time step is stored in 
            <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.StartTimeOffset"/> and the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Time"/> 
            starts from zero.
            </para>
            <para>
            If using directly the <see cref="T:DHI.Generic.MikeZero.DFS.DfsDLLWrapper"/> for accessing the dfs files, then
            use the <see cref="M:DHI.Generic.MikeZero.DFS.DfsDLLWrapper.dfsParamModifyTimes(System.IntPtr,System.Boolean)"/> to control this parameter.
            In this case the default value (if not doing anything) is true.
            </para>
            </remarks>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsParameters.Converters">
            <summary>
            List of data converters for converting item data.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsParameters.EnablePlugin">
            <summary>
            Enable plugin.
            </summary>
            <remarks>
            Enabling plugin on some dfs file types will produce extra items, that 
            are derived from the items in the file. The functionality depends
            at the dfs file at hand.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsParameters">
            <summary>
            Default implementation of <see cref="T:DHI.Generic.MikeZero.DFS.IDfsParameters"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsParameters.UbgConversion">
            <summary>
            Sets UBG (Unit Base Group) conversion for all items
            and item axis.
            <para>
            Default is false.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsParameters.ModifyTimes">
            <summary>
            Defines whether the times should be modified.
            <para>
            See <see cref="P:DHI.Generic.MikeZero.DFS.IDfsParameters.ModifyTimes"/> for details.
            </para>
            <para>
            Default is false.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsParameters.Converters">
            <summary>
            List of data converters for converting item data.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsParameters.EnablePlugin">
            <summary>
            Enable plugin.
            </summary>
            <remarks>
            Enabling plugin on some dfs file types will produce extra items, that 
            are derived from the items in the file. The functionality depends
            at the dfs file at hand.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsTemporalAxis">
            <summary>
            Base class for the temporal axis classes, implementing the
            base temporal axis interface, <see cref="T:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis">
            <summary>
            Interface specifying the temporal axis of the file. 
            <para>
            Use the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeAxisType"/> to get the exact type. Depending on this type, 
            the temporal axis can be cast to one of:
            <see cref="T:DHI.Generic.MikeZero.DFS.IDfsNonEqCalendarAxis"/>
            <see cref="T:DHI.Generic.MikeZero.DFS.IDfsEqCalendarAxis"/>
            <see cref="T:DHI.Generic.MikeZero.DFS.IDfsNonEqTimeAxis"/>
            <see cref="T:DHI.Generic.MikeZero.DFS.IDfsEqTimeAxis"/>
            </para>
            <para>
            If the time axis in the file is <see cref="F:DHI.Generic.MikeZero.DFS.TimeAxisType.Undefined"/>
            indicates an illegally written file, and should not happen. An exception will/should be thrown 
            when reading the file.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeAxisType">
            <summary>
            Time axis type. Based on this, the class must implement one of the sub-types.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit">
            <summary>
            Unit of time axis.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.StartTimeOffset">
            <summary>
            Start time in <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/> for the first time step in the file.
            <para>
            This can only be set for the equidistant type axes.
            </para><para>
            For the non-equidistant type time axis this is for information, returning
            the time of the first time step relative to the start time.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.NumberOfTimeSteps">
            <summary>
            Number of time steps in the file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.FirstTimeStepIndex">
            <summary>
            Index of first time step. Currently not used, always zero.
            </summary>
            <remarks>
            The intented use is e.g. when a time serie represents a 
            subset of a larger time serie, tindex could hold the position 
            of the first time step in the original time serie. 
            </remarks>
        </member>
        <member name="F:DHI.Generic.MikeZero.DFS.DfsTemporalAxis._startTimeOffset">
            <summary>
            Start time offset
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsTemporalAxis.SetValues2(DHI.Generic.MikeZero.eumUnit,System.Double,System.Int32,System.Int32)">
            <summary>
            Set all values in one call
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsTemporalAxis.InvokeOnUpdate">
            <summary>
            Method that is invoked when ever the temporal axis is updated.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsTemporalAxis.TimeAxisType">
            <summary>
            Time axis type. Based on this, the class must implement one of the sub-types.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsTemporalAxis.TimeUnit">
            <summary>
            Unit of time axis.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsTemporalAxis.StartTimeOffset">
            <summary>
            Start time in <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/> for the first time step in the file.
            <para>
            See <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.StartTimeOffset"/> for details
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsTemporalAxis.NumberOfTimeSteps">
            <summary>
            Number of time steps in the file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsTemporalAxis.FirstTimeStepIndex">
            <summary>
            Index of first time step. Currently not used, always zero.
            <para>
            See <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.FirstTimeStepIndex"/> for details
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsTemporalAxis.UpdatedEventHandler">
            <summary>
            Delegate for hooking up to the event that is thrown when a property of the time axis 
            is updated.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsEqTimeAxis">
            <summary>
            Class implementing <see cref="T:DHI.Generic.MikeZero.DFS.IDfsEqTimeAxis"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsEqTimeAxis">
            <summary>
            Equidistant time axis.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsEqTimeAxis.StartTimeOffset">
            <summary>
            Start time in <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/> for the first time step in the file.
            </summary>
            <remarks>Overrides the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.StartTimeOffset"/> to implement a setter</remarks>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsEqTimeAxis.TimeStep">
            <summary>
            Time step length, in unit described by <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsEqTimeAxis.TimeStep">
            <summary>
            Time step length, in unit described by <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsEqTimeAxis.TimeAxisType">
            <summary>
            Time axis type. Based on this, the class must implement one of the sub-types.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsEqTimeAxis.StartTimeOffset">
            <summary>
            Start time in <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/> for the first time step in the file.
            <para>
            See <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.StartTimeOffset"/> for details
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsNonEqTimeAxis">
            <summary>
            Class implementing <see cref="T:DHI.Generic.MikeZero.DFS.IDfsNonEqTimeAxis"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsNonEqTimeAxis">
            <summary>
            Non-equdistant time axis.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsNonEqTimeAxis.TimeSpan">
            <summary>
            Time span of all data in file, in unit described by <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/>.
            <para>
            The <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.StartTimeOffset"/> is not included in the span. The span
            starts at the time of the StartTimeOffset
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsNonEqTimeAxis.TimeSpan">
            <summary>
            Time span of all data in file, in unit described by <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsNonEqTimeAxis.TimeAxisType">
            <summary>
            Time axis type. Based on this, the class must implement one of the sub-types.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsEqCalendarAxis">
            <summary>
            Class implementing <see cref="T:DHI.Generic.MikeZero.DFS.IDfsEqCalendarAxis"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsEqCalendarAxis">
            <summary>
            Equidistant calendar axis.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsEqCalendarAxis.StartDateTime">
            <summary>
            Start time of the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsEqCalendarAxis.StartTimeOffset">
            <summary>
            Start time in <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/> for the first time step in the file.
            </summary>
            <remarks>Overrides the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.StartTimeOffset"/> to implement a setter</remarks>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsEqCalendarAxis.TimeStep">
            <summary>
            Time step length, in unit described by <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsEqCalendarAxis.StartDateTime">
            <summary>
            Start time of the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsEqCalendarAxis.TimeStep">
            <summary>
            Time step length, in unit described by <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsEqCalendarAxis.TimeAxisType">
            <summary>
            Time axis type. Based on this, the class must implement one of the sub-types.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsEqCalendarAxis.StartTimeOffset">
            <summary>
            Start time in <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/> for the first time step in the file.
            <para>
            See <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.StartTimeOffset"/> for details
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsNonEqCalendarAxis">
            <summary>
            Class implementing <see cref="T:DHI.Generic.MikeZero.DFS.IDfsNonEqCalendarAxis"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsNonEqCalendarAxis">
            <summary>
            Non-equidistant calendar axis.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsNonEqCalendarAxis.StartDateTime">
            <summary>
            Start time of the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsNonEqCalendarAxis.TimeSpan">
            <summary>
            Time span length of all data in file, in unit described by <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsNonEqCalendarAxis.StartDateTime">
            <summary>
            Start time of the file.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsNonEqCalendarAxis.TimeSpan">
            <summary>
            Time span length of all data in file, in unit described by <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsNonEqCalendarAxis.TimeAxisType">
            <summary>
            Time axis type. Based on this, the class must implement one of the sub-types.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsException">
            <summary>
            Custom exception thrown when a DFS error occurs
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DfsException class with a specified error message
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DfsException class with a specified error message
            and a reference to the inner exception that is the cause of this exception
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs3Builder">
            <summary>
            Builder for building dfs3 files. 
            <para>
            The builder works in two stages. The first stage all header information
            and information of the dynamic items are provided. In the second stage
            static items are added. Then a dfs file is ready, and data for the dynamic
            items can be added.
            </para>
            <para>
            To get the final file, call <see cref="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs3Builder.GetFile"/>.
            </para>
            <para>
            To go from the first to the second stage by calling
            <see cref="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.CreateFile(System.String)"/>, which will actually create a file on the disc.
            </para>
            <para>
            The following must be set during stage 1:
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs3Builder.SpatialAxis"/>,
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.TemporalAxis"/>,
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.DataType"/>,
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.Projection"/>
            </para>
            <para>
            The <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs3Builder.SpatialAxis"/> must be a 3D axis.
            </para>
            <para>
            Use the <see cref="T:DHI.Generic.MikeZero.DFS.DfsFileFactory"/> to create classes to set.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs3Builder.GetFile">
            <summary>
            Return the file as a <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs3File"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs3Builder.Create(System.String,System.String,System.Int32)">
            <summary>
            Create a new builder that will build a dfs2 file
            </summary>
            <param name="fileTitle">Title of the file</param>
            <param name="appTitle">Title of the application creating the file</param>
            <param name="appVersionNo">Version of the application creating the file</param>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs3Builder.SpatialAxis">
            <summary>
            Sets the spatial axis of the file. This must be one of the
            3D axes.
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsCustomBlock`1">
            <summary>
            Typed generic version of <see cref="T:DHI.Generic.MikeZero.DFS.IDfsCustomBlock"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsCustomBlock`1.Item(System.Int32)">
            <summary>
            Custom block value getter and setter. 
            <para>
            You can update the custom block data by setting 
            values directly in the array.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Misc.UnManagedArrayWrapper`1">
            <summary>
            Abstract class, wrapping an unmanaged array of type T into an IList{T} and a non-generic IList
            <para>
            You need to extend this class and implement the <see cref="M:DHI.Generic.MikeZero.DFS.Misc.UnManagedArrayWrapper`1.CopyTo(`0[],System.Int32)"/> and the <see cref="P:DHI.Generic.MikeZero.DFS.Misc.UnManagedArrayWrapper`1.Item(System.Int32)"/>
            method, and also make an explicit implementation of the <see cref="P:System.Collections.IList.Item(System.Int32)"/> method. 
            For an example, see <see cref="T:DHI.Generic.MikeZero.DFS.Misc.UnManagedIntArrayWrapper"/>.
            </para>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Misc.UnManagedArrayWrapper`1.#ctor(System.Int32)">
            <summary>
            Default constructor, hidden from the public
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Misc.UnManagedDoubleArrayWrapper">
            <summary>
            Class wrapping an unmanaged array of doubles. It allows getting and setting values.
            <para>
            This is unsafe code!!! 
            Be sure that the array is allocated and has the size matching the count parameter.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Misc.UnManagedDoubleArrayWrapper.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Create an unmanated array wrapper based on the pointer and the count.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.Misc.UnManagedDoubleArrayWrapper.Item(System.Int32)">
            <summary>
            Gets and sets the value in the unmanated array at the given index.
             </summary>
            <remarks>
            Throws and <see cref="T:System.IndexOutOfRangeException"/> if the index is not 
            within the range of the array.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Misc.UnManagedFloatArrayWrapper">
            <summary>
            Class wrapping an unmanaged array of floats. It allows getting and setting values.
            <para>
            This is unsafe code!!! 
            Be sure that the array is allocated and has the size matching the count parameter.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Misc.UnManagedFloatArrayWrapper.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Create an unmanated array wrapper based on the pointer and the count.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.Misc.UnManagedFloatArrayWrapper.Item(System.Int32)">
            <summary>
            Gets and sets the value in the unmanated array at the given index.
             </summary>
            <remarks>
            Throws and <see cref="T:System.IndexOutOfRangeException"/> if the index is not 
            within the range of the array.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Misc.UnManagedByteArrayWrapper">
            <summary>
            Class wrapping an unmanaged array of bytes. It allows getting and setting values.
            <para>
            This is unsafe code!!! 
            Be sure that the array is allocated and has the size matching the count parameter.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Misc.UnManagedByteArrayWrapper.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Create an unmanated array wrapper based on the pointer and the count.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.Misc.UnManagedByteArrayWrapper.Item(System.Int32)">
            <summary>
            Gets and sets the value in the unmanated array at the given index.
             </summary>
            <remarks>
            Throws and <see cref="T:System.IndexOutOfRangeException"/> if the index is not 
            within the range of the array.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Misc.UnManagedIntArrayWrapper">
            <summary>
            Class wrapping an unmanaged array of ints. It allows getting and setting values.
            <para>
            This is unsafe code!!! 
            Be sure that the array is allocated and has the size matching the count parameter.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Misc.UnManagedIntArrayWrapper.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Create an unmanated array wrapper based on the pointer and the count.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.Misc.UnManagedIntArrayWrapper.Item(System.Int32)">
            <summary>
            Gets and sets the value in the unmanated array at the given index.
             </summary>
            <remarks>
            Throws and <see cref="T:System.IndexOutOfRangeException"/> if the index is not 
            within the range of the array.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Misc.UnManagedUIntArrayWrapper">
            <summary>
            Class wrapping an unmanaged array of ints. It allows getting and setting values.
            <para>
            This is unsafe code!!! 
            Be sure that the array is allocated and has the size matching the count parameter.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Misc.UnManagedUIntArrayWrapper.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Create an unmanated array wrapper based on the pointer and the count.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.Misc.UnManagedUIntArrayWrapper.Item(System.Int32)">
            <summary>
            Gets and sets the value in the unmanated array at the given index.
             </summary>
            <remarks>
            Throws and <see cref="T:System.IndexOutOfRangeException"/> if the index is not 
            within the range of the array.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Misc.UnManagedShortArrayWrapper">
            <summary>
            Class wrapping an unmanaged array of floats. It allows getting and setting values.
            <para>
            This is unsafe code!!! 
            Be sure that the array is allocated and has the size matching the count parameter.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Misc.UnManagedShortArrayWrapper.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Create an unmanated array wrapper based on the pointer and the count.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.Misc.UnManagedShortArrayWrapper.Item(System.Int32)">
            <summary>
            Gets and sets the value in the unmanated array at the given index.
             </summary>
            <remarks>
            Throws and <see cref="T:System.IndexOutOfRangeException"/> if the index is not 
            within the range of the array.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Misc.UnManagedUShortArrayWrapper">
            <summary>
            Class wrapping an unmanaged array of floats. It allows getting and setting values.
            <para>
            This is unsafe code!!! 
            Be sure that the array is allocated and has the size matching the count parameter.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Misc.UnManagedUShortArrayWrapper.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Create an unmanated array wrapper based on the pointer and the count.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.Misc.UnManagedUShortArrayWrapper.Item(System.Int32)">
            <summary>
            Gets and sets the value in the unmanated array at the given index.
             </summary>
            <remarks>
            Throws and <see cref="T:System.IndexOutOfRangeException"/> if the index is not 
            within the range of the array.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsDynamicItemInfoWrapper">
            <summary>
            Information for a dynamic item.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsDynamicItemInfoWrapper.ReadAndCreate(DHI.Generic.MikeZero.DFS.DfsAbstractFile,System.Int32,System.Boolean)">
            <summary>
            Reads the dynamic item information from the header structure of the 
            <paramref name="dfsFile"/> and creates a <see cref="T:DHI.Generic.MikeZero.DFS.DfsDynamicItemInfoWrapper"/>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsDynamicItemInfoWrapper.AssociatedStaticItemNumbers">
            <summary>
            List of associated static item numbers.
            </summary>
            <remarks>
            You can not modify in the associated static numbers. This returns
            a read-only list.
            </remarks>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsDynamicItemInfoWrapper.ValueType">
            <summary>
            Type of value in item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsDynamicItemInfoWrapper.MaxValue">
            <summary>
            Maximum value of the item
            <para>
            See <see cref="P:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo.MaxValue"/> for details
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsDynamicItemInfoWrapper.MinValue">
            <summary>
            Minimum value of the item.
            <para>
            See <see cref="P:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo.MinValue"/> for details
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsSimpleDynamicItemInfo">
            <summary>
            Basic/simple item info used by builders when creating new files.
            </summary>
            <remarks>
            Could also be used when opening in read mode, where data is 
            not editable, but that is currently not the case.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.IDfs1File">
            <summary>
            Interface for a dfs1 file
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs1File">
            <summary>
            Dfs1 file class
            <para>
            Use the <see cref="T:DHI.Generic.MikeZero.DFS.DfsFileFactory"/> to open an existing dfs1 file.
            </para>
            <para>
            Use the <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs1Builder"/> to create a new dfs1 file.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs1File.#ctor(DHI.Generic.MikeZero.DFS.IDfsFile)">
            <summary>
            Wrap a dfs file object in a dfs1 file object.
            <para>
            If dfs file is not a dfs1 file, behavior is undefined.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs1File.ReadItemTimeStepNext">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStepNext"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs1File.ReadItemTimeStep(System.Int32,System.Int32)">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs1File.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData,System.Int32)">
            <summary>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData,System.Int32)"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsStaticItemBuilder">
            <summary>
            Builder to configure an existing dynamic item structure.
            <para>
            The following functions must be set:
            <see cref="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.Set(System.String,DHI.Generic.MikeZero.eumQuantity,DHI.Generic.MikeZero.DFS.DfsSimpleType)"/>,
            <see cref="M:DHI.Generic.MikeZero.DFS.DfsAbstractItemBuilder.SetAxis(DHI.Generic.MikeZero.DFS.IDfsSpatialAxis)"/>, 
            <see cref="M:DHI.Generic.MikeZero.DFS.DfsStaticItemBuilder.SetData(System.Array)"/>.
            </para>
            </summary>
            <remarks>
            This creates a new static item when instantiated, but the item
            is not yet a part of the file. When <see cref="M:DHI.Generic.MikeZero.DFS.DfsStaticItemBuilder.GetStaticItem"/>
            is called, a <see cref="T:DHI.Generic.MikeZero.DFS.DfsStaticItemWrapper"/> is returned that
            can be added to the <see cref="T:DHI.Generic.MikeZero.DFS.DfsBuilder"/>.
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsStaticItemBuilder.SetData(System.Array)">
            <summary>
            Sets the data array for the static item.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsStaticItemBuilder.Validate">
            <summary>
            Validate will return a string of issues from the item builder.
            When this returns an empty list, the item has been properly build.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsStaticItemBuilder.GetStaticItem">
            <summary>
            Returns the static item.
            <para>
            It does call <see cref="M:DHI.Generic.MikeZero.DFS.DfsStaticItemBuilder.Validate"/>, and if validate returns any issues,
            this method will throw an exception.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsFileFactory">
            <summary>
            Factory interface for opening different file types.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs1FileOpen(System.String)">
            <summary>
            Open a dfs1 file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs1FileOpenEdit(System.String)">
            <summary>
            Open a dfs1 file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs1FileOpenAppend(System.String)">
            <summary>
            Open a dfs1 file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs1FileOpen(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs1 file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs1FileOpenEdit(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs1 file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs1FileOpenAppend(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs1 file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs2FileOpen(System.String)">
            <summary>
            Open a dfs2 file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs2FileOpenEdit(System.String)">
            <summary>
            Open a dfs2 file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs2FileOpenAppend(System.String)">
            <summary>
            Open a dfs2 file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs2FileOpen(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs2 file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs2FileOpenEdit(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs2 file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs2FileOpenAppend(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs2 file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs3FileOpen(System.String)">
            <summary>
            Open a dfs3 file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs3FileOpenEdit(System.String)">
            <summary>
            Open a dfs3 file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs3FileOpenAppend(System.String)">
            <summary>
            Open a dfs3 file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs3FileOpen(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs3 file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs3FileOpenEdit(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs3 file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.Dfs3FileOpenAppend(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs3 file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.DfsuFileOpen(System.String)">
            <summary>
            Open a dfsu file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.DfsuFileOpenEdit(System.String)">
            <summary>
            Open a dfsu file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.DfsuFileOpenAppend(System.String)">
            <summary>
            Open a dfsu file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.DfsuFileOpen(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfsu file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.DfsuFileOpenEdit(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfsu file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.DfsuFileOpenAppend(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfsu file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.DfsGenericOpen(System.String)">
            <summary>
            Open a dfs file for reading, using the general classes.
            <para>
            Preferably you should open the file with one 
            of the dfs file specific versions.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.DfsGenericOpenEdit(System.String)">
            <summary>
            Open a dfs file for editing, using the general classes.
            <para>
            Preferably you should open the file with one 
            of the dfs file specific versions.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.DfsGenericOpenAppend(System.String)">
            <summary>
            Open a dfs file for appending using the general classes.
            <para>
            Preferably you should open the file with one 
            of the dfs file specific versions.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.DfsGenericOpen(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs file for reading, using the general classes.
            <para>
            Preferably you should open the file with one 
            of the dfs file specific versions.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.DfsGenericOpenEdit(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs file for editing, using the general classes.
            <para>
            Preferably you should open the file with one 
            of the dfs file specific versions.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.DfsGenericOpenAppend(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs file for appending using the general classes.
            <para>
            Preferably you should open the file with one 
            of the dfs file specific versions.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.MeshFileRead(System.String)">
            <summary>
            Read a mesh file, load all data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsFileFactory.CreateDefaultParameters">
            <summary>
            Create a set of default parameters used when opening
            the dfs file
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsFileFactory">
            <summary>
            Factory class for opening different file types.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DHI#Generic#MikeZero#DFS#IDfsFileFactory#MeshFileRead(System.String)">
            <summary>
            Open and read a mesh file
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs1FileOpen(System.String)">
            <summary>
            Open a dfs1 file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs1FileOpenEdit(System.String)">
            <summary>
            Open a dfs1 file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs1FileOpenAppend(System.String)">
            <summary>
            Open a dfs1 file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs1FileOpen(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs1 file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs1FileOpenEdit(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs1 file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs1FileOpenAppend(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs1 file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs2FileOpen(System.String)">
            <summary>
            Open a dfs2 file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs2FileOpenEdit(System.String)">
            <summary>
            Open a dfs2 file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs2FileOpenAppend(System.String)">
            <summary>
            Open a dfs2 file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs2FileOpen(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs2 file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs2FileOpenEdit(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs2 file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs2FileOpenAppend(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs2 file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs3FileOpen(System.String)">
            <summary>
            Open a dfs3 file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs3FileOpenEdit(System.String)">
            <summary>
            Open a dfs3 file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs3FileOpenAppend(System.String)">
            <summary>
            Open a dfs3 file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs3FileOpen(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs3 file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs3FileOpenEdit(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs3 file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Dfs3FileOpenAppend(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs3 file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DfsuFileOpen(System.String)">
            <summary>
            Open a dfsu file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DfsuFileOpenEdit(System.String)">
            <summary>
            Open a dfsu file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DfsuFileOpenAppend(System.String)">
            <summary>
            Open a dfsu file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DfsuFileOpen(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfsu file for reading.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DfsuFileOpenEdit(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfsu file for editing.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DfsuFileOpenAppend(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfsu file for appending.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DfsGenericOpen(System.String)">
            <summary>
            Open a dfs file for reading, using the generic dfs class.
            <para>
            Only use this in case one of the specialized dfs file classes 
            can not handle the file
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DfsGenericOpenEdit(System.String)">
            <summary>
            Open a dfs file for editing, using the generic dfs class.
            <para>
            Only use this in case one of the specialized dfs file classes 
            can not handle the file
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DfsGenericOpenAppend(System.String)">
            <summary>
            Open a dfs file for appending, using the generic dfs class.
            <para>
            Only use this in case one of the specialized dfs file classes 
            can not handle the file
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DfsGenericOpen(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs file for reading, using the generic dfs class.
            <para>
            Only use this in case one of the specialized dfs file classes 
            can not handle the file
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DfsGenericOpenEdit(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs file for editing, using the generic dfs class.
            <para>
            Only use this in case one of the specialized dfs file classes 
            can not handle the file
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DfsGenericOpenAppend(System.String,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs file for appending, using the generic dfs class.
            <para>
            Only use this in case one of the specialized dfs file classes 
            can not handle the file
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DfsGenericOpen(System.String,DHI.Generic.MikeZero.DFS.DfsFileMode,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Open a dfs file, using the generic dfs class.
            <para>
            Only use this in case one of the specialized dfs file classes 
            can not handle the file
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.Create(System.String,System.IntPtr@,System.IntPtr@,DHI.Generic.MikeZero.DFS.DfsFileMode,DHI.Generic.MikeZero.DFS.IDfsParameters)">
            <summary>
            Used by <see cref="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.DfsGenericOpen(System.String,DHI.Generic.MikeZero.DFS.DfsFileMode,DHI.Generic.MikeZero.DFS.IDfsParameters)"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.MeshFileRead(System.String)">
            <summary>
            Open a mesh file
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsFileFactory.CreateDefaultParameters">
            <summary>
            Create a set of default parameters used when opening
            the dfs file
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsAxisTvarD1">
            <summary>
            Axis description of a 1-dimensional time-varying curvelinear structured grid.
            The axis coordinates are retrieved together with the values for a given timestep.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisTvarD1.XCount">
            <summary>
            Number of points in the x-direction.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsAxisTvarD2">
            <summary>
            Axis description of a 2-dimensional time-varying curvelinear structured grid
            The axis coordinates are retrieved together with the values for a given timestep.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisTvarD2.XCount">
            <summary>
            Number of points in the x-direction.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisTvarD2.YCount">
            <summary>
            Number of points in the y-direction.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsAxisTvarD3">
            <summary>
            Axis description of a 2-dimensional time-varying curvelinear structured grid
            The axis coordinates are retrieved together with the values for a given timestep.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisTvarD3.XCount">
            <summary>
            Number of points in the x-direction.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisTvarD3.YCount">
            <summary>
            Number of points in the y-direction.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.IDfsAxisTvarD3.ZCount">
            <summary>
            Number of points in the z-direction.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.mesh.MeshFile">
            <summary>
            Class for handling mesh files (reading, writing, editing)
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.mesh.MeshFile.Read(System.String)">
            <summary>
            Read .mesh file and load all data.
            <para>
            If an element specifies a node number of zero, that node number is ignored, and
            does not become a part of the mesh data structure. That is the case for e.g.
            mixed triangular/quadrilateral meshes, where all elements specify 4 nodes, 
            and triangular elements specifies the last node as zero.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.mesh.MeshFile.Write(System.String)">
            <summary>
            Write <see cref="T:DHI.Generic.MikeZero.DFS.mesh.MeshFile"/> to filename
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.mesh.MeshFile.ReadMesh(System.String)">
            <summary>
            Read the mesh from the provided mesh file
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.EumQuantity">
            <summary>
            Quantity of the data stored in the mesh file. This is the quantity of the
            <see cref="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.Z"/> variable.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.ProjectionString">
            <summary>
            The projection string 
            <para>
            <see cref="T:DHI.Generic.MikeZero.DFS.IDfsProjection"/> for details on its format.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.NumberOfNodes">
            <summary>
            Number of nodes in the mesh.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.NumberOfElements">
            <summary>
            Number of elements in the mesh
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.NodeIds">
            <summary>
            Node Id's
            <para>
            You can modify each value individually directly in the list, 
            or provide a new array of values, which must have the same
            length as the original one.
            </para>
            <para>
            Be aware that changing this to anything but the default values (1,2,3,...)
            can make some tools stop working.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.X">
            <summary>
            Node X coordinates.
            <para>
            You can modify each coordinate individually directly in the list, 
            or provide a new array of coordinates, which must have the same
            length as the original one.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.Y">
            <summary>
            Node Y coordinates.
            <para>
            You can modify each coordinate individually directly in the list, 
            or provide a new array of coordinates, which must have the same
            length as the original one.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.Z">
            <summary>
            Node Z coordinates.
            <para>
            You can modify each coordinate individually directly in the list, 
            or provide a new array of coordinates, which must have the same
            length as the original one.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.Code">
            <summary>
            Node boundary code.
            <para>
            You can modify each value individually directly in the list, 
            or provide a new array of values, which must have the same
            length as the original one.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.ElementIds">
            <summary>
            Element Id's
            <para>
            You can modify each value individually directly in the list, 
            or provide a new array of values, which must have the same
            length as the original one.
            </para>
            <para>
            Be aware that changing this to anything but the default values (1,2,3,...)
            can make some tools stop working.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.ElementType">
            <summary>
            Array of element types. See documentation for each type.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.ElementTable">
            <summary>
            The <see cref="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.ElementTable"/> defines for each element which 
            nodes that defines the element. 
            <para>
            The numbers in the <see cref="P:DHI.Generic.MikeZero.DFS.mesh.MeshFile.ElementTable"/> are node numbers, not indices!
            Each value in the table must be between 1 and number-of-nodes.
            </para>
            <para>
            You can modify each value individually directly in the list, 
            or provide a new array of values, which must have the same
            length as the original one.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder">
            <summary>
            Builder for creating a mesh file.
            <para>
            The following must be set:
            <see cref="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.SetProjection(System.String)"/>/<see cref="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.SetProjection(DHI.Generic.MikeZero.DFS.IDfsProjection)"/>,
            <see cref="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.SetNodes(System.Double[],System.Double[],System.Double[],System.Int32[])"/>,
            <see cref="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.SetElements(System.Int32[][])"/>.
            Other setters are optional and if not set, default values are used.
            </para>
            <para>
            Be aware; setting the node and element id's to anything but the default
            values can cause some tools to fail.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.SetProjection(DHI.Generic.MikeZero.DFS.IDfsProjection)">
            <summary>
            Set the projection to use for the mesh
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.SetProjection(System.String)">
            <summary>
            Set the projection to use for the mesh
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.SetEumQuantity(DHI.Generic.MikeZero.eumQuantity)">
            <summary>
            Set the quantity to use for the mesh Z variable. If not set, 
            it will use a Bathymetry item type (eumIBathymetry) 
            with meter unit (eumUmeter).
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.SetNodes(System.Single[],System.Single[],System.Single[],System.Int32[])">
            <summary>
            Set node coordinates and code.
            <para>
            Coordinates are converted to doubles and stored.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.SetNodes(System.Double[],System.Double[],System.Double[],System.Int32[])">
            <summary>
            Set node coordinates and code.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.SetNodeIds(System.Int32[])">
            <summary>
            Set the node id's. Optional. If not set, default values are used (1,2,3,...)
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.SetElements(System.Int32[][])">
            <summary>
            Set element connectivity: For each element is specified which nodes
            the element consist of. The node is specified by its index into the list of nodes.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.SetElementIds(System.Int32[])">
            <summary>
            Set the element id's. Optional. If not set, default values are used (1,2,3,...)
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.Validate">
            <summary>
            Validate will return a string of issues from the item builder.
            When this returns an empty list, the item has been properly build.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.CreateMesh">
            <summary>
            Create and return a new <see cref="T:DHI.Generic.MikeZero.DFS.mesh.MeshFile"/> object
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.mesh.MeshBuilder.Create(DHI.Generic.MikeZero.DFS.dfsu.DfsuFile)">
            <summary>
            Create a mesh file from the provided dfsu file.
            <para>
            The dfsu file must be a 2D dfsu file.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfsu.DfsuUtil">
            <summary>
            Utility and extension methods for <see cref="T:DHI.Generic.MikeZero.DFS.dfsu.DfsuFile"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuUtil.CalculateElementCenterCoordinates(DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            For each element, calculates the element center coordinate
            as the average of all node coordinates of the nodes in 
            each element.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuUtil.GetDateTimes(DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile)">
            <summary>
            Return an array of DateTimes which are the times for each timestep
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuUtil.FindTopLayerElements(DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile)">
            <summary>
            Find element indices (zero-based) of the elements being the upper-most element
            in its column.
            <para>
            Each column is identified by matching node id numbers. For 3D elements the
            last half of the node numbers of the bottom element must match the first half
            of the node numbers in the top element. For 2D vertical elements the order of 
            the node numbers in the bottom element (last half number of nodes) are reversed 
            compared to those in the top element (first half number of nodes).
            </para>
            </summary>
            <returns>A list of element indices of top layer elements</returns>
            <remarks>
            To find the number of elements in each column, assuming the result
            is stored in res:
            <para>
            For the first column it is res[0]+1.
            </para>
            <para>
            For the i'th column, it is res[i]-res[i-1].
            </para>
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuUtil.FindTopLayerElements(System.Int32[][])">
            <summary>
            Find element indices (zero based9 of the elements being the upper-most element
            in its column.
            <para>
            Each column is identified by matching node id numbers. For 3D elements the
            last half of the node numbers of the bottom element must match the first half
            of the node numbers in the top element. For 2D vertical elements the order of 
            the node numbers in the bottom element (last half number of nodes) are reversed 
            compared to those in the top element (first half number of nodes).
            </para>
            </summary>
            <returns>A list of element indices of top layer elements</returns>
            <remarks>
            To find the number of elements in each column, assuming the result
            is stored in res:
            <para>
            For the first column it is res[0]+1.
            </para>
            <para>
            For the i'th column, it is res[i]-res[i-1].
            </para>
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuUtil.FindTopLayerElements(System.Int32[][],System.Double[],System.Double[])">
            <summary>
            Find element indices (zero based) of the elements being the upper-most element
            in its column.
            <para>
            This method uses the element center (x,y) coordinate, and identifies
            each column by having the same element center (x,y) coordinate.
            </para>
            </summary>
            <returns>A list of element indices of top layer elements</returns>
            <remarks>
            To find the number of elements in each column, assuming the result
            is stored in res:
            <para>
            For the first column it is res[0]+1.
            </para>
            <para>
            For the i'th column, it is res[i]-res[i-1].
            </para>
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuUtil.FindMaxNumberOfLayers(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Find the maximum number of layers, based on the indices of
            all top layer elements.
            </summary>
            <remarks>
            Assuming that the <paramref name="topLayerElements"/> comes
            ordered.
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfsu.DfsuUtil.FindMinNumberOfLayers(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Find the minimum number of layers, based on the indices of
            all top layer elements.
            </summary>
            <remarks>
            Assuming that the <paramref name="topLayerElements"/> comes
            ordered.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsStaticItem">
            <summary>
            Item info for static items, used by builders when creating new files.
            </summary>
            <remarks>
            Could also be used when opening in read mode, where data is 
            not editable, but that is currently not the case.
            </remarks>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsSimpleDynamicItemInfoAdaptor">
            <summary>
            Class that contains item information for dynamic items
            where you are not allowed to modify the spatial axis.
            </summary>
            <remarks>
            This adapts a <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/> to the <see cref="T:DHI.Generic.MikeZero.DFS.IDfsSimpleDynamicItemInfo"/>
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsSimpleDynamicItemInfoAdaptor.SetUnitConversion(DHI.Generic.MikeZero.DFS.UnitConversionType,DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Sets the unit conversion for a specific item. 
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsSimpleDynamicItemInfoAdaptor.ItemNumber">
            <summary>
            Item number, in list of items. 1 based.
            <para>
            For newly created/added items this can be zero
            </para>
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsSimpleDynamicItemInfoAdaptor.Name">
            <summary>
            Name of item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsSimpleDynamicItemInfoAdaptor.Quantity">
            <summary>
            EUM quantity of item
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsSimpleDynamicItemInfoAdaptor.DataType">
            <summary>
            Type of data stored in item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsSimpleDynamicItemInfoAdaptor.ElementCount">
            <summary>
            Number of data elements in the item.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsSimpleDynamicItemInfoAdaptor.ConversionType">
            <summary>
            Type of conversion for the data values
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsSimpleDynamicItemInfoAdaptor.ConversionUnit">
            <summary>
            Desired unit to convert to
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsSimpleDynamicItemInfoAdaptor.ValueType">
            <summary>
            Type of value in item.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsComHelper">
            <summary>
            Interface for <see cref="T:DHI.Generic.MikeZero.DFS.DfsComHelper"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsComHelper.GetItemInfoDfs(DHI.Generic.MikeZero.DFS.IDfsFile)">
            <summary>
            Get the dynamic item infos from an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsFile"/>
            as a non-generic list.
            <para>
            The elements in the list can be cast to <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsComHelper.GetItemInfoDfs123(DHI.Generic.MikeZero.DFS.dfs123.IDfs123File)">
            <summary>
            Get the dynamic item infos from an <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.IDfs123File"/>
            as a non-generic list.
            <para>
            The elements in the list can be cast to <see cref="T:DHI.Generic.MikeZero.DFS.IDfsSimpleDynamicItemInfo"/>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsComHelper.GetItemInfoDfsu(DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile)">
            <summary>
            Get the dynamic item infos from an <see cref="T:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile"/>
            as a non-generic list.
            <para>
            The elements in the list can be cast to <see cref="T:DHI.Generic.MikeZero.DFS.IDfsSimpleDynamicItemInfo"/>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsComHelper.GetCustomBlocks(DHI.Generic.MikeZero.DFS.IDfsFileInfo)">
            <summary>
            Get the custom blocks from an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsFileInfo"/>
            as a non-generic list.
            <para>
            The elements in the list can be cast to <see cref="T:DHI.Generic.MikeZero.DFS.IDfsCustomBlock"/>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IDfsComHelper.GetAssociatedStaticNumbers(DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo)">
            <summary>
            Get the list of associated static item numbers <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/>
            as a non-generic list.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsComHelper">
            <summary>
            Helper class for using component through COM.
            <para>
            Translates generic lists to non-generic lists that 
            can be used through COM
            </para>
            </summary>
            <remarks>
            <code>
            IDfsFile            : IList{IDfsDynamicItemInfo} ItemInfo { get; }
            IDfs123File         : IList{IDfsSimpleDynamicItemInfo} ItemInfo { get; }
            IDfsuFile           : IList{DfsuDynamicItemInfo} ItemInfo { get; }
            IDfsFileInfo        : IList{IDfsCustomBlock} CustomBlocks { get; }
            IDfsDynamicItemInfo : IList{int} AssociatedStaticItemNumbers { get; }
            </code>
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsComHelper.GetItemInfoDfs(DHI.Generic.MikeZero.DFS.IDfsFile)">
            <summary>
            Get the dynamic item infos from an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsFile"/>
            as a non-generic list.
            <para>
            The elements in the list can be cast to <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsComHelper.GetItemInfoDfs123(DHI.Generic.MikeZero.DFS.dfs123.IDfs123File)">
            <summary>
            Get the dynamic item infos from an <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.IDfs123File"/>
            as a non-generic list.
            <para>
            The elements in the list can be cast to <see cref="T:DHI.Generic.MikeZero.DFS.IDfsSimpleDynamicItemInfo"/>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsComHelper.GetItemInfoDfsu(DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile)">
            <summary>
            Get the dynamic item infos from an <see cref="T:DHI.Generic.MikeZero.DFS.dfsu.IDfsuFile"/>
            as a non-generic list.
            <para>
            The elements in the list can be cast to <see cref="T:DHI.Generic.MikeZero.DFS.IDfsSimpleDynamicItemInfo"/>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsComHelper.GetCustomBlocks(DHI.Generic.MikeZero.DFS.IDfsFileInfo)">
            <summary>
            Get the custom blocks from an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsFileInfo"/>
            as a non-generic list.
            <para>
            The elements in the list can be cast to <see cref="T:DHI.Generic.MikeZero.DFS.IDfsCustomBlock"/>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsComHelper.GetAssociatedStaticNumbers(DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo)">
            <summary>
            Get the list of associated static item numbers <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/>
            as a non-generic list.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IProjectionConverter">
            <summary>
            Facade for objects that can convert conversions from DHI to other system
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.IProjectionConverter.ConvertToGis(System.String)">
            <summary>
            Get the equivalent projection string in GIS
            </summary>
            <param name="sDHIProjection">DHI projection string</param>
            <returns>GIS projection string</returns>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsExtensions">
            <summary>
            Set of extension methods for different interfaces and classes.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.IsCalendar(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)">
            <summary>
            Returns true if the temporal axis is a calendar axis
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.IsEquidistant(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)">
            <summary>
            Returns true if the temporal axis is equidistant.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.ToSeconds(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis,System.Double)">
            <summary>
            Converts a time value in the unit of the temporal axis 
            (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/>) to 
            a time value in seconds.
            </summary>
            <param name="timeAxis">Time axis with time unit</param>
            <param name="relativeTime">Relative time to convert to seconds.</param>
            <returns>The relative time in seconds</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.ToRelativeTime(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis,System.Double)">
            <summary>
            Converts a time value in seconds to a time value in the unit 
            of the temporal axis.
            </summary>
            <param name="timeAxis">Time axis with time unit</param>
            <param name="relativeSeconds">Relative time in seconds to convert.</param>
            <returns>The time in time axis unit</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.ToRelativeTime(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis,System.DateTime)">
            <summary>
            Returns the <paramref name="dateTime"/> in relative time from the 
            start time of the time axis, in the unit used by the file. 
            The time axis must be a calendar type 
            axis.
            <para>
            Note that for the equidistant axes, the first time step may be offset 
            (see <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.StartTimeOffset"/>), however the
            time returned here is relative to the start time and not the first time
            step. This is matching the time returned by the read methods (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Time"/>).
            </para>
            </summary>
            <param name="timeAxis">Temporal, calendar axis.</param>
            <param name="dateTime">Date time to get relative time for</param>
            <returns>Time in time axis unit, relative to start time of calendar axis</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.ToRelativeSeconds(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis,System.DateTime)">
            <summary>
            Returns the <paramref name="dateTime"/> in relative seconds from the 
            start time of the time axis, in the unit used by the file. 
            The time axis must be a calendar type axis.
            <para>
            Note that for the equidistant axes, the first time step may be offset 
            (see <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.StartTimeOffset"/>), however the
            time returned here is relative to the start time and not the first time
            step. This is matching the time returned by the read methods (<see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Time"/>).
            </para>
            </summary>
            <param name="timeAxis">Temporal, calendar axis.</param>
            <param name="dateTime">Date time to get relative time for</param>
            <returns>Time in seconds, relative to start time of calendar axis</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.GetDateTimes(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)">
            <summary>
            Return an array of DateTimes which are the times for each timestep.
            <para>
            For non-equidistant axis, only the first and the last time
            are populated correctly. The rest are populated with <see cref="F:System.DateTime.MinValue"/>.
            </para>
            <para>
            For time type axis, first time is <see cref="M:DHI.Generic.MikeZero.DFS.DfsExtensions.StartTimeOffsetInSeconds(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)"/> 
            after <see cref="F:System.DateTime.MinValue"/>.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.GetRelativeSeconds(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)">
            <summary>
            Return an array of doubles which are the the number of seconds since the start time 
            for each timestep.
            <para>
            For non-equidistant axis, only the first and the last time
            are populated correctly. The rest are populated with -1
            </para>
            <para>
            For time type axis, first time is <see cref="M:DHI.Generic.MikeZero.DFS.DfsExtensions.StartTimeOffsetInSeconds(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)"/> 
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.GetDateTimes(DHI.Generic.MikeZero.DFS.IDfsEqCalendarAxis)">
            <summary>
            Return an array of DateTimes which are the times for each timestep
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.TimeSpan(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)">
            <summary>
            Time span of all data in file, in unit described by <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.TimeUnit"/>.
            <para>
            The <see cref="P:DHI.Generic.MikeZero.DFS.IDfsTemporalAxis.StartTimeOffset"/> is not included in the span. The span
            starts at the time of the StartTimeOffset
            </para>
            <para>
            Convenience method that returns/calculates the time span consistently for all 
            types of time axes,
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.TimeSpanInSeconds(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)">
            <summary>
            Calculate the time span in seconds
            <para>
            If the time axis unit can not be converted to seconds, an exception is thrown
            is returned.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.StartTimeOffsetInSeconds(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)">
            <summary>
            Return the start time offset in seconds
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.EndDateTime(DHI.Generic.MikeZero.DFS.IDfsNonEqCalendarAxis)">
            <summary>
            Get the end date time for a non-equidistant calendar axis.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.EndDateTime(DHI.Generic.MikeZero.DFS.IDfsEqCalendarAxis)">
            <summary>
            Get the end date time for an equidistant calendar axis.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.TimeStepInSeconds(DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)">
            <summary>
            Calculate the time step in seconds for an equidistant temporal axis.
            <para>
            If the time axis is not equidistant, zero is returned.
            </para>
            <para>
            If the time axis unit can not be converted to seconds, an exception is thrown
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.TimeStepInSeconds(DHI.Generic.MikeZero.DFS.IDfsEqCalendarAxis)">
            <summary>
            Calculate the time step in seconds for an equidistant calendar axis
            <para>
            If the time axis unit can not be converted to seconds, an exception is thrown
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.TimeStepInSeconds(DHI.Generic.MikeZero.DFS.IDfsEqTimeAxis)">
            <summary>
            Calculate the time step in seconds for an equidistant time axis
            <para>
            If the time axis unit can not be converted to seconds, an exception is thrown
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.TimeInSeconds(DHI.Generic.MikeZero.DFS.IDfsItemData,DHI.Generic.MikeZero.DFS.IDfsTemporalAxis)">
            <summary>
            Convert the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Time"/> to seconds.
            <para>
            If the time axis unit can not be converted to seconds, an exception is thrown.
            </para>
            </summary>
            <param name="itemData">Item data to get time from</param>
            <param name="timeAxis">Time axis from the file that the item belongs to</param>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.Search(DHI.Generic.MikeZero.DFS.IDfsFile,System.DateTime)">
            <summary>
            Searches the dfs file for the time step index of a time, 
            and returns the zero-based time step index. The time axis of the file
            must be a calendar type time axis
            <para>
            NOTE: For the non-equidistant time axes, the metod will read the first item 
            in the file for a number of timesteps in random order, performing a binary 
            search in the file data on disc. This will be slow if used many times on the same file.
            </para>
            <para>
            For the equidistant time axis, the method will calculate the time step index
            directly without reading data from the file.
            </para>
            </summary>
            <param name="dfsFile">Dfs file to search in</param>
            <param name="time">The time to locate.</param>
            <returns>
            The zero-based index of the time in the dfs file, if time is found. 
            Otherwise, the negative number that is the bitwise complement 
            of the time step interval number, i.e. index of the next element 
            that is larger than the time or, if there is no larger element, 
            the bitwise complement of the number of time steps.</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.Search(DHI.Generic.MikeZero.DFS.IDfsFile,System.Double)">
            <summary>
            Searches the dfs file for the time step index of a time, 
            and returns the zero-based time step index.
            <para>
            NOTE: For the non-equidistant time axes, the metod will read the first item 
            in the file for a number of timesteps in random order, performing a binary 
            search in the file data on disc. This will be slow if used many times on the same file.
            </para>
            <para>
            For the equidistant time axis, the method will calculate the time step index
            directly without reading data from the file.
            </para>
            </summary>
            <param name="dfsFile">Dfs file to search in</param>
            <param name="relativeTime">The time to locate, in the time unit of the time axis.</param>
            <returns>
            The zero-based index of the time in the dfs file, if time is found. 
            Otherwise, the negative number that is the bitwise complement 
            of the time step interval number, i.e. index of the next element 
            that is larger than the time or, if there is no larger element, 
            the bitwise complement of the number of time steps.</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.BinarySearch(DHI.Generic.MikeZero.DFS.IDfsFile,System.Double)">
            <summary>
            Searches the file for the time step with the provided time
            </summary>
            <returns>The zero-based index, if time is found; 
            otherwise, a negative number that is the bitwise complement 
            of the index of the next time that is larger than time or, 
            if there is no larger times, the bitwise complement of Count.</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.AxisEquals(DHI.Generic.MikeZero.DFS.IDfsSpatialAxis,DHI.Generic.MikeZero.DFS.IDfsSpatialAxis)">
            <summary>
            Check whether two spatial axis equals.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.Clone(DHI.Generic.MikeZero.DFS.IDfsSpatialAxis)">
            <summary>
            Make a clone/copy of a spatial axis. Array data are copied (deep clone)
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.Update(DHI.Generic.MikeZero.DFS.IDfsSpatialAxis,DHI.Generic.MikeZero.DFS.IDfsSpatialAxis)">
            <summary>
            Updates the destination axis with the properties from the source axis. 
            Only the editable properties are edited.
            </summary>
            <rereturns>True on success</rereturns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.GeometryItemType(DHI.Generic.MikeZero.DFS.IDfsSpatialAxis)">
            <summary>
            Get the item type of the spatial axis geometry.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.CreateAllCoordinates(DHI.Generic.MikeZero.DFS.IDfsSpatialAxis)">
            <summary>
            Create coordinates for all data points, based on the spatial axis.
            <para>
            It calculates node coordinates for all nodes in the axis, i.e.
            the number of <see cref="T:DHI.Generic.MikeZero.DFS.Coords"/> returned may not equal the
            number of data values in the item. And the coordinates may be offset
            by half a grid cell compared to the center coordinate for the data values.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.XCoordinatesTo2D(DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2)">
            <summary>
            Copy the x coordinates of an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2"/>
            to a 2D array.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.YCoordinatesTo2D(DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2)">
            <summary>
            Copy the y coordinates of an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsAxisCurveLinearD2"/>
            to a 2D array.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.IsEditable(DHI.Generic.MikeZero.DFS.DfsFileMode)">
            <summary>
            Returns true if the filemode corresponds to a file that is editable.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.CreateEmptyItemData(DHI.Generic.MikeZero.DFS.IDfsFile,System.Int32)">
            <summary>
            Create an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData`1"/> of the correct type for the
            item with the given <paramref name="itemNumber"/>.
            <para>
            The result can be used by <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData,System.Int32)"/>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.CreateEmptyItemData(DHI.Generic.MikeZero.DFS.IDfsSimpleDynamicItemInfo)">
            <summary>
            Create an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData`1"/> of the correct type for the
            item.
            <para>
            The result can be used by <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileIO.ReadItemTimeStep(DHI.Generic.MikeZero.DFS.IDfsItemData,System.Int32)"/>
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.ReShape``1(``0[],System.Int32,System.Int32)">
            <summary>
            Reshape a 1D array to a 2D array of size 
            [<paramref name="xCount"/> , <paramref name="yCount"/>]
            <para>
            The length of the <paramref name="arr"/> must match 
            (<paramref name="xCount"/> X <paramref name="yCount"/>)
            </para>
            </summary>
            <remarks>
            It is assumed that the data in <paramref name="arr"/> is
            in x order first, i.e, arr[0] and arr[1] is at 2D index (0,0) and (1,0)
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.ReShape``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Reshape a 1D array to a 3D array of size 
            [<paramref name="xCount"/> , <paramref name="yCount"/>, <paramref name="zCount"/>]
            <para>
            The length of the <paramref name="arr"/> must match 
            (<paramref name="xCount"/> X <paramref name="yCount"/> X , <paramref name="zCount"/>)
            </para>
            </summary>
            <remarks>
            It is assumed that the data in <paramref name="arr"/> is
            in x order first, and y order next, i.e, arr[0] and arr[1] is at 3D index (0,0,0) and (1,0,0)
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.dfsEncode``1(``0[],System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Compress the <paramref name="uncompressed"/> array using the encoding keys.
            <para>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileInfo.GetEncodeKey(System.Int32[]@,System.Int32[]@,System.Int32[]@)"/> for details on the encoding key 
            definition.
            </para>
            <para>
            Data outside the encoding key definitions are discarded (set to delete value).
            </para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uncompressed">Array of data that is to be compressed</param>
            <param name="xSize">size in x-dimension of uncompressed array</param>
            <param name="ySize">size in y-dimension of uncompressed array. 1 if data does not have a y-dimension</param>
            <param name="zSize">size in z-dimension of uncompressed array. 1 if data does not have a z-dimension</param>
            <param name="xKey">X encoding key. All values of array must be below <paramref name="xSize"/></param>
            <param name="yKey">Y encoding key. All values of array must be below <paramref name="ySize"/></param>
            <param name="zKey">Z encoding key. All values of array must be below <paramref name="zSize"/></param>
            <returns>A compressed array</returns>
            <remarks>
            Dynamic item data are automatically encoded by the ufs.dll. Static items are not so.
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.dfsDecode``1(``0[],System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[],``0)">
            <summary>
            Decompress the <paramref name="compressed"/> array using the encoding keys
            <para>
            See <see cref="M:DHI.Generic.MikeZero.DFS.IDfsFileInfo.GetEncodeKey(System.Int32[]@,System.Int32[]@,System.Int32[]@)"/> for details on the encoding key 
            definition
            </para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="compressed">Array of data that is to be compressed</param>
            <param name="xSize">size in x-dimension of uncompressed array</param>
            <param name="ySize">size in y-dimension of uncompressed array. 1 if data does not have a y-dimension</param>
            <param name="zSize">size in z-dimension of uncompressed array. 1 if data does not have a z-dimension</param>
            <param name="xKey">X encoding key. All values of array must be below <paramref name="xSize"/></param>
            <param name="yKey">Y encoding key. All values of array must be below <paramref name="ySize"/></param>
            <param name="zKey">Z encoding key. All values of array must be below <paramref name="zSize"/></param>
            <param name="deleteValue">Value to set where there is no value defined in the compressed data</param>
            <returns>A decompressed array</returns>
            <remarks>
            Dynamic item data are automatically decoded by the ufs.dll. Static items are not so.
            </remarks>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.ToDoubleArray(System.Single[])">
            <summary>
            Copies the float array into a double array.
            </summary>
            <param name="floats">Float array to copy.</param>
            <returns>Double array with copied float values.</returns>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsExtensions.ToFloatArray(System.Double[])">
            <summary>
            Copies the double array into a float array.
            <para>
            The double values are truncated and the higher precision 
            of a double number is lost.
            </para>
            </summary>
            <param name="doubles">Double array to copy.</param>
            <returns>Float array with copied double values.</returns>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.IDfsTypeConverter">
            <summary>
            See <see cref="T:DHI.Generic.MikeZero.DFS.DfsTypeConverter"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsTypeConverter">
            <summary>
            The type converter is required for supporting using 
            the Dfs by COM in Matlab. Matlabs support for COM
            is not full, and COM in general does not support
            generics.
            <para>
            Matlab issue: If having an <see cref="T:DHI.Generic.MikeZero.DFS.IDfsFile"/>
            then you can not cast that to <see cref="T:DHI.Generic.MikeZero.DFS.IDfsFileIO"/>
            in Matlab. You can only cast if having the COM class
            but not if having the COM interface.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsItemData">
            <summary>
             Item data class, base class (abstract) that are used as base by generic item data classes.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemData.ItemNumber">
            <inheritdoc />
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemData.TimeStepIndex">
            <inheritdoc />
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemData.Time">
            <inheritdoc />
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemData.DHI#Generic#MikeZero#DFS#IDfsItemData#Data">
            <inheritdoc />
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemData.ArrayData">
            <summary>
            Abstract method, for supporting the explicit <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Data"/> implementation
            in this class.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsItemData`1">
            <summary>
             Item data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsItemData`1.#ctor">
            <summary>
            Default constructor, hidden from the public
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsItemData`1.Create``1(DHI.Generic.MikeZero.DFS.IDfsItemData,``0[])">
            <summary>
            Create a new <see cref="T:DHI.Generic.MikeZero.DFS.DfsItemData`1"/> based on an
            existing one, adding the new <paramref name="data"/>
            as data.
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemData`1.Data">
            <summary>
            Data in the file in its basic type. 
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemData`1.ArrayData">
            <summary>
            Abstract method, for supporting the explicit <see cref="P:DHI.Generic.MikeZero.DFS.IDfsItemData.Data"/> implementation
            in the base class
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsItemData2D`1">
            <summary>
             Item data for a 2D data set.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsItemData2D`1.To2DArray">
            <summary>
            Copy data to a 2D array
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemData2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Return data at the give x,y index
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.DfsItemData3D`1">
            <summary>
             Item data for a 3D data set.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.DfsItemData3D`1.To3DArray">
            <summary>
            Copy data to a 3D array
            </summary>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.DfsItemData3D`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return data at the give x,y index
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Builder">
            <summary>
            Builder for building dfs2 files.
            <para>
            The builder works in two stages. The first stage all header information
            and information of the dynamic items are provided. In the second stage
            static items are added. Then a dfs file is ready, and data for the dynamic
            items can be added.
            </para>
            <para>
            To go from the first to the second stage by calling
            <see cref="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.CreateFile(System.String)"/>, which will actually create a file on the disc.
            </para>
            <para>
            To get the final file, call <see cref="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Builder.GetFile"/>.
            </para>
            <para>
            The following must be set during stage 1:
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Builder.SpatialAxis"/>,
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.TemporalAxis"/>,
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.DataType"/>,
            <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs123Builder.Projection"/>
            </para>
            <para>
            The <see cref="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Builder.SpatialAxis"/> must be a 2D axis.
            </para>
            <para>
            Use the <see cref="T:DHI.Generic.MikeZero.DFS.DfsFileFactory"/> to create classes to set.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Builder.GetFile">
            <summary>
            Return the file as a <see cref="T:DHI.Generic.MikeZero.DFS.dfs123.Dfs2File"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Builder.Create(System.String,System.String,System.Int32)">
            <summary>
            Create a new builder that will build a dfs2 file
            </summary>
            <param name="fileTitle">Title of the file</param>
            <param name="appTitle">Title of the application creating the file</param>
            <param name="appVersionNo">Version of the application creating the file</param>
        </member>
        <member name="P:DHI.Generic.MikeZero.DFS.dfs123.Dfs2Builder.SpatialAxis">
            <summary>
            Get/Set the spatial axis of the file. This must be one of the
            2D axes.
            <para>
            This must be set.
            </para>
            <para>
            This is a stage 1 method. Setting in stage 2 will fail.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToUbg">
            <summary>
            Converter class for converting item data and item units to UBG (Unit Base Group)
            <para>
            This will convert the data and update the unit of the item quantity and spatial axis. 
            Compared to setting the <see cref="P:DHI.Generic.MikeZero.DFS.IDfsParameters.UbgConversion"/>
            this class will also update the units, <see cref="P:DHI.Generic.MikeZero.DFS.IDfsSimpleItemInfo.Quantity"/>.
            </para>
            <para>
            Be carefull when using this converter, and updating the item quantity: The underlying
            data is stored in the new unit, but and it is still assumed that the outgoing/incoming data
            is in UBG units.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToUbg.Initialize(DHI.Generic.MikeZero.DFS.IDfsFile)">
            <summary>
            Initialise this data converter for working on the given <paramref name="dfsFile"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToUbg.Convert(DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo)">
            <summary>
            Convert the dynamic item information, <see cref="T:DHI.Generic.MikeZero.DFS.IDfsDynamicItemInfo"/>.
            It sets the unit and axis unit conversion to <see cref="F:DHI.Generic.MikeZero.DFS.UnitConversionType.UbgConversion"/>
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToUbg.Convert(DHI.Generic.MikeZero.DFS.IDfsItemData)">
            <summary>
            Convert the dynamic item data, <see cref="T:DHI.Generic.MikeZero.DFS.IDfsItemData"/>.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToUbg.Revert(System.Int32,System.Array)">
            <summary>
            Revert the dynamic item data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToUbg.Convert(DHI.Generic.MikeZero.DFS.IDfsStaticItem)">
            <summary>
            Convert a static item, including its data.
            </summary>
        </member>
        <member name="M:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToUbg.Revert(DHI.Generic.MikeZero.DFS.IDfsStaticItem@,System.Array@)">
            <summary>
            Revert the static item data.
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToUbg.MyDynamicItemInfo">
            <summary>
            Private helper class that updates the units to UBG (Unit Base Group),
            in the <see cref="P:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToUbg.MyDynamicItemInfo.Quantity"/> and the <see cref="P:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToUbg.MyDynamicItemInfo.SpatialAxis"/>
            </summary>
        </member>
        <member name="T:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToUbg.MyStaticItem">
            <summary>
            Private helper class that updates the units to UBG (Unit Base Group),
            in the <see cref="P:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToUbg.MyStaticItem.Quantity"/> and the <see cref="P:DHI.Generic.MikeZero.DFS.Converters.DfsConvertToUbg.MyStaticItem.SpatialAxis"/>
            </summary>
        </member>
    </members>
</doc>
