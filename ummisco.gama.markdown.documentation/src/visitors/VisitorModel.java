package visitors;

import java.util.Map;

import markdownSyntactic.IParser;
import markdownSyntactic.MarkdownTools;
import msi.gaml.compilation.ast.ISyntacticElement;
import msi.gaml.compilation.ast.ISyntacticElement.SyntacticVisitor;

/**
 * 
 * @author damienphilippon
 * Date : 19 Dec 2017
 * Class representing the visitor of ISyntacticElement representing a World defined in GAML. This visitor
 * will generate the Markdown text for a visited IExpressionDescription for the Documentation
 */
public class VisitorModel implements SyntacticVisitor {
	/**
	 * Variable that will contain the markdown text generated by the visitor
	 */
	StringBuilder mDText;
	/**
	 * Variable representing the visitor of facets of a World
	 */
	VisitorFacets visitorFacets ;
	/**
	 * Variable representing the visitor of micro species of a World
	 */
	VisitorMicroSpecies visitorMicroSpecies = new VisitorMicroSpecies();
	/**
	 * Variable representing the visitor of attributes of a World
	 */
	VisitorAttributes visitorAttributes ;
	/**
	 * Variable representing the visitor of actions of a World
	 */
	VisitorActions visitorActions;
	/**
	 * Variable representing the visitor of reflexes of a World
	 */
	VisitorReflexes visitorReflexes = new VisitorReflexes();
	/**
	 * Variable representing all the species and the link to the documentation files that will present them
	 */
	Map<String, String> speciesLink;
	/**
	 * Variable representing all the experiments and the link to the documentation files that will present them
	 */
	Map<String, String> experimentsLink;
	
	/**
	 * Constructor of the visitor, using the linkSpecies and linkExperiments for replacing unknown variable types by their corresponding variables
	 * @param linkSpecies {@code Map<String, String>}, the map giving the link of a species to the markdown document describing it
	 * @param linkExperiments {@code Map<String, String>}, the map giving the link of an experiment to the markdown document describing it
	 */
	public VisitorModel(Map<String, String> linkSpecies,Map<String, String> linkExperiments)
	{
		this.speciesLink=linkSpecies;
		this.experimentsLink=linkExperiments;
		visitorActions= new VisitorActions(this.speciesLink,this.experimentsLink);
		visitorAttributes= new VisitorAttributes(this.speciesLink,this.experimentsLink);
		visitorFacets= new VisitorFacets(this.speciesLink,this.experimentsLink);
		
	}
	
	/**
	 * Method to directly initialise the markdown text of the visitor, in order to let it add its generated text and return it to the model descriptor
	 * @param aBuilder {@code StringBuilder}, the StringBuilder of a model descriptor that will receive the generated text
	 */
	public void setText(StringBuilder aBuilder)
	{
		mDText=aBuilder;
	}
	/**
	 * Function that returns the StringBuilder of a VisitorModel once the visitor has done its job (adding text of World)
	 * @return {@code StringBuilder} the StringBuilder of a model descriptor 
	 */
	public StringBuilder getText()
	{
		return mDText;
	}
	/**
	 * Method to dispose all the objects that have been used by the VisitorModel and release memory
	 */
	public void dispose()
	{
		this.mDText=null;
		visitorFacets.dispose();
		visitorMicroSpecies.dispose();
		visitorAttributes.dispose();
		visitorActions.dispose();
		visitorReflexes.dispose();
		this.visitorFacets=null;
		this.visitorMicroSpecies=null;
		this.visitorAttributes=null;
		this.visitorActions=null;
		this.visitorReflexes=null;
		this.experimentsLink=null;
		this.speciesLink=null;
	}
	/**
	 * Method used to visit a ISyntacticElement (expecting world species here), generating the markdown Text of it
	 * @param exp {@code ISyntacticElement}, the ISyntacticElement representing the section world that will be used to generate the markdown code
	 */
	public void visit(ISyntacticElement element) {
		
		//Check that we have a model
		if(element.getKeyword().equals(IParser.GAMA_KEYWORD_MODEL))
		{
			VisitorDebug.DEBUG("  doing world");
			//Add the header (world)
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubHeader(IParser.MARKDOWN_LABEL_WORLD));
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addQuote(MarkdownTools.getCommentsFromElement(element.getElement())));

			//Visit the facets and add the text of facets
			visitorFacets.setText(mDText);
			element.visitFacets(visitorFacets);
			mDText=visitorFacets.getText();

			//Visit the microspecies and add the text of microspecies
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubSubHeader(IParser.MARKDOWN_LABEL_MICROSPECIES));
			visitorMicroSpecies.setText(mDText);
			element.visitAllChildren(visitorMicroSpecies);
			mDText=visitorMicroSpecies.getText();
			

			//Visit the attributes and add the text of attributes
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubSubHeader(IParser.MARKDOWN_LABEL_ATTRIBUTES));
			visitorAttributes.setText(mDText);
			element.visitChildren(visitorAttributes);
			mDText=visitorAttributes.getText();

			//Visit the actions and add the text of actions
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubSubHeader(IParser.MARKDOWN_LABEL_ACTIONS));
			visitorActions.setText(mDText);
			element.visitChildren(visitorActions);
			mDText=visitorActions.getText();

			//Visit the reflexes and add the text of reflexes
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubSubHeader(IParser.MARKDOWN_LABEL_REFLEXES));
			visitorReflexes.setText(mDText);
			element.visitChildren(visitorReflexes);
			mDText=visitorReflexes.getText();
		}
	}
}
