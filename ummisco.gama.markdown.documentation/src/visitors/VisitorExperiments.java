package visitors;

import java.util.Map;

import markdownSyntactic.IParser;
import markdownSyntactic.MarkdownTools;
import msi.gaml.compilation.ast.ISyntacticElement;
import msi.gaml.compilation.ast.ISyntacticElement.SyntacticVisitor;
/**
 * 
 * @author damienphilippon
 * Date : 19 Dec 2017
 * Class representing the visitor of ISyntacticElement representing Experiments defined in GAML. This visitor
 * will generate the Markdown text for a visited ISyntacticElement for the Documentation
 */
public class VisitorExperiments implements SyntacticVisitor{
	/**
	 * Variable that will contain the markdown text generated by the visitor
	 */
	StringBuilder mDText;
	/**
	 * Variable representing the visitor of actions of an experiment
	 */
	VisitorActions visitorActions;
	/**
	 * Variable representing the visitor of attributes of an experiment
	 */
	VisitorAttributes visitorAttributes;
	/**
	 * Variable representing the visitor of facets of an experiment
	 */
	VisitorFacets visitorFacets;
	/**
	 * Variable representing the visitor of reflexes of an experiment
	 */
	VisitorReflexes visitorReflexes = new VisitorReflexes();
	/**
	 * Variable representing the visitor of parameters of an experiment
	 */
	VisitorParameters visitorParameters = new VisitorParameters();
	/**
	 * Variable representing the visitor of displays of an experiment
	 */
	VisitorDisplays visitorDisplays;
	/**
	 * Variable representing all the species and the link to the documentation files that will present them
	 */
	Map<String, String> speciesLink;
	/**
	 * Variable representing all the experiments and the link to the documentation files that will present them
	 */
	Map<String, String> experimentsLink;
	
	/**
	 * Constructor of the visitor, using the linkSpecies and linkExperiments for replacing unknown variable types by their corresponding variables
	 * @param linkSpecies {@code Map<String, String>}, the map giving the link of a species to the markdown document describing it
	 * @param linkExperiments {@code Map<String, String>}, the map giving the link of an experiment to the markdown document describing it
	 */
	public VisitorExperiments(Map<String, String> linkSpecies,Map<String, String> linkExperiments)
	{
		this.speciesLink=linkSpecies;
		this.experimentsLink=linkExperiments;
		
		//Initialize the visitors using the maps
		this.visitorActions= new VisitorActions(speciesLink,experimentsLink);
		this.visitorAttributes= new VisitorAttributes(speciesLink,experimentsLink);
		this.visitorFacets = new VisitorFacets(speciesLink,experimentsLink);
		this.visitorDisplays = new VisitorDisplays(speciesLink,experimentsLink);
	}
	
	/**
	 * Method used to visit a ISyntacticElement (expecting an Experiment here), generating the markdown Text of it
	 * @param element {@code ISyntacticElement}, the ISyntacticElement representing a Display that will be used to generate the markdown code
	 */
	public void visit(ISyntacticElement element) {
		
		//Filter for only experiments
		if(element.isExperiment())
		{

			VisitorDebug.DEBUG("  doing the experiment "+element.getName());
			//Write the header of the experiment
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			String title = element.getName();
			if(element.hasFacet(IParser.GAMA_KEYWORD_TYPE))
			{
				title+=" ("+element.getExpressionAt(IParser.GAMA_KEYWORD_TYPE)+")";
			}
			mDText.append(MarkdownTools.addSubSubHeader(IParser.MARKDOWN_LABEL_EXPERIMENT+IParser.MARKDOWN_KEYWORD_SPACE+title));
			
			//Visit the facets of the experiment
			visitorFacets.setText(mDText);
			element.visitFacets(visitorFacets);
			mDText=visitorFacets.getText();
			
			//Add the commentaries (defined in GAML) of the experiments
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addQuote(MarkdownTools.getCommentsFromElement(element.getElement())));
			
			//Add the parameters to the Text
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubSubHeader(IParser.MARKDOWN_LABEL_PARAMETERS));
			visitorParameters.setText(mDText);
			element.visitChildren(visitorParameters);
			mDText=visitorParameters.getText();
			
			//Add the reflexes to the Text
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubSubHeader(IParser.MARKDOWN_LABEL_REFLEXES));
			visitorReflexes.setText(mDText);
			element.visitChildren(visitorReflexes);
			visitorReflexes.first=true;
			mDText=visitorReflexes.getText();

			//Add the actions to the Text
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubSubHeader(IParser.MARKDOWN_LABEL_ACTIONS));
			visitorActions.setText(mDText);
			element.visitChildren(visitorActions);
			visitorActions.first=true;
			mDText=visitorActions.getText();

			//Add the attributes to the Text
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubSubHeader(IParser.MARKDOWN_LABEL_ATTRIBUTES));
			visitorAttributes.setText(mDText);
			element.visitChildren(visitorAttributes);
			visitorAttributes.first=true;
			mDText=visitorAttributes.getText();

			//Add the displays to the Text
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubSubHeader(IParser.MARKDOWN_LABEL_DISPLAYS));
			visitorDisplays.setText(mDText);
			element.visitChildren(visitorDisplays);
			mDText=visitorDisplays.getText();
		}
	}
	/**
	 * Method to directly initialise the markdown text of the visitor, in order to let it add its generated text and return it to the model descriptor
	 * @param aBuilder {@code StringBuilder}, the StringBuilder of a model descriptor that will receive the generated text
	 */
	public void setText(StringBuilder aBuilder)
	{
		mDText=aBuilder;
	}
	
	/**
	 * Function that returns the StringBuilder of an Experiment Visitor once the visitor has done its job (adding text of an Experiment)
	 * @return {@code StringBuilder} the StringBuilder of a model descriptor 
	 */
	public StringBuilder getText()
	{
		return this.mDText;
	}
	
	
	/**
	 * Method to dispose all the objects that have been used by the VisitorExperiments and release memory
	 */
	public void dispose()
	{
		mDText=null;
		visitorActions.dispose();
		visitorFacets.dispose();
		visitorAttributes.dispose();
		visitorReflexes.dispose();
		visitorParameters.dispose();
		visitorDisplays.dispose();
		visitorActions=null;
		visitorFacets=null;
		visitorAttributes=null;
		visitorReflexes=null;
		visitorParameters=null;
		visitorDisplays=null;
		this.experimentsLink=null;
		this.speciesLink=null;
	}
}
