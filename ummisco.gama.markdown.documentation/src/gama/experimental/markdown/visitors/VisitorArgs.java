package gama.experimental.markdown.visitors;

import java.util.Map;

import gama.experimental.markdown.markdownSyntactic.IParser;
import gama.experimental.markdown.markdownSyntactic.MarkdownTools;
import gama.gaml.compilation.ast.ISyntacticElement;
import gama.gaml.compilation.ast.ISyntacticElement.SyntacticVisitor;
import gama.gaml.types.Types;

/**
 * 
 * @author damienphilippon
 * Date : 19 Dec 2017
 * Class representing the visitor of Arguments of an ISyntacticElement defining an Action Statement.
 * This visitor is used to generate the Markdown text of an ISyntacticElement visited for the Documentation.
 */
public class VisitorArgs implements SyntacticVisitor{
	/**
	 * Boolean to determine whether or not it is the first argument being visited
	 */
	boolean first = true;
	
	/**
	 * StringBuilder corresponding to the Markdown text generated by the visitor
	 */
	StringBuilder mDText;

	/**
	 * Map representing the species and the link to the document describing a species
	 */
	Map<String, String> speciesLink;
	
	/**
	 * Map representing the experiments and the link to the document describing an experiment
	 */
	Map<String, String> experimentsLink;
	
	/**
	 * Constructor of the visitor, using the linkSpecies and linkExperiments for replacing unknown variable types by their corresponding variables
	 * @param linkSpecies {@code Map<String, String>}, the map giving the link of a species to the markdown document describing it
	 * @param linkExperiments {@code Map<String, String>}, the map giving the link of an experiment to the markdown document describing it
	 */
	public VisitorArgs(Map<String, String> linkSpecies,Map<String, String> linkExperiments)
	{
		this.speciesLink=linkSpecies;
		this.experimentsLink=linkExperiments;
		mDText = new StringBuilder();
	}
	
	/**
	 * Method to directly initialise the markdown text of the visitor, in order to let it add its generated text and return it to the model descriptor
	 * @param aBuilder {@code StringBuilder}, the StringBuilder of a model descriptor that will receive the generated text
	 */
	public void setText(StringBuilder aBuilder)
	{
		mDText=aBuilder;
	}
	
	/**
	 * Function that returns the StringBuilder of an Arguments Visitor once the visitor has done its job (adding text of an Argument)
	 * @return {@code StringBuilder} the StringBuilder of a model descriptor 
	 */
	public StringBuilder getText()
	{
		return mDText;
	}
	
	/**
	 * Method to dispose all the objects that have been used by the VisitorArgs and release memory
	 */
	public void dispose()
	{
		this.experimentsLink=null;
		this.speciesLink=null;
		this.mDText=null;
	}
	
	/**
	 * Method used to visit a ISyntacticElement (expecting an Argument here), generating the markdown Text of it
	 * @param element {@code ISyntacticElement}, the ISyntacticElement representing an Argument that will be used to generate the markdown code
	 */
	public void visit(ISyntacticElement element) {
		if(element.getKeyword().equals(IParser.GAMA_KEYWORD_ARG))
		{
			VisitorDebug.DEBUG("                         doing the arg "+element.getExpressionAt(IParser.GAMA_KEYWORD_NAME));
			//Determine weither or not it is the first argument being passed to the action
			if(first)
			{
				first=false;
			}
			else
			{
				mDText.append(",");
			}
			//Getting the type returned by the action in order to know if it is built-in or not
			String type = element.getExpressionAt(IParser.GAMA_KEYWORD_TYPE).toString();
			
			//We consider that the returning type is a species type if it is unknown
			if(Types.get(type).toString().equals(IParser.GAMA_KEYWORD_UNKNOWN))
			{
				//Add the link to the species
				type=MarkdownTools.addLink(type, speciesLink.get(type));
			}
			mDText.append(type);
			mDText.append(IParser.MARKDOWN_KEYWORD_SPACE+element.getExpressionAt(IParser.GAMA_KEYWORD_NAME));
		}
	}
}
