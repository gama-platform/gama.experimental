package gama.experimental.markdown.visitors;

import java.util.Map;

import gama.experimental.markdown.markdownSyntactic.IParser;
import gama.experimental.markdown.markdownSyntactic.MarkdownTools;
import gama.gaml.compilation.ast.ISyntacticElement;
import gama.gaml.compilation.ast.ISyntacticElement.SyntacticVisitor;

public class VisitorSpecies implements SyntacticVisitor{
	/**
	 * Variable that will contain the markdown text generated by the visitor
	 */
	StringBuilder mDText;
	/**
	 * Variable representing the visitor of the facets of a species
	 */
	VisitorFacets visitorFacets;
	/**
	 * Variable representing the visitor of the micro species of a species
	 */
	VisitorMicroSpecies visitorMicroSpecies;
	/**
	 * Variable representing the visitor of the attributes of a species
	 */
	VisitorAttributes visitorAttributes;
	/**
	 * Variable representing the visitor of the actions of a species
	 */
	VisitorActions visitorActions;
	/**
	 * Variable representing the visitor of the reflexes of a species
	 */
	VisitorReflexes visitorReflexes;
	/**
	 * Variable representing the visitor of the aspects of a species
	 */
	VisitorAspects visitorAspects;
	
	/**
	 * Variable representing all the species and the link to the documentation files that will present them
	 */
	Map<String, String> speciesLink;
	/**
	 * Variable representing all the experiments and the link to the documentation files that will present them
	 */
	Map<String, String> experimentsLink;
	
	/**
	 * Constructor of the visitor, using the linkSpecies and linkExperiments for replacing unknown variable types by their corresponding variables
	 * @param linkSpecies {@code Map<String, String>}, the map giving the link of a species to the markdown document describing it
	 * @param linkExperiments {@code Map<String, String>}, the map giving the link of an experiment to the markdown document describing it
	 */
	public VisitorSpecies(Map<String, String> linkSpecies,Map<String, String> linkExperiments)
	{
		mDText=new StringBuilder();
		this.speciesLink=linkSpecies;
		this.experimentsLink=linkExperiments;
		visitorFacets = new VisitorFacets(linkSpecies,linkExperiments);
		visitorMicroSpecies = new VisitorMicroSpecies();
		visitorAttributes = new VisitorAttributes(linkSpecies,linkExperiments);
		visitorActions = new VisitorActions(linkSpecies,linkExperiments);
		visitorReflexes = new VisitorReflexes();
		visitorAspects = new VisitorAspects();
	}
	
	/**
	 * Method to directly initialise the markdown text of the visitor, in order to let it add its generated text and return it to the model descriptor
	 * @param aBuilder {@code StringBuilder}, the StringBuilder of a model descriptor that will receive the generated text
	 */
	public void setText(StringBuilder aBuilder)
	{
		mDText=aBuilder;
	}
	/**
	 * Function that returns the StringBuilder of a VisitorSpecies once the visitor has done its job (adding text of a Species)
	 * @return {@code StringBuilder} the StringBuilder of a model descriptor 
	 */
	public StringBuilder getText()
	{
		return mDText;
	}
	/**
	 * Method to dispose all the objects that have been used by the VisitorSpecies and release memory
	 */
	public void dispose()
	{
		this.mDText=null;
		visitorFacets.dispose();
		visitorMicroSpecies.dispose();
		visitorAttributes.dispose();
		visitorActions.dispose();
		visitorReflexes.dispose();
		visitorAspects.dispose();
		this.visitorFacets=null;
		this.visitorMicroSpecies=null;
		this.visitorAttributes=null;
		this.visitorActions=null;
		this.visitorReflexes=null;
		this.visitorAspects=null;
		this.experimentsLink=null;
		this.speciesLink=null;
	}
	/**
	 * Method used to visit a ISyntacticElement (expecting a Species here), generating the markdown Text of it
	 * @param element {@code ISyntacticElement}, the ISyntacticElement representing a Species that will be used to generate the markdown code
	 */
	public void visit(ISyntacticElement element) {
		if(element.isSpecies())
		{

			VisitorDebug.DEBUG("  doing species "+element.getName());
			
			//Generate the header of the species (species name or grid name)
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			if(element.getKeyword().equals(IParser.GAMA_KEYWORD_GRID))
			{
				mDText.append(MarkdownTools.addSubSubHeader(IParser.MARKDOWN_LABEL_GRID+IParser.MARKDOWN_KEYWORD_SPACE+element.getName()));
			}
			else
			{
				mDText.append(MarkdownTools.addSubSubHeader(IParser.MARKDOWN_LABEL_SPECIES+IParser.MARKDOWN_KEYWORD_SPACE+element.getName()));
			}
			mDText.append(MarkdownTools.goBeginLine());
			
			//Add the comments from GAML of the species
			mDText.append(MarkdownTools.addQuote(MarkdownTools.getCommentsFromElement(element.getElement())));

			//Add the facets of the species (parent, skill, control)
			visitorFacets.setText(mDText);
			element.visitFacets(visitorFacets);
			mDText=visitorFacets.getText();

			//Add the micro species of the species
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubSubHeader(IParser.MARKDOWN_LABEL_MICROSPECIES));
			visitorMicroSpecies.setText(mDText);
			element.visitAllChildren(visitorMicroSpecies);
			mDText=visitorMicroSpecies.getText();
			

			//Add the attributes of the species
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubSubHeader(IParser.MARKDOWN_LABEL_ATTRIBUTES));
			visitorAttributes.setText(mDText);
			visitorAttributes.first=true;
			element.visitChildren(visitorAttributes);
			mDText=visitorAttributes.getText();
			mDText.append(MarkdownTools.endTable());

			//Add the actions of the species
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubSubHeader(IParser.MARKDOWN_LABEL_ACTIONS));
			visitorActions.setText(mDText);
			visitorActions.first=true;
			element.visitChildren(visitorActions);
			mDText=visitorActions.getText();
			mDText.append(MarkdownTools.endTable());

			//Add the reflexes of the species
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubSubHeader(IParser.MARKDOWN_LABEL_REFLEXES));
			visitorReflexes.setText(mDText);
			visitorReflexes.first=true;
			element.visitChildren(visitorReflexes);
			mDText=visitorReflexes.getText();
			mDText.append(MarkdownTools.endTable());

			//Add the aspects of the species
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(MarkdownTools.addSubSubSubHeader(IParser.MARKDOWN_LABEL_ASPECTS));
			visitorAspects.setText(mDText);
			element.visitChildren(visitorAspects);
			mDText=visitorAspects.getText();
		}
	}
}
