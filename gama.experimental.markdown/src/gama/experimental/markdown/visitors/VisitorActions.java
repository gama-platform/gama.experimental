package gama.experimental.markdown.visitors;

import java.util.ArrayList;
import java.util.Map;

import gama.experimental.markdown.markdownSyntactic.IParser;
import gama.experimental.markdown.markdownSyntactic.MarkdownTools;
import gama.gaml.compilation.ast.ISyntacticElement;
import gama.gaml.compilation.ast.ISyntacticElement.SyntacticVisitor;
import gama.gaml.types.Types;

/**
 * 
 * @author damienphilippon
 * Date : 19 Dec 2017
 * Class representing the visitor of ISyntacticElement representing Actions defined in GAML. This visitor
 * will generate the Markdown text for a visited ISyntacticElement for the Documentation
 */
public class VisitorActions implements SyntacticVisitor {
	
	/**
	 * Variable that will contain the markdown text generated by the visitor
	 */
	StringBuilder mDText;
	/**
	 * Variable representing the visitor of the arguments of an action
	 */
	VisitorArgs visitorArgs;
	/**
	 * Variable used for better text for arguments 
	 */
	boolean first = true;
	/**
	 * Variable representing all the species and the link to the documentation files that will present them
	 */
	Map<String, String> speciesLink;
	
	/**
	 * Variable representing all the experiments and the link to the documentation files that will present them
	 */
	Map<String, String> experimentsLink;
	
	/**
	 * Constructor of the visitor, using the linkSpecies and linkExperiments for replacing unknown variable types by their corresponding variables
	 * @param linkSpecies {@code Map<String, String>}, the map giving the link of a species to the markdown document describing it
	 * @param linkExperiments {@code Map<String, String>}, the map giving the link of an experiment to the markdown document describing it
	 */
	public VisitorActions(Map<String, String> linkSpecies,Map<String, String> linkExperiments)
	{
		this.speciesLink=linkSpecies;
		this.experimentsLink=linkExperiments;
		mDText= new StringBuilder() ;
		visitorArgs = new VisitorArgs(speciesLink,experimentsLink);
	}
	
	/**
	 * Method used to visit a ISyntacticElement (expecting an Action here), generating the markdown Text of it
	 * @param element {@code ISyntacticElement}, the ISyntacticElement representing an Action that will be used to generate the markdown code
	 */
	public void visit(ISyntacticElement element) {
		if(element.getKeyword().equals(IParser.GAMA_KEYWORD_ACTION))
		{
			//If it is the first element, define the header of the table of actions
			if(first)
			{
				mDText.append(MarkdownTools.beginTable());
				ArrayList<String> header = new ArrayList<String>();
				header.add("Type");
				header.add("Name");
				mDText.append(MarkdownTools.addTableHeader(header));
				first=false;
			}
			VisitorDebug.DEBUG("          doing the action "+element.getName());
			//Add the action to the table (Return type | Action_name( type_param name_param, .... ) )
			//But first try to determine if the return type (if there is any) is not a built-in type
			//in order to make a link with the documentation of the species and put the link in the left column
			mDText.append(MarkdownTools.beginRow());
			if((element.hasFacet(IParser.GAMA_KEYWORD_TYPE))&&(element.getExpressionAt(IParser.GAMA_KEYWORD_TYPE).toString().equals("null")==false))
			{
				String type = element.getExpressionAt(IParser.GAMA_KEYWORD_TYPE).toString();
				if(Types.get(type).toString().equals("unknown"))
				{
					type=MarkdownTools.addLink(type, speciesLink.get(type));
				}
				mDText.append(MarkdownTools.addCell(type));
			}
			else
			{
				mDText.append(MarkdownTools.addCell(""));
			}
			StringBuilder cellValue = new StringBuilder();
			
			//Add the name of the actions and its parameters in the right column
			cellValue.append(IParser.MARKDOWN_KEYWORD_SPACE+element.getName());
			cellValue.append("(");
			visitorArgs.setText(cellValue);
			element.visitChildren(visitorArgs);
			cellValue=visitorArgs.getText();
			cellValue.append(")");
			
			
			cellValue.append(MarkdownTools.addBr());
			
			//Add commentaries given by the GAML code (using /** */)
			cellValue.append(MarkdownTools.addCode(MarkdownTools.getCommentsFromElement(element.getElement())));
			mDText.append(MarkdownTools.addCell(cellValue.toString()));
			cellValue=null;
			mDText.append(MarkdownTools.endRow());
		}
	}
	
	/**
	 * Method to directly initialise the markdown text of the visitor, in order to let it add its generated text and return it to the model descriptor
	 * @param aBuilder {@code StringBuilder}, the StringBuilder of a model descriptor that will receive the generated text
	 */
	public void setText(StringBuilder aBuilder)
	{
		mDText=aBuilder;
	}
	
	/**
	 * Function that returns the StringBuilder of an Action Visitor once the visitor has done its job (adding text of an Action)
	 * @return {@code StringBuilder} the StringBuilder of a model descriptor 
	 */
	public StringBuilder getText()
	{
		return mDText;
	}
	
	/**
	 * Method to dispose all the objects that have been used by the VisitorActions and release memory
	 */
	public void dispose()
	{
		visitorArgs.dispose();
		visitorArgs=null;
		this.mDText=null;
		this.experimentsLink=null;
		this.speciesLink=null;
	}
}
