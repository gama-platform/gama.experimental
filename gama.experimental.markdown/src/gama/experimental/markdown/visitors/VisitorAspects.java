package gama.experimental.markdown.visitors;


import gama.experimental.markdown.markdownSyntactic.IParser;
import gama.experimental.markdown.markdownSyntactic.MarkdownTools;
import gama.gaml.compilation.ast.ISyntacticElement;
import gama.gaml.compilation.ast.ISyntacticElement.SyntacticVisitor;


/**
 * 
 * @author damienphilippon
 * Date : 19 Dec 2017
 * Class representing the visitor of Aspects of a Species.
 * This visitor is used to generate the Markdown text of an ISyntacticElement visited for the Documentation.
 */
public class VisitorAspects implements SyntacticVisitor{
	
	/**
	 * StringBuilder corresponding to the Markdown text generated by the visitor
	 */
	StringBuilder mDText;
	
	/**
	 * Constructor of the visitor, does not expect anything
	 */
	public VisitorAspects()
	{
	}
	
	/**
	 * Method to directly initialise the markdown text of the visitor, in order to let it add its generated text and return it to the model descriptor
	 * @param aBuilder {@code StringBuilder}, the StringBuilder of a model descriptor that will receive the generated text
	 */
	public void setText(StringBuilder aBuilder)
	{
		mDText=aBuilder;
	}
	
	/**
	 * Function that returns the StringBuilder of an Aspect Visitor once the visitor has done its job (adding text of an Aspect)
	 * @return {@code StringBuilder} the StringBuilder of a model descriptor 
	 */
	public StringBuilder getText()
	{
		return mDText;
	}
	
	/**
	 * Method to dispose all the objects that have been used by the VisitorAspects and release memory
	 */
	public void dispose()
	{
		this.mDText=null;
	}
	
	/**
	 * Method used to visit a ISyntacticElement (expecting an Aspect here), generating the markdown Text of it
	 * @param element {@code ISyntacticElement}, the ISyntacticElement representing an Aspect that will be used to generate the markdown code
	 */
	public void visit(ISyntacticElement element) {
		if(element.getKeyword().equals(IParser.GAMA_KEYWORD_ASPECT))
		{

			VisitorDebug.DEBUG("          doing the aspect "+element.getName());
			mDText.append(MarkdownTools.goBeginLine());
			//Display the aspect as an item of a markdown list
			mDText.append(IParser.MARKDOWN_KEYWORD_LIST+IParser.MARKDOWN_KEYWORD_SPACE+element.getName());
			//Add the commentaries surrounding the aspect
			mDText.append(MarkdownTools.addCode(MarkdownTools.getCommentsFromElement(element.getElement())));
		}
	}
}
