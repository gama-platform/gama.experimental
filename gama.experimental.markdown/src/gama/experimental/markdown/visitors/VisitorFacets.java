package gama.experimental.markdown.visitors;

import java.util.Map;

import gama.gaml.descriptions.IDescription.IFacetVisitor;
import gama.experimental.markdown.markdownSyntactic.IParser;
import gama.experimental.markdown.markdownSyntactic.MarkdownTools;
import gama.gaml.descriptions.IExpressionDescription;
import gama.gaml.types.Types;

/**
 *
 * @author damienphilippon Date : 19 Dec 2017 Class representing the visitor of IExpressionDescription representing
 *         Facets defined in GAML. This visitor will generate the Markdown text for a visited IExpressionDescription for
 *         the Documentation
 */
public class VisitorFacets implements IFacetVisitor {
	/**
	 * Variable that will contain the markdown text generated by the visitor
	 */
	StringBuilder mDText;
	/**
	 * Variable representing all the species and the link to the documentation files that will present them
	 */
	Map<String, String> speciesLink;
	/**
	 * Variable representing all the experiments and the link to the documentation files that will present them
	 */
	Map<String, String> experimentsLink;

	/**
	 * Constructor of the visitor, using the linkSpecies and linkExperiments for replacing unknown variable types by
	 * their corresponding variables
	 * 
	 * @param linkSpecies
	 *            {@code Map<String, String>}, the map giving the link of a species to the markdown document describing
	 *            it
	 * @param linkExperiments
	 *            {@code Map<String, String>}, the map giving the link of an experiment to the markdown document
	 *            describing it
	 */
	public VisitorFacets(final Map<String, String> linkSpecies, final Map<String, String> linkExperiments) {
		this.speciesLink = linkSpecies;
		this.experimentsLink = linkExperiments;
	}

	/**
	 * Method used to visit a IExpressionDescription (expecting Facets here), generating the markdown Text of it
	 * 
	 * @param exp
	 *            {@code IExpressionDescription}, the IExpressionDescription representing facets that will be used to
	 *            generate the markdown code
	 */
	@Override
	public boolean process(final String name, final IExpressionDescription exp) {

		// To generate parent facet documentation
		if (name.equals(IParser.GAMA_KEYWORD_PARENT)) {

			mDText.append(MarkdownTools.goBeginLine());
			String type = exp.toString();
			if (Types.get(type).toString().equals("unknown")) {
				if (speciesLink.containsKey(type)) {
					type = MarkdownTools.addLink(type, speciesLink.get(type));
				} else {
					type = MarkdownTools.addLink(type, experimentsLink.get(type));
				}
			}
			VisitorDebug.DEBUG("          parent: " + exp.toString());
			mDText.append(IParser.MARKDOWN_TEXT_DERIVED + type);
		}

		// To generate skill facet documentation
		if (name.equals(IParser.GAMA_KEYWORD_SKILLS)) {
			VisitorDebug.DEBUG("          skills: " + exp.toString());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(IParser.MARKDOWN_TEXT_SKILLS + exp);
		}

		// To generate control facet documentation
		if (name.equals(IParser.GAMA_KEYWORD_CONTROL)) {
			VisitorDebug.DEBUG("          control: " + exp.toString());
			mDText.append(MarkdownTools.goBeginLine());
			mDText.append(IParser.MARKDOWN_TEXT_CONTROL + exp);
		}
		return true;
	}

	/**
	 * Method to directly initialise the markdown text of the visitor, in order to let it add its generated text and
	 * return it to the model descriptor
	 * 
	 * @param aBuilder
	 *            {@code StringBuilder}, the StringBuilder of a model descriptor that will receive the generated text
	 */
	public void setText(final StringBuilder aBuilder) {
		this.mDText = aBuilder;
	}

	/**
	 * Function that returns the StringBuilder of an Experiment Visitor once the visitor has done its job (adding text
	 * of an Experiment)
	 * 
	 * @return {@code StringBuilder} the StringBuilder of a model descriptor
	 */
	public StringBuilder getText() {
		return mDText;
	}

	/**
	 * Method to dispose all the objects that have been used by the VisitorFacets and release memory
	 */
	public void dispose() {
		this.experimentsLink = null;
		this.speciesLink = null;
		this.mDText = null;
	}
}
